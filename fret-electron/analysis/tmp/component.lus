--Historically
node H(X:bool) returns (Y:bool);
let
    Y = X -> (X and (pre Y));
tel

--Y since inclusive X
node SI(X,Y: bool) returns (Z:bool);
let
Z = Y and (X or (false -> pre Z));
tel

--Y since X
node S(X,Y: bool) returns (Z:bool);
let
Z = X or (Y and (false -> pre Z));
tel

--Once
node O(X:bool) returns (Y:bool);
let
 Y = X or (false -> pre Y);
tel

--Timed Once: less than or equal to N
node OTlore( N: int; X: bool) returns (Y: bool);
    var C:int;
let
    C = if X then 0
        else (-1 -> pre C + (if pre C <0 then 0 else 1));

    Y = 0 <= C and C <= N;
tel

--Timed Once: general case
node OT( L: int;  R: int; X: bool) returns (Y: bool);
var  D:bool;
let
  D=delay(X, R);
  Y=OTlore(L-R, D);
tel

-- Timed Historically: general case
node HT( L: int;  R: int; X: bool) returns (Y: bool);
let
  Y = not OT(L, R, not X);
tel

-- Timed Since: general case
node ST( L: int;  R: int; X: bool; Y: bool)  returns (Z: bool);
let
  Z = S(X, Y) and OT(L, R, X);
tel

-- Timed Since: general case
node SIT( L: int;  R: int; X: bool; Y: bool) returns (Z: bool);
let
  Z = SI(X, Y) and OT(L, R, X);
tel


node delay(X:bool;  R:int) returns(Y:bool);
let

 
  Y = if (R=0) then X
   
      else if (R=5) then delay3(X)
   
     else delay2(X);
 
tel


  node delay5(X:bool) returns(Y:bool);
  var  X_0,  X_1,  X_2,  X_3,  X_4, X_5 :bool;
  let

  X_0=X; 
  X_1=false -> pre X_0;
  X_2=false -> pre X_1;
  X_3=false -> pre X_2;
  X_4=false -> pre X_3;
  X_5=false -> pre X_4;
  Y = X_5;

  tel

  node delay3(X:bool) returns(Y:bool);
  var  X_0,  X_1, X_2, X_3 :bool;
  let

  X_0=X; 
  X_1=false -> pre X_0;
  X_2=false -> pre X_1;
  X_3=false -> pre X_2;
  Y = X_3;

  tel

  node delay2(X:bool) returns(Y:bool);
  var  X_0,  X_1, X_2 :bool;
  let

  X_0=X; 
  X_1=false -> pre X_0;
  X_2=false -> pre X_1;
  Y = X_2;

  tel


node componentSpec( A:bool; B:bool; C:bool   ) returns ( );

var req3:bool; req4:bool; FTP: bool; 
let


FTP = true->false;





 
(* Req text: if B component shall within 5 seconds satisfy C  *)
req3 = (H((OT(3,3,( ( (B) and ( ( pre ( not (B) ) ) or FTP ) ) and ( not (C) ) ))) => (OT(3-1,0,( FTP or (C) )))));  
 
(* Req text: if A component shall for 2 seconds satisfy !C  *)
req4 = (H((OT(2,0,( (A) and ( ( pre ( not (A) ) ) or FTP ) ))) => ((H( not (A))) or (not C))));  

 
 --%PROPERTY req3;  
 --%PROPERTY req4; 
--%REALIZABLE A, B;  

tel

