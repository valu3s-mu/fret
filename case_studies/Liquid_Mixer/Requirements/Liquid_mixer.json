[
    {
        "reqid": "LM-012",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "",
        "fulltext": "when emergency_button the liquid_mixer shall immediately satisfy ! stirring_motor",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "emergency_button",
                    "stirring_motor"
                ],
                "modes": []
            },
            "regular_condition": "(emergency_button)",
            "qualifier_word": "when",
            "pre_condition": "(emergency_button)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                22,
                37
            ],
            "timingTextRange": [
                45,
                55
            ],
            "post_condition": "(! stirring_motor)",
            "responseTextRange": [
                57,
                80
            ],
            "ft": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X <b><i>(! stirring_motor)</i></b>))) & (<b><i>(emergency_button)</i></b> -> <b><i>(! stirring_motor)</i></b>))",
            "pt": "(H ((<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | FTP)) -> <b><i>(! stirring_motor)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X <b><i>(! stirring_motor)</i></b>))) & (<b><i>(emergency_button)</i></b> -> <b><i>(! stirring_motor)</i></b>))",
            "ptExpanded": "(H ((<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | (! (Y TRUE)))) -> <b><i>(! stirring_motor)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((emergency_button) and ((pre ( not (emergency_button))) or FTP)) => (not stirring_motor)))",
            "diagramVariables": "TC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! stirring_motor)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(emergency_button)</i></b> is true and any point in the interval where <b><i>(emergency_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "e7138d50-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "LM-005",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When liquid level 2 is reached occurs, the 60 sec timer shall start.",
        "fulltext": "when liquid_level_2 the liquid_mixer shall immediately satisfy timer_60sec_start",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_2",
                    "timer_60sec_start"
                ],
                "modes": []
            },
            "regular_condition": "(liquid_level_2)",
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_2)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                35
            ],
            "timingTextRange": [
                43,
                53
            ],
            "post_condition": "(timer_60sec_start)",
            "responseTextRange": [
                55,
                79
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X <b><i>(timer_60sec_start)</i></b>))) & (<b><i>(liquid_level_2)</i></b> -> <b><i>(timer_60sec_start)</i></b>))",
            "pt": "(H ((<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | FTP)) -> <b><i>(timer_60sec_start)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X <b><i>(timer_60sec_start)</i></b>))) & (<b><i>(liquid_level_2)</i></b> -> <b><i>(timer_60sec_start)</i></b>))",
            "ptExpanded": "(H ((<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | (! (Y TRUE)))) -> <b><i>(timer_60sec_start)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((liquid_level_2) and ((pre ( not (liquid_level_2))) or FTP)) => (timer_60sec_start)))",
            "diagramVariables": "TC = <b><i>(liquid_level_2)</i></b>, Response = <b><i>(timer_60sec_start)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_2)</i></b> is true and any point in the interval where <b><i>(liquid_level_2)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "e713db70-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "LM-002",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": " When liquid level 1 is reached occurs, the liquid mixer controller shall close valve 0",
        "fulltext": "when liquid_level_1 liquid_mixer shall immediately satisfy ! valve_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_1",
                    "valve_0"
                ],
                "modes": []
            },
            "regular_condition": "(liquid_level_1)",
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_1)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                31
            ],
            "timingTextRange": [
                39,
                49
            ],
            "post_condition": "(! valve_0)",
            "responseTextRange": [
                51,
                67
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_1)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_1)</i></b>))) -> (X <b><i>(! valve_0)</i></b>))) & (<b><i>(liquid_level_1)</i></b> -> <b><i>(! valve_0)</i></b>))",
            "pt": "(H ((<b><i>(liquid_level_1)</i></b> & ((Y (! <b><i>(liquid_level_1)</i></b>)) | FTP)) -> <b><i>(! valve_0)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_1)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_1)</i></b>))) -> (X <b><i>(! valve_0)</i></b>))) & (<b><i>(liquid_level_1)</i></b> -> <b><i>(! valve_0)</i></b>))",
            "ptExpanded": "(H ((<b><i>(liquid_level_1)</i></b> & ((Y (! <b><i>(liquid_level_1)</i></b>)) | (! (Y TRUE)))) -> <b><i>(! valve_0)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((liquid_level_1) and ((pre ( not (liquid_level_1))) or FTP)) => (not valve_0)))",
            "diagramVariables": "TC = <b><i>(liquid_level_1)</i></b>, Response = <b><i>(! valve_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_1)</i></b> is true and any point in the interval where <b><i>(liquid_level_1)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "e7140280-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "LM-010",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When emergency button is pressed occurs, the liquid mixer controller shall close valve 1.",
        "fulltext": "when emergency_button the liquid_mixer shall immediately satisfy ! valve_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "emergency_button",
                    "valve_1"
                ],
                "modes": []
            },
            "regular_condition": "(emergency_button)",
            "qualifier_word": "when",
            "pre_condition": "(emergency_button)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                22,
                37
            ],
            "timingTextRange": [
                45,
                55
            ],
            "post_condition": "(! valve_1)",
            "responseTextRange": [
                57,
                73
            ],
            "ft": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X <b><i>(! valve_1)</i></b>))) & (<b><i>(emergency_button)</i></b> -> <b><i>(! valve_1)</i></b>))",
            "pt": "(H ((<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | FTP)) -> <b><i>(! valve_1)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X <b><i>(! valve_1)</i></b>))) & (<b><i>(emergency_button)</i></b> -> <b><i>(! valve_1)</i></b>))",
            "ptExpanded": "(H ((<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | (! (Y TRUE)))) -> <b><i>(! valve_1)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((emergency_button) and ((pre ( not (emergency_button))) or FTP)) => (not valve_1)))",
            "diagramVariables": "TC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! valve_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(emergency_button)</i></b> is true and any point in the interval where <b><i>(emergency_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "e7142990-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "LM-007",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When 60 second timer expires occurs, the 120 sec timer shall start.",
        "fulltext": "when timer_60sec_expire the liquid_mixer shall immediately satisfy timer_120sec_start",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "timer_60sec_expire",
                    "timer_120sec_start"
                ],
                "modes": []
            },
            "regular_condition": "(timer_60sec_expire)",
            "qualifier_word": "when",
            "pre_condition": "(timer_60sec_expire)",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                24,
                39
            ],
            "timingTextRange": [
                47,
                57
            ],
            "post_condition": "(timer_120sec_start)",
            "responseTextRange": [
                59,
                84
            ],
            "ft": "((LAST V (((! <b><i>(timer_60sec_expire)</i></b>) & ((! LAST) & (X <b><i>(timer_60sec_expire)</i></b>))) -> (X <b><i>(timer_120sec_start)</i></b>))) & (<b><i>(timer_60sec_expire)</i></b> -> <b><i>(timer_120sec_start)</i></b>))",
            "pt": "(H ((<b><i>(timer_60sec_expire)</i></b> & ((Y (! <b><i>(timer_60sec_expire)</i></b>)) | FTP)) -> <b><i>(timer_120sec_start)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(timer_60sec_expire)</i></b>) & ((! LAST) & (X <b><i>(timer_60sec_expire)</i></b>))) -> (X <b><i>(timer_120sec_start)</i></b>))) & (<b><i>(timer_60sec_expire)</i></b> -> <b><i>(timer_120sec_start)</i></b>))",
            "ptExpanded": "(H ((<b><i>(timer_60sec_expire)</i></b> & ((Y (! <b><i>(timer_60sec_expire)</i></b>)) | (! (Y TRUE)))) -> <b><i>(timer_120sec_start)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((timer_60sec_expire) and ((pre ( not (timer_60sec_expire))) or FTP)) => (timer_120sec_start)))",
            "diagramVariables": "TC = <b><i>(timer_60sec_expire)</i></b>, Response = <b><i>(timer_120sec_start)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(timer_60sec_expire)</i></b> is true and any point in the interval where <b><i>(timer_60sec_expire)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "e71477b0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "AP-003d",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The roll reference shall be set to the cockpit turn knob command, up to a 30 degree limit, if the turn knob is commanding 3 degrees or more in either direction. (we removed the \"up to a 30 degree limit\" part)",
        "fulltext": "RollAutopilot shall always satisfy (TurnKnob >= 3.0 | TurnKnob <= -3.0) & (TurnKnob <= 30.0 | TurnKnob >= -30.0) => roll_hold_reference = TurnKnob",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "TurnKnob",
                    "roll_hold_reference"
                ],
                "modes": []
            },
            "component_name": "RollAutopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)",
            "responseTextRange": [
                27,
                145
            ],
            "ft": "(LAST V <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "pt": "(H <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "ptExpanded": "(H <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) -> roll_hold_reference = TurnKnob)</i></b>)",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((( TurnKnob >= 3.0 or TurnKnob <= -3.0 ) and ( TurnKnob <= 30.0 or TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)))",
            "diagramVariables": "Response = <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(( TurnKnob >= 3.0 | TurnKnob <= -3.0 ) & ( TurnKnob <= 30.0 | TurnKnob >= -30.0 ) => roll_hold_reference = TurnKnob)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7149ec0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "NN-004",
        "parent_reqid": "NN.R1",
        "project": "LM_requirements",
        "rationale": "The absolute error between the zt truth data and the output z shall never exceed a tolerance of 0.01, for the equivalent input of (xt, yt).",
        "fulltext": "NN shall for 200 secs satisfy ( x = xt & y = yt  => AbsoluteErrorZtMinusZ <= 0.01)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "x",
                    "xt",
                    "y",
                    "yt",
                    "AbsoluteErrorZtMinusZ"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "duration": [
                "200"
            ],
            "timingTextRange": [
                9,
                20
            ],
            "post_condition": "(( x = xt & y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))",
            "responseTextRange": [
                22,
                81
            ],
            "ft": "((G[<=<b><i>200</i></b>] <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>) | (LAST V <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "pt": "(H ((O[<=<b><i>200</i></b>] FTP) -> <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "ftExpanded": "((G[<=<b><i>200</i></b>] <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>) | (LAST V <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "ptExpanded": "(H ((O[<=<b><i>200</i></b>] (! (Y TRUE))) -> <b><i>(( x = xt & y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>))",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((OT(200,0,FTP)) => (( x = xt and y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))))",
            "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(( x = xt & y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>.",
            "description": "TIME, the component \"<b><i>NN</i></b>\" shall satisfy <b><i>(( x = xt & y = yt => AbsoluteErrorZtMinusZ <= 0.01 ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg"
        },
        "_id": "e714c5d0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from TRANSITION to STANDBY when the pilot is in control (standby).",
        "fulltext": "FSM_Autopilot shall always satisfy (standby & state = ap_transition_state) => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "standby",
                    "state",
                    "ap_transition_state",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( standby & state = ap_transition_state ) => STATE = ap_standby_state)",
            "responseTextRange": [
                27,
                101
            ],
            "ft": "(LAST V <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( standby & state = ap_transition_state ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( standby and state = ap_transition_state ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( standby & state = ap_transition_state ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e714ece0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "EUL-001C",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_13 = - SinTheta",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_13",
                    "SinTheta"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_13 = - SinTheta)",
            "responseTextRange": [
                19,
                48
            ],
            "ft": "(LAST V <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "pt": "(H <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_13 = - SinTheta)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_13 = - SinTheta)))",
            "diagramVariables": "Response = <b><i>(DCM321_13 = - SinTheta)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_13 = - SinTheta)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71513f0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "TSM-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor shall always satisfy (single_fail_reported & failure_in_progress => set_val = pre_set_val)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "single_fail_reported",
                    "failure_in_progress",
                    "set_val",
                    "pre_set_val"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(( single_fail_reported & failure_in_progress => set_val = pre_set_val ))",
            "responseTextRange": [
                34,
                110
            ],
            "ft": "(LAST V <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "pt": "(H <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "ptExpanded": "(H <b><i>(( single_fail_reported & failure_in_progress -> set_val = pre_set_val ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((( single_fail_reported and failure_in_progress => set_val = pre_set_val ))))",
            "diagramVariables": "Response = <b><i>(( single_fail_reported & failure_in_progress => set_val = pre_set_val ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(( single_fail_reported & failure_in_progress => set_val = pre_set_val ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7153b00-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "AP-002B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "Roll Autopilot shall engage when the pilot selects the autopilot engage switch in the cockpit and disengage when the switch is deselected. When not engaged, the command to the roll actuator shall be zero.",
        "fulltext": "in roll_hold mode RollAutopilot shall always satisfy roll_cmd = roll_hold_mode_cmd",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_cmd",
                    "roll_hold_mode_cmd"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                43
            ],
            "post_condition": "(roll_cmd = roll_hold_mode_cmd)",
            "responseTextRange": [
                45,
                81
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>)))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = roll_hold_mode_cmd)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (roll_cmd = roll_hold_mode_cmd) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (roll_cmd = roll_hold_mode_cmd) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(roll_cmd = roll_hold_mode_cmd)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "e7156210-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "EUL-001I",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_33 = CosPhi * CosTheta",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_33",
                    "CosPhi",
                    "CosTheta"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_33 = CosPhi * CosTheta)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "pt": "(H <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_33 = CosPhi * CosTheta)))",
            "diagramVariables": "Response = <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_33 = CosPhi * CosTheta)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7158920-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "EB-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "EB  shall  always  satisfy  (det_B_BT <= eps12) => (ridge_on  =  TRUE) &  abs(check_1_1  - 1.0)<eps6  &  abs(check_1_2)<eps6  &  abs(check_1_3)<eps6  & abs(check_2_1)<eps6  &  abs(check_2_2  -  1.0)<eps6  &  abs(check_2_3)<eps6  & abs(check_3_1)<eps6 & abs(check_3_2)< eps6 & abs(check_3_3 - 1.0)<eps6",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "det_B_BT",
                    "eps12",
                    "ridge_on",
                    "TRUE",
                    "abs",
                    "check_1_1",
                    "eps6",
                    "check_1_2",
                    "check_1_3",
                    "check_2_1",
                    "check_2_2",
                    "check_2_3",
                    "check_3_1",
                    "check_3_2",
                    "check_3_3"
                ],
                "modes": []
            },
            "component_name": "EB",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)",
            "responseTextRange": [
                19,
                300
            ],
            "ft": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "pt": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "ptExpanded": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>)",
            "component": "<b><i>EB</i></b>",
            "CoCoSpecCode": "(H((( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) and abs ( check_1_1 - 1.0 ) < eps6 and abs ( check_1_2 ) < eps6 and abs ( check_1_3 ) < eps6 and abs ( check_2_1 ) < eps6 and abs ( check_2_2 - 1.0 ) < eps6 and abs ( check_2_3 ) < eps6 and abs ( check_3_1 ) < eps6 and abs ( check_3_2 ) < eps6 and abs ( check_3_3 - 1.0 ) < eps6)))",
            "diagramVariables": "Response = <b><i>(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>.",
            "description": "Always, the component \"<b><i>EB</i></b>\" shall satisfy <b><i>(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps6 & abs ( check_1_2 ) < eps6 & abs ( check_1_3 ) < eps6 & abs ( check_2_1 ) < eps6 & abs ( check_2_2 - 1.0 ) < eps6 & abs ( check_2_3 ) < eps6 & abs ( check_3_1 ) < eps6 & abs ( check_3_2 ) < eps6 & abs ( check_3_3 - 1.0 ) < eps6)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e716c1a0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "AP-010a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "when in hdg mode, when hdg_steady_state Autopilot shall always satisfy abs_hdg_err <= 1.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "hdg_steady_state",
                    "abs_hdg_err"
                ],
                "modes": [
                    "hdg"
                ]
            },
            "scope_mode": "hdg",
            "scopeTextRange": [
                0,
                16
            ],
            "regular_condition": "(hdg_steady_state)",
            "qualifier_word": "when",
            "pre_condition": "(hdg_steady_state)",
            "conditionTextRange": [
                18,
                38
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                40,
                48
            ],
            "timingTextRange": [
                56,
                61
            ],
            "post_condition": "(abs_hdg_err <= 1.0)",
            "responseTextRange": [
                63,
                88
            ],
            "ft": "((LAST V ((! (Fin_<b><i>hdg</i></b> & (! LAST))) | (X (((Lin_<b><i>hdg</i></b> | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (Lin_<b><i>hdg</i></b> | LAST))))) -> ((X ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (Lin_<b><i>hdg</i></b> | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))) & (<b><i>hdg</i></b> -> (((Lin_<b><i>hdg</i></b> | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (Lin_<b><i>hdg</i></b> | LAST))))) -> ((X ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (Lin_<b><i>hdg</i></b> | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))",
            "pt": "((H ((Lin_<b><i>hdg</i></b> & (! FTP)) -> (Y ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | Fin_<b><i>hdg</i></b>))))) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | Fin_<b><i>hdg</i></b>))))) & Fin_<b><i>hdg</i></b>))))) & (((! Lin_<b><i>hdg</i></b>) S ((! Lin_<b><i>hdg</i></b>) & Fin_<b><i>hdg</i></b>)) -> ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | Fin_<b><i>hdg</i></b>))))) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & Fin_<b><i>hdg</i></b>)) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | Fin_<b><i>hdg</i></b>))))) & Fin_<b><i>hdg</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>hdg</i></b>) & (! LAST)) & (X <b><i>hdg</i></b>)) & (! LAST))) | (X (((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) -> ((X ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))) & (<b><i>hdg</i></b> -> (((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V (((! <b><i>(hdg_steady_state)</i></b>) & ((! LAST) & ((X <b><i>(hdg_steady_state)</i></b>) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) -> ((X ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)) & (! (((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST))))) & (<b><i>(hdg_steady_state)</i></b> -> ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(abs_hdg_err <= 1.0)</i></b>)))))",
            "ptExpanded": "((H ((((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>)) & (Y TRUE)) -> (Y ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) & (((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) S ((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) -> ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) S ((((! <b><i>(hdg_steady_state)</i></b>) S ((! <b><i>(hdg_steady_state)</i></b>) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) | (<b><i>(abs_hdg_err <= 1.0)</i></b> S (<b><i>(abs_hdg_err <= 1.0)</i></b> & (<b><i>(hdg_steady_state)</i></b> & ((Y (! <b><i>(hdg_steady_state)</i></b>)) | (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not hdg) and (pre (hdg))) and ( not FTP)) => (pre (SI( (hdg and (FTP or (pre ( not hdg)))), ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (hdg_steady_state)) )) or (SI( ((hdg_steady_state) and ((pre ( not (hdg_steady_state))) or (hdg and (FTP or (pre ( not hdg)))))), (abs_hdg_err <= 1.0) ))) ))))) and ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (( not hdg) and (pre (hdg)))) )) => (SI( (hdg and (FTP or (pre ( not hdg)))), ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (hdg_steady_state)) )) or (SI( ((hdg_steady_state) and ((pre ( not (hdg_steady_state))) or (hdg and (FTP or (pre ( not hdg)))))), (abs_hdg_err <= 1.0) ))) ))))",
            "diagramVariables": "M = <b><i>hdg</i></b>, TC = <b><i>(hdg_steady_state)</i></b>, Response = <b><i>(abs_hdg_err <= 1.0)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(abs_hdg_err <= 1.0)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>hdg</i></b> and <b><i>(hdg_steady_state)</i></b> is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_always_satisfaction.svg"
        },
        "_id": "e716e8b0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "NLG-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy (Vv * yout) > 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Vv",
                    "yout"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( Vv * yout ) > 0)",
            "responseTextRange": [
                24,
                46
            ],
            "ft": "(LAST V <b><i>(( Vv * yout ) > 0)</i></b>)",
            "pt": "(H <b><i>(( Vv * yout ) > 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( Vv * yout ) > 0)</i></b>)",
            "ptExpanded": "(H <b><i>(( Vv * yout ) > 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((( Vv * yout ) > 0)))",
            "diagramVariables": "Response = <b><i>(( Vv * yout ) > 0)</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(( Vv * yout ) > 0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7170fc0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "NLG-002&3",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy mag(yout - Xtarg) >= r & dot((yout - Xtarg),(yout - Xv)) = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "yout",
                    "Xtarg",
                    "r",
                    "dot",
                    "Xv"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)",
            "responseTextRange": [
                24,
                91
            ],
            "ft": "(LAST V <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "pt": "(H <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((mag ( yout - Xtarg ) >= r and dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)))",
            "diagramVariables": "Response = <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(mag ( yout - Xtarg ) >= r & dot ( ( yout - Xtarg ) , ( yout - Xv ) ) = 0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7175de0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "TUI-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Tustin_Integrator shall always satisfy yout <= TL &  yout >= BL",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout",
                    "TL",
                    "BL"
                ],
                "modes": []
            },
            "component_name": "Tustin_Integrator",
            "componentTextRange": [
                0,
                16
            ],
            "timingTextRange": [
                24,
                29
            ],
            "post_condition": "(yout <= TL & yout >= BL)",
            "responseTextRange": [
                31,
                62
            ],
            "ft": "(LAST V <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "pt": "(H <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "ptExpanded": "(H <b><i>(yout <= TL & yout >= BL)</i></b>)",
            "component": "<b><i>Tustin_Integrator</i></b>",
            "CoCoSpecCode": "(H((yout <= TL and yout >= BL)))",
            "diagramVariables": "Response = <b><i>(yout <= TL & yout >= BL)</i></b>.",
            "description": "Always, the component \"<b><i>Tustin_Integrator</i></b>\" shall satisfy <b><i>(yout <= TL & yout >= BL)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7175de1-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "EUL-001A",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Rotation Matrix Output, DCM321, of this Function Shall Equal a 3x3 Matrix Product of a 3x3 Euler 3 (Roll) Rotation Matrix times a 3x3 Euler 2 (Pitch) Rotation Matrix times a 3x3 Euler 1 (Heading) Rotation Matrix.",
        "fulltext": "Euler shall always satisfy DCM321_11 = CosTheta * CosPsi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_11",
                    "CosTheta",
                    "CosPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_11 = CosTheta * CosPsi)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "pt": "(H <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_11 = CosTheta * CosPsi)))",
            "diagramVariables": "Response = <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_11 = CosTheta * CosPsi)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71784f0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "EB-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "EB  shall  always  satisfy  (det_B_BT <= eps12) => (ridge_on  =  TRUE) &  abs(check_1_1  - 1.0)<eps12  &  abs(check_1_2)<eps12  &  abs(check_1_3)<eps12  & abs(check_2_1)<eps12  &  abs(check_2_2  -  1.0)<eps12  &  abs(check_2_3)<eps12  & abs(check_3_1)<eps12 & abs(check_3_2)< eps12 & abs(check_3_3 - 1.0)<eps12",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "det_B_BT",
                    "eps12",
                    "ridge_on",
                    "TRUE",
                    "abs",
                    "check_1_1",
                    "check_1_2",
                    "check_1_3",
                    "check_2_1",
                    "check_2_2",
                    "check_2_3",
                    "check_3_1",
                    "check_3_2",
                    "check_3_3"
                ],
                "modes": []
            },
            "component_name": "EB",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)",
            "responseTextRange": [
                19,
                309
            ],
            "ft": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "pt": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "ptExpanded": "(H <b><i>(( det_B_BT <= eps12 ) -> ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>)",
            "component": "<b><i>EB</i></b>",
            "CoCoSpecCode": "(H((( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) and abs ( check_1_1 - 1.0 ) < eps12 and abs ( check_1_2 ) < eps12 and abs ( check_1_3 ) < eps12 and abs ( check_2_1 ) < eps12 and abs ( check_2_2 - 1.0 ) < eps12 and abs ( check_2_3 ) < eps12 and abs ( check_3_1 ) < eps12 and abs ( check_3_2 ) < eps12 and abs ( check_3_3 - 1.0 ) < eps12)))",
            "diagramVariables": "Response = <b><i>(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>.",
            "description": "Always, the component \"<b><i>EB</i></b>\" shall satisfy <b><i>(( det_B_BT <= eps12 ) => ( ridge_on = TRUE ) & abs ( check_1_1 - 1.0 ) < eps12 & abs ( check_1_2 ) < eps12 & abs ( check_1_3 ) < eps12 & abs ( check_2_1 ) < eps12 & abs ( check_2_2 - 1.0 ) < eps12 & abs ( check_2_3 ) < eps12 & abs ( check_3_1 ) < eps12 & abs ( check_3_2 ) < eps12 & abs ( check_3_3 - 1.0 ) < eps12)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e717d310-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "AP-003A",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "in roll_hold mode RollAutopilot shall immediately satisfy !(Cb | Cc1 | Cc2 | Cd)  => roll_hold_reference = roll_angle",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Cb",
                    "Cc1",
                    "Cc2",
                    "Cd",
                    "roll_hold_reference",
                    "roll_angle"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(! ( Cb | Cc1 | Cc2 | Cd ) => roll_hold_reference = roll_angle)",
            "responseTextRange": [
                50,
                116
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((Fin_<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((Fin_<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) -> roll_hold_reference = roll_angle)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (not ( Cb or Cc1 or Cc2 or Cd ) => roll_hold_reference = roll_angle)) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (not ( Cb or Cc1 or Cc2 or Cd ) => roll_hold_reference = roll_angle)) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) => roll_hold_reference = roll_angle)</i></b>.",
            "description": "Immediately, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(! ( Cb | Cc1 | Cc2 | Cd ) => roll_hold_reference = roll_angle)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "e717fa20-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-005",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from NOMINAL to STANDBYwhen the pilot is in control (standby).",
        "fulltext": "FSM_Autopilot shall always satisfy (state=ap_nominal_state & standby)  => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_nominal_state",
                    "standby",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)",
            "responseTextRange": [
                27,
                97
            ],
            "ft": "(LAST V <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_nominal_state & standby ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_nominal_state and standby ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_nominal_state & standby ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7184840-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "SWIM-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "2.\tWhen a low speed warning is allowed, as computed by the SWIM Airspeed algorithm, a low speed warning shall be true when the vehicle air data impact pressure is less than the warning trigger for minimum impact pressure in which a safe AGCAS evasive maneuver can be accomplished where:\n\nThe warning trigger for minimum impact pressure in which a safe AGCAS evasive maneuver can be accomplished is computed as\n\nSWIM_Qcmin_lbspft2 = [(-2.0906 + 0.020306*Auto GCAS Minimum Vcas) + 0.1] * (70.7184 (lbspft2/in Hg))",
        "fulltext": "SWIM shall always satisfy ((lowSpeedWarningAllowed  & vehAirPress < warningTrigForMinPress) => lowSpeedWarningTrue)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "lowSpeedWarningAllowed",
                    "vehAirPress",
                    "warningTrigForMinPress",
                    "lowSpeedWarningTrue"
                ],
                "modes": []
            },
            "component_name": "SWIM",
            "componentTextRange": [
                0,
                3
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))",
            "responseTextRange": [
                18,
                114
            ],
            "ft": "(LAST V <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "pt": "(H <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) -> lowSpeedWarningTrue ))</i></b>)",
            "component": "<b><i>SWIM</i></b>",
            "CoCoSpecCode": "(H((( ( lowSpeedWarningAllowed and vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))))",
            "diagramVariables": "Response = <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))</i></b>.",
            "description": "Always, the component \"<b><i>SWIM</i></b>\" shall satisfy <b><i>(( ( lowSpeedWarningAllowed & vehAirPress < warningTrigForMinPress ) => lowSpeedWarningTrue ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7186f50-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "TSM-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "In the no-fail state, a mis-compare, which shall be characterized by one branch differing with the other two branches by a unique trip level that lasts for more than the persistence limit, shall be reported to failure management as a failure.",
        "fulltext": "TriplexSignalMonitor shall always satisfy ((pre_no_fail & failure_must_be_latched)=> single_fail_reported)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "pre_no_fail",
                    "failure_must_be_latched",
                    "single_fail_reported"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(( ( pre_no_fail & failure_must_be_latched ) => single_fail_reported ))",
            "responseTextRange": [
                34,
                105
            ],
            "ft": "(LAST V <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "pt": "(H <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( pre_no_fail & failure_must_be_latched ) -> single_fail_reported ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((( ( pre_no_fail and failure_must_be_latched ) => single_fail_reported ))))",
            "diagramVariables": "Response = <b><i>(( ( pre_no_fail & failure_must_be_latched ) => single_fail_reported ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(( ( pre_no_fail & failure_must_be_latched ) => single_fail_reported ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e718bd70-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "TUI-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Tustin_Integrator shall always satisfy (BL <= IC & IC <= TL & RESET)  => yout = IC",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "BL",
                    "IC",
                    "TL",
                    "RESET",
                    "yout"
                ],
                "modes": []
            },
            "component_name": "Tustin_Integrator",
            "componentTextRange": [
                0,
                16
            ],
            "timingTextRange": [
                24,
                29
            ],
            "post_condition": "(( BL <= IC & IC <= TL & RESET ) => yout = IC)",
            "responseTextRange": [
                31,
                81
            ],
            "ft": "(LAST V <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "pt": "(H <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "ptExpanded": "(H <b><i>(( BL <= IC & IC <= TL & RESET ) -> yout = IC)</i></b>)",
            "component": "<b><i>Tustin_Integrator</i></b>",
            "CoCoSpecCode": "(H((( BL <= IC and IC <= TL and RESET ) => yout = IC)))",
            "diagramVariables": "Response = <b><i>(( BL <= IC & IC <= TL & RESET ) => yout = IC)</i></b>.",
            "description": "Always, the component \"<b><i>Tustin_Integrator</i></b>\" shall satisfy <b><i>(( BL <= IC & IC <= TL & RESET ) => yout = IC)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e718bd71-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "EB-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "EB shall always satisfy Buminusd_norm<0.0001",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "Buminusd_norm"
                ],
                "modes": []
            },
            "component_name": "EB",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                9,
                14
            ],
            "post_condition": "(Buminusd_norm < 0.0001)",
            "responseTextRange": [
                16,
                43
            ],
            "ft": "(LAST V <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "pt": "(H <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "ptExpanded": "(H <b><i>(Buminusd_norm < 0.0001)</i></b>)",
            "component": "<b><i>EB</i></b>",
            "CoCoSpecCode": "(H((Buminusd_norm < 0.0001)))",
            "diagramVariables": "Response = <b><i>(Buminusd_norm < 0.0001)</i></b>.",
            "description": "Always, the component \"<b><i>EB</i></b>\" shall satisfy <b><i>(Buminusd_norm < 0.0001)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e718e480-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "NN-003B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NN shall for 200 secs satisfy DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DeltaZDividedByYt"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "duration": [
                "200"
            ],
            "timingTextRange": [
                9,
                20
            ],
            "post_condition": "(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)",
            "responseTextRange": [
                22,
                83
            ],
            "ft": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "pt": "(H ((O[<=<b><i>200</i></b>] FTP) -> <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "ftExpanded": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "ptExpanded": "(H ((O[<=<b><i>200</i></b>] (! (Y TRUE))) -> <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>))",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((OT(200,0,FTP)) => (DeltaZDividedByYt <= 10.0 and DeltaZDividedByYt >= -35.0)))",
            "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>.",
            "description": "TIME, the component \"<b><i>NN</i></b>\" shall satisfy <b><i>(DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg"
        },
        "_id": "e71932a0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-003",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from TRANSITION to NOMINAL when the system is supported and sensor data is good.",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_transition_state & good & supported) => STATE = ap_nominal_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_transition_state",
                    "good",
                    "supported",
                    "STATE",
                    "ap_nominal_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)",
            "responseTextRange": [
                27,
                110
            ],
            "ft": "(LAST V <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_transition_state & good & supported ) -> STATE = ap_nominal_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_transition_state and good and supported ) => STATE = ap_nominal_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_transition_state & good & supported ) => STATE = ap_nominal_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71980c0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-008v1",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from STANDBY to TRANSITION when the pilot is not in control (not standby)",
        "fulltext": " FSM_Autopilot shall always satisfy (state = ap_standby_state & !standby) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "standby",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)",
            "responseTextRange": [
                27,
                102
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and not standby ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & ! standby ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e719a7d0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-011v1",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The sensor shall change states from NOMINAL to TRANSITION when the autopilot is not requesting support (not request)",
        "fulltext": "FSM_Sensor shall always  satisfy (senstate = sen_nominal_state & !request) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "request",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                25,
                108
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & ! request ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and not request ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & ! request ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e719cee0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "AP-010b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "when in hdg mode Autopilot shall always satisfy overshoot <= 0.1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "overshoot"
                ],
                "modes": [
                    "hdg"
                ]
            },
            "scope_mode": "hdg",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                17,
                25
            ],
            "timingTextRange": [
                33,
                38
            ],
            "post_condition": "(overshoot <= 0.1)",
            "responseTextRange": [
                40,
                63
            ],
            "ft": "((LAST V ((! (Fin_<b><i>hdg</i></b> & (! LAST))) | (X ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))) & (<b><i>hdg</i></b> -> ((Lin_<b><i>hdg</i></b> | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))",
            "pt": "((H ((Lin_<b><i>hdg</i></b> & (! FTP)) -> (Y (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & Fin_<b><i>hdg</i></b>))))) & (((! Lin_<b><i>hdg</i></b>) S ((! Lin_<b><i>hdg</i></b>) & Fin_<b><i>hdg</i></b>)) -> (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & Fin_<b><i>hdg</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>hdg</i></b>) & (! LAST)) & (X <b><i>hdg</i></b>)) & (! LAST))) | (X ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))) & (<b><i>hdg</i></b> -> ((((<b><i>hdg</i></b> & (! LAST)) & (X (! <b><i>hdg</i></b>))) | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>)) & (Y TRUE)) -> (Y (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))) & (((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) S ((! ((! <b><i>hdg</i></b>) & (Y <b><i>hdg</i></b>))) & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>)))))) -> (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & (<b><i>hdg</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not hdg) and (pre (hdg))) and ( not FTP)) => (pre (SI( (hdg and (FTP or (pre ( not hdg)))), (overshoot <= 0.1) ))))) and ((SI( (hdg and (FTP or (pre ( not hdg)))), ( not (( not hdg) and (pre (hdg)))) )) => (SI( (hdg and (FTP or (pre ( not hdg)))), (overshoot <= 0.1) ))))",
            "diagramVariables": "M = <b><i>hdg</i></b>, Response = <b><i>(overshoot <= 0.1)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(overshoot <= 0.1)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>hdg</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "e71a1d00-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "EUL-002C",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R2_31",
                    "VI_1",
                    "R_31",
                    "VI_2",
                    "R_32",
                    "VI_3",
                    "R_33"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)",
            "responseTextRange": [
                19,
                73
            ],
            "ft": "(LAST V <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "pt": "(H <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "ptExpanded": "(H <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)))",
            "diagramVariables": "Response = <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(R2_31 = VI_1 * R_31 + VI_2 * R_32 + VI_3 * R_33)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71a4410-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "REG-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Airspeed Regulator Shall not command translational axial accelerations greater than the capability of the system (32 ft/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_airspeed_output_exceeding_32 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_airspeed_output_exceeding_32"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_airspeed_output_exceeding_32 <= 100)",
            "responseTextRange": [
                23,
                71
            ],
            "ft": "(LAST V <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_airspeed_output_exceeding_32 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_airspeed_output_exceeding_32 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71a6b20-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "AP-002a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "Roll hold mode shall be the active mode whenever the autopilot is engaged and no other lateral mode is active.",
        "fulltext": "when in roll_hold mode RollAutopilot shall always satisfy autopilot_engaged & no_other_lateral_mode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "autopilot_engaged",
                    "no_other_lateral_mode"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                21
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                23,
                35
            ],
            "timingTextRange": [
                43,
                48
            ],
            "post_condition": "(autopilot_engaged & no_other_lateral_mode)",
            "responseTextRange": [
                50,
                98
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>)))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> S (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> S (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> S (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> S (<b><i>(autopilot_engaged & no_other_lateral_mode)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (autopilot_engaged and no_other_lateral_mode) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (autopilot_engaged and no_other_lateral_mode) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(autopilot_engaged & no_other_lateral_mode)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "e71a6b21-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "REG-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Roll Regulator Shall not command angular roll accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_roll_output_exceeding_50 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_roll_output_exceeding_50"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_roll_output_exceeding_50 <= 100)",
            "responseTextRange": [
                23,
                67
            ],
            "ft": "(LAST V <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_roll_output_exceeding_50 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_roll_output_exceeding_50 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71a9230-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "EUL-001d",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_21 = (- CosPhi * SinPsi + SinPhi * SinTheta * CosPsi)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_21",
                    "CosPhi",
                    "SinPsi",
                    "SinPhi",
                    "SinTheta",
                    "CosPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))",
            "responseTextRange": [
                19,
                86
            ],
            "ft": "(LAST V <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "pt": "(H <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))))",
            "diagramVariables": "Response = <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_21 = ( - CosPhi * SinPsi + SinPhi * SinTheta * CosPsi ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71b0760-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-001v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "if autopilot & pre_autopilot & pre_limits FSM shall immediately satisfy pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "autopilot",
                    "pre_autopilot",
                    "pre_limits",
                    "pullup"
                ],
                "modes": []
            },
            "regular_condition": "(autopilot & pre_autopilot & pre_limits)",
            "qualifier_word": "if",
            "pre_condition": "(autopilot & pre_autopilot & pre_limits)",
            "conditionTextRange": [
                0,
                40
            ],
            "component_name": "FSM",
            "componentTextRange": [
                42,
                44
            ],
            "timingTextRange": [
                52,
                62
            ],
            "post_condition": "(pullup)",
            "responseTextRange": [
                64,
                77
            ],
            "ft": "((LAST V (((! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "pt": "(H ((<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> & ((Y (! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>)) | FTP)) -> <b><i>(pullup)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "ptExpanded": "(H ((<b><i>(autopilot & pre_autopilot & pre_limits)</i></b> & ((Y (! <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>)) | (! (Y TRUE)))) -> <b><i>(pullup)</i></b>))",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H(((autopilot and pre_autopilot and pre_limits) and ((pre ( not (autopilot and pre_autopilot and pre_limits))) or FTP)) => (pullup)))",
            "diagramVariables": "TC = <b><i>(autopilot & pre_autopilot & pre_limits)</i></b>, Response = <b><i>(pullup)</i></b>.",
            "description": "Upon <b><i>(autopilot & pre_autopilot & pre_limits)</i></b> becoming true, immediately, the component \"<b><i>FSM</i></b>\" shall satisfy <b><i>(pullup)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "e71b0761-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "TSM-003b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor shall always satisfy FC =2 =>  set_val = 0.5 * (ia +ic)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FC",
                    "set_val",
                    "ia",
                    "ic"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(FC = 2 => set_val = 0.5 * ( ia + ic ))",
            "responseTextRange": [
                34,
                75
            ],
            "ft": "(LAST V <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "pt": "(H <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "ptExpanded": "(H <b><i>(FC = 2 -> set_val = 0.5 * ( ia + ic ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((FC = 2 => set_val = 0.5 * ( ia + ic ))))",
            "diagramVariables": "Response = <b><i>(FC = 2 => set_val = 0.5 * ( ia + ic ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(FC = 2 => set_val = 0.5 * ( ia + ic ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71b5580-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "REG-006",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Roll Regulator Shall not command transient changes in angular roll acceleration greater than 50 deg/sec2/sec.",
        "fulltext": "Regulator shall always satisfy roll_command_acceleration <= 50.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(roll_command_acceleration <= 50.0)",
            "responseTextRange": [
                23,
                63
            ],
            "ft": "(LAST V <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "pt": "(H <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "ptExpanded": "(H <b><i>(roll_command_acceleration <= 50.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((roll_command_acceleration <= 50.0)))",
            "diagramVariables": "Response = <b><i>(roll_command_acceleration <= 50.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(roll_command_acceleration <= 50.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71b7c90-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-009",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from STANDBY to MANEUVER when a failure occurs (apfail)",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_standby_state & apfail )=> STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "apfail",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                27,
                98
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & apfail ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and apfail ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & apfail ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71ba3a0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-001v3",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "if  htlore3_autopilot  &  htlore3_notpreprelimits  &  pre_limits  FSM  shall  immediately satisfy pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "htlore3_autopilot",
                    "htlore3_notpreprelimits",
                    "pre_limits",
                    "pullup"
                ],
                "modes": []
            },
            "regular_condition": "(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)",
            "qualifier_word": "if",
            "pre_condition": "(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)",
            "conditionTextRange": [
                0,
                63
            ],
            "component_name": "FSM",
            "componentTextRange": [
                66,
                68
            ],
            "timingTextRange": [
                78,
                88
            ],
            "post_condition": "(pullup)",
            "responseTextRange": [
                90,
                103
            ],
            "ft": "((LAST V (((! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "pt": "(H ((<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> & ((Y (! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>)) | FTP)) -> <b><i>(pullup)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>) & ((! LAST) & (X <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>))) -> (X <b><i>(pullup)</i></b>))) & (<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> -> <b><i>(pullup)</i></b>))",
            "ptExpanded": "(H ((<b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> & ((Y (! <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>)) | (! (Y TRUE)))) -> <b><i>(pullup)</i></b>))",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H(((htlore3_autopilot and htlore3_notpreprelimits and pre_limits) and ((pre ( not (htlore3_autopilot and htlore3_notpreprelimits and pre_limits))) or FTP)) => (pullup)))",
            "diagramVariables": "TC = <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b>, Response = <b><i>(pullup)</i></b>.",
            "description": "Upon <b><i>(htlore3_autopilot & htlore3_notpreprelimits & pre_limits)</i></b> becoming true, immediately, the component \"<b><i>FSM</i></b>\" shall satisfy <b><i>(pullup)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "e71bf1c0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "REG-005",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Height Regulator Shall not command translational height accelerations greater than the capability of the system (32 ft/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_height_output_exceeding_32 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_height_output_exceeding_32"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_height_output_exceeding_32 <= 100)",
            "responseTextRange": [
                23,
                69
            ],
            "ft": "(LAST V <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_height_output_exceeding_32 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_height_output_exceeding_32 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_height_output_exceeding_32 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_height_output_exceeding_32 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71bf1c1-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-004v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from NOMINAL to STANDBY when the pilot is in contronl (standby)",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_nominal_state & ! good & ! standby) => STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_nominal_state",
                    "good",
                    "standby",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_nominal_state & ! good & ! standby ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                27,
                110
            ],
            "ft": "(LAST V <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_nominal_state & ! good & ! standby ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_nominal_state and not good and not standby ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_nominal_state & ! good & ! standby ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71c3fe0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "AP-004a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "when in roll_hold mode, when steady_state Autopilot shall always satisfy abs_roller_err <= 1.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "steady_state",
                    "abs_roller_err"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                22
            ],
            "regular_condition": "(steady_state)",
            "qualifier_word": "when",
            "pre_condition": "(steady_state)",
            "conditionTextRange": [
                24,
                40
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                42,
                50
            ],
            "timingTextRange": [
                58,
                63
            ],
            "post_condition": "(abs_roller_err <= 1.0)",
            "responseTextRange": [
                65,
                93
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X (((Lin_<b><i>roll_hold</i></b> | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) -> ((X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) & (<b><i>(steady_state)</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))) & (<b><i>roll_hold</i></b> -> (((Lin_<b><i>roll_hold</i></b> | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) -> ((X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (Lin_<b><i>roll_hold</i></b> | LAST))))) & (<b><i>(steady_state)</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | Fin_<b><i>roll_hold</i></b>))))) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | Fin_<b><i>roll_hold</i></b>))))) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | Fin_<b><i>roll_hold</i></b>))))) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & Fin_<b><i>roll_hold</i></b>)) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | Fin_<b><i>roll_hold</i></b>))))) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X (((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) -> ((X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) & (<b><i>(steady_state)</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))) & (<b><i>roll_hold</i></b> -> (((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V (((! <b><i>(steady_state)</i></b>) & ((! LAST) & ((X <b><i>(steady_state)</i></b>) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) -> ((X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)) & (! (((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST))))) & (<b><i>(steady_state)</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(abs_roller_err <= 1.0)</i></b>)))))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) S ((((! <b><i>(steady_state)</i></b>) S ((! <b><i>(steady_state)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) | (<b><i>(abs_roller_err <= 1.0)</i></b> S (<b><i>(abs_roller_err <= 1.0)</i></b> & (<b><i>(steady_state)</i></b> & ((Y (! <b><i>(steady_state)</i></b>)) | (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (steady_state)) )) or (SI( ((steady_state) and ((pre ( not (steady_state))) or (roll_hold and (FTP or (pre ( not roll_hold)))))), (abs_roller_err <= 1.0) ))) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (steady_state)) )) or (SI( ((steady_state) and ((pre ( not (steady_state))) or (roll_hold and (FTP or (pre ( not roll_hold)))))), (abs_roller_err <= 1.0) ))) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, TC = <b><i>(steady_state)</i></b>, Response = <b><i>(abs_roller_err <= 1.0)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(abs_roller_err <= 1.0)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>roll_hold</i></b> and <b><i>(steady_state)</i></b> is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_always_satisfaction.svg"
        },
        "_id": "e71c66f0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-008v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_standby_state",
                    "standby",
                    "apfail",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state)",
            "responseTextRange": [
                27,
                115
            ],
            "ft": "(LAST V <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_standby_state & ! standby & ! apfail ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_standby_state and not standby and not apfail ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_standby_state & ! standby & ! apfail ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71cb510-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "NLG-005a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "if mag(Xr) < r & mag(r1) < mag(r2) NLGuidance shall always satisfy yout = Xap1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "Xr",
                    "r",
                    "r1",
                    "r2",
                    "yout",
                    "Xap1"
                ],
                "modes": []
            },
            "regular_condition": "(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))",
            "qualifier_word": "if",
            "pre_condition": "(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))",
            "conditionTextRange": [
                0,
                33
            ],
            "component_name": "NLGuidance",
            "componentTextRange": [
                35,
                44
            ],
            "timingTextRange": [
                52,
                57
            ],
            "post_condition": "(yout = Xap1)",
            "responseTextRange": [
                59,
                77
            ],
            "ft": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap1)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap1)</i></b>)))",
            "pt": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap1)</i></b> S (<b><i>(yout = Xap1)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap1)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap1)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap1)</i></b> S (<b><i>(yout = Xap1)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((H( not (mag ( Xr ) < r and mag ( r1 ) < mag ( r2 )))) or (SI( ((mag ( Xr ) < r and mag ( r1 ) < mag ( r2 )) and ((pre ( not (mag ( Xr ) < r and mag ( r1 ) < mag ( r2 )))) or FTP)), (yout = Xap1) ))))",
            "diagramVariables": "TC = <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b>, Response = <b><i>(yout = Xap1)</i></b>.",
            "description": "Upon <b><i>(mag ( Xr ) < r & mag ( r1 ) < mag ( r2 ))</i></b> becoming true, always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout = Xap1)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "e71cb511-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "REG-007",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Pitch Regulator Shall not command transient changes in angular pitch acceleration greater than 50 deg/sec2/sec.",
        "fulltext": "Regulator shall always satisfy pitch_command_acceleration <= 50.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "pitch_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(pitch_command_acceleration <= 50.0)",
            "responseTextRange": [
                23,
                64
            ],
            "ft": "(LAST V <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "pt": "(H <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "ptExpanded": "(H <b><i>(pitch_command_acceleration <= 50.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((pitch_command_acceleration <= 50.0)))",
            "diagramVariables": "Response = <b><i>(pitch_command_acceleration <= 50.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(pitch_command_acceleration <= 50.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71d0330-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "TSM-003c",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor shall always satisfy FC =4 => set_val = 0.5 * (ib +ic)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FC",
                    "set_val",
                    "ib",
                    "ic"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(FC = 4 => set_val = 0.5 * ( ib + ic ))",
            "responseTextRange": [
                34,
                74
            ],
            "ft": "(LAST V <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "pt": "(H <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "ptExpanded": "(H <b><i>(FC = 4 -> set_val = 0.5 * ( ib + ic ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((FC = 4 => set_val = 0.5 * ( ib + ic ))))",
            "diagramVariables": "Response = <b><i>(FC = 4 => set_val = 0.5 * ( ib + ic ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(FC = 4 => set_val = 0.5 * ( ib + ic ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71d2a40-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "AP-000",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The altitude hold autopilot shall maintain altitude within 35 feet of the initial condition. ",
        "fulltext": "Autopilot shall always satisfy altitude_hold => absOf_alt_minus_altIC <= 35.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "altitude_hold",
                    "absOf_alt_minus_altIC"
                ],
                "modes": []
            },
            "component_name": "Autopilot",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(altitude_hold => absOf_alt_minus_altIC <= 35.0)",
            "responseTextRange": [
                23,
                76
            ],
            "ft": "(LAST V <b><i>(altitude_hold -> absOf_alt_minus_altIC <= 35.0)</i></b>)",
            "pt": "(H <b><i>(altitude_hold -> absOf_alt_minus_altIC <= 35.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(altitude_hold -> absOf_alt_minus_altIC <= 35.0)</i></b>)",
            "ptExpanded": "(H <b><i>(altitude_hold -> absOf_alt_minus_altIC <= 35.0)</i></b>)",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H((altitude_hold => absOf_alt_minus_altIC <= 35.0)))",
            "diagramVariables": "Response = <b><i>(altitude_hold => absOf_alt_minus_altIC <= 35.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71d7860-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "NLG-005b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "if mag(Xr) < r & mag(r1) >= mag(r2) NLGuidance shall always satisfy yout = Xap2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "Xr",
                    "r",
                    "r1",
                    "r2",
                    "yout",
                    "Xap2"
                ],
                "modes": []
            },
            "regular_condition": "(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))",
            "qualifier_word": "if",
            "pre_condition": "(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))",
            "conditionTextRange": [
                0,
                34
            ],
            "component_name": "NLGuidance",
            "componentTextRange": [
                36,
                45
            ],
            "timingTextRange": [
                53,
                58
            ],
            "post_condition": "(yout = Xap2)",
            "responseTextRange": [
                60,
                78
            ],
            "ft": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap2)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap2)</i></b>)))",
            "pt": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap2)</i></b> S (<b><i>(yout = Xap2)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | FTP))))))",
            "ftExpanded": "((LAST V (((! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>) & ((! LAST) & (X <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>))) -> (X (LAST V <b><i>(yout = Xap2)</i></b>)))) & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> -> (LAST V <b><i>(yout = Xap2)</i></b>)))",
            "ptExpanded": "(H ((H (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | (<b><i>(yout = Xap2)</i></b> S (<b><i>(yout = Xap2)</i></b> & (<b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> & ((Y (! <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>)) | (! (Y TRUE))))))))",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((H( not (mag ( Xr ) < r and mag ( r1 ) >= mag ( r2 )))) or (SI( ((mag ( Xr ) < r and mag ( r1 ) >= mag ( r2 )) and ((pre ( not (mag ( Xr ) < r and mag ( r1 ) >= mag ( r2 )))) or FTP)), (yout = Xap2) ))))",
            "diagramVariables": "TC = <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b>, Response = <b><i>(yout = Xap2)</i></b>.",
            "description": "Upon <b><i>(mag ( Xr ) < r & mag ( r1 ) >= mag ( r2 ))</i></b> becoming true, always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout = Xap2)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_always_satisfaction.svg"
        },
        "_id": "e71d9f70-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "EUL-002A",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Body Vector Output, Vb, of this Function Shall Equal a 3x1 Vector Product of the 3x3 Rotation Matrix Output, DCM321, times the Input Inertial Vector, Vi.",
        "fulltext": "Euler shall always satisfy R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R2_11",
                    "VI_1",
                    "R_11",
                    "VI_2",
                    "R_12",
                    "VI_3",
                    "R_13"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)",
            "responseTextRange": [
                19,
                73
            ],
            "ft": "(LAST V <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "pt": "(H <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "ptExpanded": "(H <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)))",
            "diagramVariables": "Response = <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(R2_11 = VI_1 * R_11 + VI_2 * R_12 + VI_3 * R_13)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71ded90-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "AP-004b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "when in roll_hold mode Autopilot shall always satisfy overshoot <= 0.1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "overshoot"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                21
            ],
            "component_name": "Autopilot",
            "componentTextRange": [
                23,
                31
            ],
            "timingTextRange": [
                39,
                44
            ],
            "post_condition": "(overshoot <= 0.1)",
            "responseTextRange": [
                46,
                69
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((Lin_<b><i>roll_hold</i></b> | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))) & (<b><i>roll_hold</i></b> -> ((((<b><i>roll_hold</i></b> & (! LAST)) & (X (! <b><i>roll_hold</i></b>))) | LAST) V <b><i>(overshoot <= 0.1)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (<b><i>(overshoot <= 0.1)</i></b> S (<b><i>(overshoot <= 0.1)</i></b> & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (overshoot <= 0.1) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (overshoot <= 0.1) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(overshoot <= 0.1)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(overshoot <= 0.1)</i></b>. This is only enforced when \"<b><i>Autopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "e71ded91-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "REG-008",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Yaw Regulator Shall not command transient changes in angular yaw acceleration greater than 50 deg/sec2/sec.",
        "fulltext": "Regulator shall always satisfy yaw_command_acceleration <= 50.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yaw_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(yaw_command_acceleration <= 50.0)",
            "responseTextRange": [
                23,
                62
            ],
            "ft": "(LAST V <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "pt": "(H <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "ptExpanded": "(H <b><i>(yaw_command_acceleration <= 50.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((yaw_command_acceleration <= 50.0)))",
            "diagramVariables": "Response = <b><i>(yaw_command_acceleration <= 50.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(yaw_command_acceleration <= 50.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71e14a0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "NN-003A",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "3.\tUsing a first order finite backward difference equation, the spatial derivatives of Δz/ Δxt = (z(n,1)-z(n-1))/(xt(n,1)-xt(n-1,1) and Δz/ Δyt = (z(n,1)-z(n-1))/(yt(n,1)-yt(n-1,1) shall never exceed a top bound of +10 or bottom bound of -35 (e.g. -35 <= Δz/ Δ(xt,yt) <= 10), where n denotes an index to the current values and n-1 denotes the prior values in the included truth data for xt and yt.    ",
        "fulltext": "NN shall for 200 secs satisfy DeltaZDividedByXt<= 10.0 & DeltaZDividedByXt >= -35.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "for",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DeltaZDividedByXt"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "duration": [
                "200"
            ],
            "timingTextRange": [
                9,
                20
            ],
            "post_condition": "(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)",
            "responseTextRange": [
                22,
                82
            ],
            "ft": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "pt": "(H ((O[<=<b><i>200</i></b>] FTP) -> <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "ftExpanded": "((G[<=<b><i>200</i></b>] <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>) | (LAST V <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "ptExpanded": "(H ((O[<=<b><i>200</i></b>] (! (Y TRUE))) -> <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>))",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((OT(200,0,FTP)) => (DeltaZDividedByXt <= 10.0 and DeltaZDividedByXt >= -35.0)))",
            "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>.",
            "description": "TIME, the component \"<b><i>NN</i></b>\" shall satisfy <b><i>(DeltaZDividedByXt <= 10.0 & DeltaZDividedByXt >= -35.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_for_satisfaction.svg"
        },
        "_id": "e71e62c0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "TUI-003",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Tustin_Integrator shall always satisfy normal => yout = normal_yout",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "normal",
                    "yout",
                    "normal_yout"
                ],
                "modes": []
            },
            "component_name": "Tustin_Integrator",
            "componentTextRange": [
                0,
                16
            ],
            "timingTextRange": [
                24,
                29
            ],
            "post_condition": "(normal => yout = normal_yout)",
            "responseTextRange": [
                31,
                66
            ],
            "ft": "(LAST V <b><i>(normal -> yout = normal_yout)</i></b>)",
            "pt": "(H <b><i>(normal -> yout = normal_yout)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(normal -> yout = normal_yout)</i></b>)",
            "ptExpanded": "(H <b><i>(normal -> yout = normal_yout)</i></b>)",
            "component": "<b><i>Tustin_Integrator</i></b>",
            "CoCoSpecCode": "(H((normal => yout = normal_yout)))",
            "diagramVariables": "Response = <b><i>(normal => yout = normal_yout)</i></b>.",
            "description": "Always, the component \"<b><i>Tustin_Integrator</i></b>\" shall satisfy <b><i>(normal => yout = normal_yout)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71e62c1-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "AP-005",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Autopilot shall always satisfy  abs_roll_rate <= 6.6",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_roll_rate"
                ],
                "modes": []
            },
            "component_name": "Autopilot",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(abs_roll_rate <= 6.6)",
            "responseTextRange": [
                23,
                51
            ],
            "ft": "(LAST V <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "pt": "(H <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "ptExpanded": "(H <b><i>(abs_roll_rate <= 6.6)</i></b>)",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H((abs_roll_rate <= 6.6)))",
            "diagramVariables": "Response = <b><i>(abs_roll_rate <= 6.6)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(abs_roll_rate <= 6.6)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71eb0e0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "EUL-001F",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_23 = SinPhi * CosTheta",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_23",
                    "SinPhi",
                    "CosTheta"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_23 = SinPhi * CosTheta)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "pt": "(H <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_23 = SinPhi * CosTheta)))",
            "diagramVariables": "Response = <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_23 = SinPhi * CosTheta)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71ed7f0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-012",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The sensor shall change states from FAULT to TRANSITION when the autopilot is not requesting support (not request) and limits are not exceeded (not limits)",
        "fulltext": "FSM_Sensor shall  always  satisfy (senstate = sen_fault_state & !request & !limits) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_fault_state",
                    "request",
                    "limits",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                18,
                23
            ],
            "post_condition": "(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                26,
                117
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_fault_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_fault_state and not request and not limits ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_fault_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71eff00-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "REG-009",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Airspeed Regulator Shall not command transient changes in translational axial acceleration greater than 32 ft/sec2/sec.",
        "fulltext": "Regulator shall always satisfy airspeed_command_acceleration <= 32.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "airspeed_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(airspeed_command_acceleration <= 32.0)",
            "responseTextRange": [
                23,
                67
            ],
            "ft": "(LAST V <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "pt": "(H <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "ptExpanded": "(H <b><i>(airspeed_command_acceleration <= 32.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((airspeed_command_acceleration <= 32.0)))",
            "diagramVariables": "Response = <b><i>(airspeed_command_acceleration <= 32.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(airspeed_command_acceleration <= 32.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71f2610-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-010",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The sensor shall change states from NOMINAL to FAULT when limits are exceeded",
        "fulltext": "FSM_Sensor shall always satisfy (senstate = sen_nominal_state & limits) => SENSTATE = sen_fault_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "limits",
                    "SENSTATE",
                    "sen_fault_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)",
            "responseTextRange": [
                24,
                100
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & limits ) -> SENSTATE = sen_fault_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and limits ) => SENSTATE = sen_fault_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & limits ) => SENSTATE = sen_fault_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71f4d20-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "AP-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "Roll Autopilot shall engage when the pilot selects the autopilot engage switch in the cockpit and disengage when the switch is deselected. When not engaged, the command to the roll actuator shall be zero.",
        "fulltext": "RollAutopilot shall always satisfy ! autopilot_engaged => roll_actuator_command = 0.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "autopilot_engaged",
                    "roll_actuator_command"
                ],
                "modes": []
            },
            "component_name": "RollAutopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(! autopilot_engaged => roll_actuator_command = 0.0)",
            "responseTextRange": [
                27,
                84
            ],
            "ft": "(LAST V <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "pt": "(H <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "ptExpanded": "(H <b><i>(! autopilot_engaged -> roll_actuator_command = 0.0)</i></b>)",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((not autopilot_engaged => roll_actuator_command = 0.0)))",
            "diagramVariables": "Response = <b><i>(! autopilot_engaged => roll_actuator_command = 0.0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71f9b40-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "AP-003B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "in roll_hold mode RollAutopilot shall immediately satisfy (roll_angle < 6.0 & roll_angle > -6.0) => roll_hold_reference =0.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_angle",
                    "roll_hold_reference"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                18,
                30
            ],
            "timingTextRange": [
                38,
                48
            ],
            "post_condition": "(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)",
            "responseTextRange": [
                50,
                123
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) -> roll_hold_reference = 0.0)</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (( roll_angle < 6.0 and roll_angle > -6.0 ) => roll_hold_reference = 0.0)) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (( roll_angle < 6.0 and roll_angle > -6.0 ) => roll_hold_reference = 0.0)) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)</i></b>.",
            "description": "Immediately, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(( roll_angle < 6.0 & roll_angle > -6.0 ) => roll_hold_reference = 0.0)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "e71f9b41-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "NN-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The minimum value of the NN output, z, shall always be greater than or equal to -0.2, regardless of the input values",
        "fulltext": "NN shall always satisfy z >= -0.2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "z"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                9,
                14
            ],
            "post_condition": "(z >= -0.2)",
            "responseTextRange": [
                16,
                32
            ],
            "ft": "(LAST V <b><i>(z >= -0.2)</i></b>)",
            "pt": "(H <b><i>(z >= -0.2)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(z >= -0.2)</i></b>)",
            "ptExpanded": "(H <b><i>(z >= -0.2)</i></b>)",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((z >= -0.2)))",
            "diagramVariables": "Response = <b><i>(z >= -0.2)</i></b>.",
            "description": "Always, the component \"<b><i>NN</i></b>\" shall satisfy <b><i>(z >= -0.2)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71fe960-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "AP-006",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Autopilot shall always satisfy abs_roll_angle < 33.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_roll_angle"
                ],
                "modes": []
            },
            "component_name": "Autopilot",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(abs_roll_angle < 33.0)",
            "responseTextRange": [
                23,
                51
            ],
            "ft": "(LAST V <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "pt": "(H <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "ptExpanded": "(H <b><i>(abs_roll_angle < 33.0)</i></b>)",
            "component": "<b><i>Autopilot</i></b>",
            "CoCoSpecCode": "(H((abs_roll_angle < 33.0)))",
            "diagramVariables": "Response = <b><i>(abs_roll_angle < 33.0)</i></b>.",
            "description": "Always, the component \"<b><i>Autopilot</i></b>\" shall satisfy <b><i>(abs_roll_angle < 33.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e71fe961-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-013",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The sensor shall change states from TRANSITION to NOMINAL when the autopilot is requesting support (request) and the autopilot reports the correct active mode (mode)",
        "fulltext": "FSM_Sensor shall always satisfy (senstate = sen_transition_state & request & MODE) => SENSTATE = sen_nominal_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_transition_state",
                    "request",
                    "MODE",
                    "SENSTATE",
                    "sen_nominal_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( senstate = sen_transition_state & request & MODE ) => SENSTATE = sen_nominal_state)",
            "responseTextRange": [
                24,
                113
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_transition_state & request & MODE ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_transition_state & request & MODE ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_transition_state & request & MODE ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_transition_state & request & MODE ) -> SENSTATE = sen_nominal_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_transition_state and request and MODE ) => SENSTATE = sen_nominal_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_transition_state & request & MODE ) => SENSTATE = sen_nominal_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7203780-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "SWIM-001a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The SWIM Airspeed algorithm shall output the minimum AGCAS airspeed required to perform a 2g flyup as follows:\n\nAuto GCAS Minimum Vcas (knots) = \nSQRT{[2*Load Factor*Gross Weight]/[Air Density at sea level * \n\t\tCoefficient of Lift Max*Wing Area]} / 1.6891 (ft/s/knots)\nwhere\n\tLoad Factor = 2 gs\n\tGross weight of the aircraft\n\tAir Density at sea level = 0.0023769 slugs/ft^3\n\tCoefficient of Lift Max = 1.24 (CAT I) and 1.10 (CAT III)\n\tWing Area of the F-16 = 300 ft^2\nThus,\nIF CAT I, Auto GCAS Minimum Vcas (knots)  = 1.25921 * SQRT(Gross Weight)  + 10.0\nIF CAT III, Auto GCAS Minimum Vcas (knots)  = 1.33694 * SQRT(Gross Weight) + 10.0",
        "fulltext": "SWIM shall always satisfy ((storeCat = CAT1) =>  (CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "storeCat",
                    "CAT1",
                    "CalAirspeedMin",
                    "sqrtOfWeight"
                ],
                "modes": []
            },
            "component_name": "SWIM",
            "componentTextRange": [
                0,
                3
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))",
            "responseTextRange": [
                18,
                97
            ],
            "ft": "(LAST V <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "pt": "(H <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( storeCat = CAT1 ) -> ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "component": "<b><i>SWIM</i></b>",
            "CoCoSpecCode": "(H((( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))))",
            "diagramVariables": "Response = <b><i>(( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "description": "Always, the component \"<b><i>SWIM</i></b>\" shall satisfy <b><i>(( ( storeCat = CAT1 ) => ( CalAirspeedMin = 1.25921 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7205e90-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "NLG-006",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy mag(yout - pre_yout) <= T * mag(Vt + Vv)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "mag",
                    "yout",
                    "pre_yout",
                    "T",
                    "Vt",
                    "Vv"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))",
            "responseTextRange": [
                24,
                71
            ],
            "ft": "(LAST V <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "pt": "(H <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "ptExpanded": "(H <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))))",
            "diagramVariables": "Response = <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(mag ( yout - pre_yout ) <= T * mag ( Vt + Vv ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7205e91-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-007",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from PULLUP to TRANSITION when the system is supported and sensor data is good",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_maneuver_state & supported & good) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "supported",
                    "good",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)",
            "responseTextRange": [
                27,
                111
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & supported & good ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and supported and good ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & supported & good ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e720acb0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "NLG-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy yout * Xr > 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout",
                    "Xr"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(yout * Xr > 0)",
            "responseTextRange": [
                24,
                44
            ],
            "ft": "(LAST V <b><i>(yout * Xr > 0)</i></b>)",
            "pt": "(H <b><i>(yout * Xr > 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yout * Xr > 0)</i></b>)",
            "ptExpanded": "(H <b><i>(yout * Xr > 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((yout * Xr > 0)))",
            "diagramVariables": "Response = <b><i>(yout * Xr > 0)</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout * Xr > 0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e720d3c0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "AP-007",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "RollAutopilot shall always satisfy abs_aileron_cmd <= 15.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_aileron_cmd"
                ],
                "modes": []
            },
            "component_name": "RollAutopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(abs_aileron_cmd <= 15.0)",
            "responseTextRange": [
                27,
                57
            ],
            "ft": "(LAST V <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "pt": "(H <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "ptExpanded": "(H <b><i>(abs_aileron_cmd <= 15.0)</i></b>)",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "(H((abs_aileron_cmd <= 15.0)))",
            "diagramVariables": "Response = <b><i>(abs_aileron_cmd <= 15.0)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(abs_aileron_cmd <= 15.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e720fad0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-004",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "FSM_Autopilot shall always satisfy (! good & state = ap_nominal_state) => STATE = ap_maneuver_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "good",
                    "state",
                    "ap_nominal_state",
                    "STATE",
                    "ap_maneuver_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)",
            "responseTextRange": [
                27,
                98
            ],
            "ft": "(LAST V <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "pt": "(H <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( ! good & state = ap_nominal_state ) -> STATE = ap_maneuver_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( not good and state = ap_nominal_state ) => STATE = ap_maneuver_state)))",
            "diagramVariables": "Response = <b><i>(( ! good & state = ap_nominal_state ) => STATE = ap_maneuver_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e72148f0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-007v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_maneuver_state & supported & good & ! standby) => STATE = ap_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "supported",
                    "good",
                    "standby",
                    "STATE",
                    "ap_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_maneuver_state & supported & good & ! standby ) => STATE = ap_transition_state)",
            "responseTextRange": [
                27,
                123
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) -> STATE = ap_transition_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and supported and good and not standby ) => STATE = ap_transition_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & supported & good & ! standby ) => STATE = ap_transition_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e72148f1-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "TSM-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "TriplexSignalMonitor  shall  always  satisfy  (no_fail => (set_val = mid_value))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "no_fail",
                    "set_val",
                    "mid_value"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                29,
                34
            ],
            "post_condition": "(( no_fail => ( set_val = mid_value ) ))",
            "responseTextRange": [
                37,
                79
            ],
            "ft": "(LAST V <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "pt": "(H <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( no_fail -> ( set_val = mid_value ) ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((( no_fail => ( set_val = mid_value ) ))))",
            "diagramVariables": "Response = <b><i>(( no_fail => ( set_val = mid_value ) ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(( no_fail => ( set_val = mid_value ) ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7217000-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "SWIM-001b",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "SWIM shall always satisfy ((storeCat = CAT3) => (CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0)) ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "storeCat",
                    "CAT3",
                    "CalAirspeedMin",
                    "sqrtOfWeight"
                ],
                "modes": []
            },
            "component_name": "SWIM",
            "componentTextRange": [
                0,
                3
            ],
            "timingTextRange": [
                11,
                16
            ],
            "post_condition": "(( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))",
            "responseTextRange": [
                18,
                96
            ],
            "ft": "(LAST V <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "pt": "(H <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "ptExpanded": "(H <b><i>(( ( storeCat = CAT3 ) -> ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>)",
            "component": "<b><i>SWIM</i></b>",
            "CoCoSpecCode": "(H((( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))))",
            "diagramVariables": "Response = <b><i>(( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "description": "Always, the component \"<b><i>SWIM</i></b>\" shall satisfy <b><i>(( ( storeCat = CAT3 ) => ( CalAirspeedMin = 1.33694 * sqrtOfWeight + 10.0 ) ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7219710-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "REG-010",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Height Regulator Shall not command transient changes in translational height acceleration greater than 32 ft/sec2/sec.",
        "fulltext": "Regulator shall always satisfy height_command_acceleration <= 32.0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "height_command_acceleration"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(height_command_acceleration <= 32.0)",
            "responseTextRange": [
                23,
                65
            ],
            "ft": "(LAST V <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "pt": "(H <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "ptExpanded": "(H <b><i>(height_command_acceleration <= 32.0)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((height_command_acceleration <= 32.0)))",
            "diagramVariables": "Response = <b><i>(height_command_acceleration <= 32.0)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(height_command_acceleration <= 32.0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e721e530-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "EUL-001G",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_31 = SinPhi * SinPsi + CosTheta *SinTheta * CosPsi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_31",
                    "SinPhi",
                    "SinPsi",
                    "CosTheta",
                    "SinTheta",
                    "CosPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)",
            "responseTextRange": [
                19,
                83
            ],
            "ft": "(LAST V <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "pt": "(H <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)))",
            "diagramVariables": "Response = <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_31 = SinPhi * SinPsi + CosTheta * SinTheta * CosPsi)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7220c40-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "NN-001",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The maximum value of NN output, z, shall always be less than or equal to 1.1, regardless of the input values",
        "fulltext": "NN shall always satisfy z <=1.1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "z"
                ],
                "modes": []
            },
            "component_name": "NN",
            "componentTextRange": [
                0,
                1
            ],
            "timingTextRange": [
                9,
                14
            ],
            "post_condition": "(z <= 1.1)",
            "responseTextRange": [
                16,
                30
            ],
            "ft": "(LAST V <b><i>(z <= 1.1)</i></b>)",
            "pt": "(H <b><i>(z <= 1.1)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(z <= 1.1)</i></b>)",
            "ptExpanded": "(H <b><i>(z <= 1.1)</i></b>)",
            "component": "<b><i>NN</i></b>",
            "CoCoSpecCode": "(H((z <= 1.1)))",
            "diagramVariables": "Response = <b><i>(z <= 1.1)</i></b>.",
            "description": "Always, the component \"<b><i>NN</i></b>\" shall satisfy <b><i>(z <= 1.1)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7223350-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-011v2",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "FSM_Sensor shall always satisfy (senstate = sen_nominal_state & !request & !limits) => SENSTATE = sen_transition_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "senstate",
                    "sen_nominal_state",
                    "request",
                    "limits",
                    "SENSTATE",
                    "sen_transition_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Sensor",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(( senstate = sen_nominal_state & ! request & ! limits ) => SENSTATE = sen_transition_state)",
            "responseTextRange": [
                24,
                117
            ],
            "ft": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "pt": "(H <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) -> SENSTATE = sen_transition_state)</i></b>)",
            "component": "<b><i>FSM_Sensor</i></b>",
            "CoCoSpecCode": "(H((( senstate = sen_nominal_state and not request and not limits ) => SENSTATE = sen_transition_state)))",
            "diagramVariables": "Response = <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "description": "Always, the component \"<b><i>FSM_Sensor</i></b>\" shall satisfy <b><i>(( senstate = sen_nominal_state & ! request & ! limits ) => SENSTATE = sen_transition_state)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7225a60-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "REG-002",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Pitch Regulator shall not command angular pitch accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_pitch_output_exceeding_50 <= 100 ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_pitch_output_exceeding_50"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_pitch_output_exceeding_50 <= 100)",
            "responseTextRange": [
                23,
                68
            ],
            "ft": "(LAST V <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_pitch_output_exceeding_50 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_pitch_output_exceeding_50 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7228170-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "NLG-007",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "NLGuidance shall always satisfy yout(3) - Xtarg(3) = 0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "yout",
                    "Xtarg"
                ],
                "modes": []
            },
            "component_name": "NLGuidance",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(yout ( 3 ) - Xtarg ( 3 ) = 0)",
            "responseTextRange": [
                24,
                53
            ],
            "ft": "(LAST V <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "pt": "(H <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "ptExpanded": "(H <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>)",
            "component": "<b><i>NLGuidance</i></b>",
            "CoCoSpecCode": "(H((yout ( 3 ) - Xtarg ( 3 ) = 0)))",
            "diagramVariables": "Response = <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>.",
            "description": "Always, the component \"<b><i>NLGuidance</i></b>\" shall satisfy <b><i>(yout ( 3 ) - Xtarg ( 3 ) = 0)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e722a880-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-001v1",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "Exceeding sensor limits shall latch an autopilot pullup when the pilot is not in control (not standby) and the system is supported without failures (not apfail).",
        "fulltext": "FSM  shall  always  satisfy (limits & !standby & !apfail & supported) => pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "limits",
                    "standby",
                    "apfail",
                    "supported",
                    "pullup"
                ],
                "modes": []
            },
            "component_name": "FSM",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(( limits & ! standby & ! apfail & supported ) => pullup)",
            "responseTextRange": [
                20,
                78
            ],
            "ft": "(LAST V <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "pt": "(H <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "ptExpanded": "(H <b><i>(( limits & ! standby & ! apfail & supported ) -> pullup)</i></b>)",
            "component": "<b><i>FSM</i></b>",
            "CoCoSpecCode": "(H((( limits and not standby and not apfail and supported ) => pullup)))",
            "diagramVariables": "Response = <b><i>(( limits & ! standby & ! apfail & supported ) => pullup)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e722cf90-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "AP-008A",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "in hdg_hold mode RollAutopilot shall always satisfy hdg_mode_is_active",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "hdg_mode_is_active"
                ],
                "modes": [
                    "hdg_hold"
                ]
            },
            "scope_mode": "hdg_hold",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                17,
                29
            ],
            "timingTextRange": [
                37,
                42
            ],
            "post_condition": "(hdg_mode_is_active)",
            "responseTextRange": [
                44,
                69
            ],
            "ft": "((LAST V ((! (Fin_<b><i>hdg_hold</i></b> & (! LAST))) | (X ((Lin_<b><i>hdg_hold</i></b> | LAST) V <b><i>(hdg_mode_is_active)</i></b>)))) & (<b><i>hdg_hold</i></b> -> ((Lin_<b><i>hdg_hold</i></b> | LAST) V <b><i>(hdg_mode_is_active)</i></b>)))",
            "pt": "((H ((Lin_<b><i>hdg_hold</i></b> & (! FTP)) -> (Y (<b><i>(hdg_mode_is_active)</i></b> S (<b><i>(hdg_mode_is_active)</i></b> & Fin_<b><i>hdg_hold</i></b>))))) & (((! Lin_<b><i>hdg_hold</i></b>) S ((! Lin_<b><i>hdg_hold</i></b>) & Fin_<b><i>hdg_hold</i></b>)) -> (<b><i>(hdg_mode_is_active)</i></b> S (<b><i>(hdg_mode_is_active)</i></b> & Fin_<b><i>hdg_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>hdg_hold</i></b>) & (! LAST)) & (X <b><i>hdg_hold</i></b>)) & (! LAST))) | (X ((((<b><i>hdg_hold</i></b> & (! LAST)) & (X (! <b><i>hdg_hold</i></b>))) | LAST) V <b><i>(hdg_mode_is_active)</i></b>)))) & (<b><i>hdg_hold</i></b> -> ((((<b><i>hdg_hold</i></b> & (! LAST)) & (X (! <b><i>hdg_hold</i></b>))) | LAST) V <b><i>(hdg_mode_is_active)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>)) & (Y TRUE)) -> (Y (<b><i>(hdg_mode_is_active)</i></b> S (<b><i>(hdg_mode_is_active)</i></b> & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>))))))))) & (((! ((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>))) S ((! ((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>))) & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>)))))) -> (<b><i>(hdg_mode_is_active)</i></b> S (<b><i>(hdg_mode_is_active)</i></b> & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not hdg_hold) and (pre (hdg_hold))) and ( not FTP)) => (pre (SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), (hdg_mode_is_active) ))))) and ((SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), ( not (( not hdg_hold) and (pre (hdg_hold)))) )) => (SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), (hdg_mode_is_active) ))))",
            "diagramVariables": "M = <b><i>hdg_hold</i></b>, Response = <b><i>(hdg_mode_is_active)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(hdg_mode_is_active)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>hdg_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "e722f6a0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "EUL-001E",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_22 = (CosPhi * CosPsi + SinPhi * SinTheta * SinPsi)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_22",
                    "CosPhi",
                    "CosPsi",
                    "SinPhi",
                    "SinTheta",
                    "SinPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))",
            "responseTextRange": [
                19,
                84
            ],
            "ft": "(LAST V <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "pt": "(H <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))))",
            "diagramVariables": "Response = <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_22 = ( CosPhi * CosPsi + SinPhi * SinTheta * SinPsi ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e72344c0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "TSM-003a",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "In the single fail state, a good channel average of the remaining two good branches shall be used to determine the selected value (1)",
        "fulltext": "TriplexSignalMonitor shall always satisfy FC =1 => set_val = 0.5 * (ia +ib)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "FC",
                    "set_val",
                    "ia",
                    "ib"
                ],
                "modes": []
            },
            "component_name": "TriplexSignalMonitor",
            "componentTextRange": [
                0,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(FC = 1 => set_val = 0.5 * ( ia + ib ))",
            "responseTextRange": [
                34,
                74
            ],
            "ft": "(LAST V <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "pt": "(H <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "ptExpanded": "(H <b><i>(FC = 1 -> set_val = 0.5 * ( ia + ib ))</i></b>)",
            "component": "<b><i>TriplexSignalMonitor</i></b>",
            "CoCoSpecCode": "(H((FC = 1 => set_val = 0.5 * ( ia + ib ))))",
            "diagramVariables": "Response = <b><i>(FC = 1 => set_val = 0.5 * ( ia + ib ))</i></b>.",
            "description": "Always, the component \"<b><i>TriplexSignalMonitor</i></b>\" shall satisfy <b><i>(FC = 1 => set_val = 0.5 * ( ia + ib ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e72344c1-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "REG-003",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The Inner Loop Yaw Regulator Shall not command angular yaw accelerations greater than the capability of the system (50 deg/sec2) for durations exceeding 100 frames (1 second @ 100 hz).",
        "fulltext": "Regulator shall always satisfy count_yaw_output_exceeding_50 <= 100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "count_yaw_output_exceeding_50"
                ],
                "modes": []
            },
            "component_name": "Regulator",
            "componentTextRange": [
                0,
                8
            ],
            "timingTextRange": [
                16,
                21
            ],
            "post_condition": "(count_yaw_output_exceeding_50 <= 100)",
            "responseTextRange": [
                23,
                66
            ],
            "ft": "(LAST V <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "pt": "(H <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "ptExpanded": "(H <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>)",
            "component": "<b><i>Regulator</i></b>",
            "CoCoSpecCode": "(H((count_yaw_output_exceeding_50 <= 100)))",
            "diagramVariables": "Response = <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>.",
            "description": "Always, the component \"<b><i>Regulator</i></b>\" shall satisfy <b><i>(count_yaw_output_exceeding_50 <= 100)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7236bd0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "EUL-002B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "R2_21",
                    "VI_1",
                    "R_21",
                    "VI_2",
                    "R_22",
                    "VI_3",
                    "R_23"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)",
            "responseTextRange": [
                19,
                73
            ],
            "ft": "(LAST V <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "pt": "(H <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "ptExpanded": "(H <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)))",
            "diagramVariables": "Response = <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(R2_21 = VI_1 * R_21 + VI_2 * R_22 + VI_3 * R_23)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e723b9f0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "AP-008B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "in hdg_hold mode RollAutopilot shall always satisfy roll_cmd = hdg_hold_mode_cmd",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "roll_cmd",
                    "hdg_hold_mode_cmd"
                ],
                "modes": [
                    "hdg_hold"
                ]
            },
            "scope_mode": "hdg_hold",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                17,
                29
            ],
            "timingTextRange": [
                37,
                42
            ],
            "post_condition": "(roll_cmd = hdg_hold_mode_cmd)",
            "responseTextRange": [
                44,
                79
            ],
            "ft": "((LAST V ((! (Fin_<b><i>hdg_hold</i></b> & (! LAST))) | (X ((Lin_<b><i>hdg_hold</i></b> | LAST) V <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>)))) & (<b><i>hdg_hold</i></b> -> ((Lin_<b><i>hdg_hold</i></b> | LAST) V <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>)))",
            "pt": "((H ((Lin_<b><i>hdg_hold</i></b> & (! FTP)) -> (Y (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> & Fin_<b><i>hdg_hold</i></b>))))) & (((! Lin_<b><i>hdg_hold</i></b>) S ((! Lin_<b><i>hdg_hold</i></b>) & Fin_<b><i>hdg_hold</i></b>)) -> (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> & Fin_<b><i>hdg_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>hdg_hold</i></b>) & (! LAST)) & (X <b><i>hdg_hold</i></b>)) & (! LAST))) | (X ((((<b><i>hdg_hold</i></b> & (! LAST)) & (X (! <b><i>hdg_hold</i></b>))) | LAST) V <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>)))) & (<b><i>hdg_hold</i></b> -> ((((<b><i>hdg_hold</i></b> & (! LAST)) & (X (! <b><i>hdg_hold</i></b>))) | LAST) V <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>)))",
            "ptExpanded": "((H ((((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>)) & (Y TRUE)) -> (Y (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>))))))))) & (((! ((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>))) S ((! ((! <b><i>hdg_hold</i></b>) & (Y <b><i>hdg_hold</i></b>))) & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>)))))) -> (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> S (<b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b> & (<b><i>hdg_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>hdg_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not hdg_hold) and (pre (hdg_hold))) and ( not FTP)) => (pre (SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), (roll_cmd = hdg_hold_mode_cmd) ))))) and ((SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), ( not (( not hdg_hold) and (pre (hdg_hold)))) )) => (SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), (roll_cmd = hdg_hold_mode_cmd) ))))",
            "diagramVariables": "M = <b><i>hdg_hold</i></b>, Response = <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>.",
            "description": "Always, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(roll_cmd = hdg_hold_mode_cmd)</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>hdg_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg"
        },
        "_id": "e723e100-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "AP-003C",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The roll hold reference shall be set to 30 degrees in the same direction as the actual roll angle if the actual roll angle is greater than 30 degrees at the time of roll hold engagement.",
        "fulltext": "in roll_hold  mode RollAutopilot shall immediately satisfy abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign(roll_angle)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "abs_roll_angle",
                    "roll_hold_reference",
                    "sign",
                    "roll_angle"
                ],
                "modes": [
                    "roll_hold"
                ]
            },
            "scope_mode": "roll_hold",
            "scopeTextRange": [
                0,
                17
            ],
            "component_name": "RollAutopilot",
            "componentTextRange": [
                19,
                31
            ],
            "timingTextRange": [
                39,
                49
            ],
            "post_condition": "(abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))",
            "responseTextRange": [
                51,
                129
            ],
            "ft": "((LAST V ((! (Fin_<b><i>roll_hold</i></b> & (! LAST))) | (X <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))",
            "pt": "((H ((Lin_<b><i>roll_hold</i></b> & (! FTP)) -> (Y ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) & Fin_<b><i>roll_hold</i></b>))))) & (((! Lin_<b><i>roll_hold</i></b>) S ((! Lin_<b><i>roll_hold</i></b>) & Fin_<b><i>roll_hold</i></b>)) -> ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) S ((Fin_<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) & Fin_<b><i>roll_hold</i></b>))))",
            "ftExpanded": "((LAST V ((! ((((! <b><i>roll_hold</i></b>) & (! LAST)) & (X <b><i>roll_hold</i></b>)) & (! LAST))) | (X <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))) & (<b><i>roll_hold</i></b> -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>))",
            "ptExpanded": "((H ((((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>)) & (Y TRUE)) -> (Y (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))) & (((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) S ((! ((! <b><i>roll_hold</i></b>) & (Y <b><i>roll_hold</i></b>))) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))))) -> (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) S (((<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>)))) -> <b><i>(abs_roll_angle >= 30.0 -> roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>) & (<b><i>roll_hold</i></b> & ((! (Y TRUE)) | (Y (! <b><i>roll_hold</i></b>))))))))",
            "component": "<b><i>RollAutopilot</i></b>",
            "CoCoSpecCode": "((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ((roll_hold and (FTP or (pre ( not roll_hold)))) => (abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))) ))))",
            "diagramVariables": "M = <b><i>roll_hold</i></b>, Response = <b><i>(abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>.",
            "description": "Immediately, the component \"<b><i>RollAutopilot</i></b>\" shall satisfy <b><i>(abs_roll_angle >= 30.0 => roll_hold_reference = 30.0 * sign ( roll_angle ))</i></b>. This is only enforced when \"<b><i>RollAutopilot</i></b>\" is in mode <b><i>roll_hold</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg"
        },
        "_id": "e7240810-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "EUL-001B",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_12 = CosTheta * SinPsi",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_12",
                    "CosTheta",
                    "SinPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_12 = CosTheta * SinPsi)",
            "responseTextRange": [
                19,
                55
            ],
            "ft": "(LAST V <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "pt": "(H <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_12 = CosTheta * SinPsi)))",
            "diagramVariables": "Response = <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_12 = CosTheta * SinPsi)</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7242f20-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "EUL-001H",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "",
        "fulltext": "Euler shall always satisfy DCM321_32 = (- SinPhi * CosPsi) + (CosPhi * SinTheta * SinPsi)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "DCM321_32",
                    "SinPhi",
                    "CosPsi",
                    "CosPhi",
                    "SinTheta",
                    "SinPsi"
                ],
                "modes": []
            },
            "component_name": "Euler",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))",
            "responseTextRange": [
                19,
                88
            ],
            "ft": "(LAST V <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "pt": "(H <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "ftExpanded": "(LAST V <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "ptExpanded": "(H <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>)",
            "component": "<b><i>Euler</i></b>",
            "CoCoSpecCode": "(H((DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))))",
            "diagramVariables": "Response = <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>.",
            "description": "Always, the component \"<b><i>Euler</i></b>\" shall satisfy <b><i>(DCM321_32 = ( - SinPhi * CosPsi ) + ( CosPhi * SinTheta * SinPsi ))</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7245630-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "FSM-006",
        "parent_reqid": "",
        "project": "LM_requirements",
        "rationale": "The autopilot shall change states from MANEUVER to STANDBY when the pilot is in control (standby) and sensor data is good",
        "fulltext": "FSM_Autopilot shall always satisfy (state = ap_maneuver_state & standby & good) => STATE = ap_standby_state",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "state",
                    "ap_maneuver_state",
                    "standby",
                    "good",
                    "STATE",
                    "ap_standby_state"
                ],
                "modes": []
            },
            "component_name": "FSM_Autopilot",
            "componentTextRange": [
                0,
                12
            ],
            "timingTextRange": [
                20,
                25
            ],
            "post_condition": "(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)",
            "responseTextRange": [
                27,
                106
            ],
            "ft": "(LAST V <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "pt": "(H <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "ftExpanded": "(LAST V <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "ptExpanded": "(H <b><i>(( state = ap_maneuver_state & standby & good ) -> STATE = ap_standby_state)</i></b>)",
            "component": "<b><i>FSM_Autopilot</i></b>",
            "CoCoSpecCode": "(H((( state = ap_maneuver_state and standby and good ) => STATE = ap_standby_state)))",
            "diagramVariables": "Response = <b><i>(( state = ap_maneuver_state & standby & good ) => STATE = ap_standby_state)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg"
        },
        "_id": "e7247d40-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "LM-001",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "While not liquid level 1 is reached, when start button is pressed the liquid mixer components shall open valve 0",
        "fulltext": "when start_button liquid_mixer shall immediately satisfy if ! liquid_level_1 then valve_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "start_button",
                    "liquid_level_1",
                    "valve_0"
                ],
                "modes": []
            },
            "regular_condition": "(start_button)",
            "qualifier_word": "when",
            "pre_condition": "(start_button)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                18,
                29
            ],
            "timingTextRange": [
                37,
                47
            ],
            "post_condition": "(! liquid_level_1 => valve_0)",
            "responseTextRange": [
                49,
                88
            ],
            "ft": "((LAST V (((! <b><i>(start_button)</i></b>) & ((! LAST) & (X <b><i>(start_button)</i></b>))) -> (X <b><i>(! liquid_level_1 -> valve_0)</i></b>))) & (<b><i>(start_button)</i></b> -> <b><i>(! liquid_level_1 -> valve_0)</i></b>))",
            "pt": "(H ((<b><i>(start_button)</i></b> & ((Y (! <b><i>(start_button)</i></b>)) | FTP)) -> <b><i>(! liquid_level_1 -> valve_0)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(start_button)</i></b>) & ((! LAST) & (X <b><i>(start_button)</i></b>))) -> (X <b><i>(! liquid_level_1 -> valve_0)</i></b>))) & (<b><i>(start_button)</i></b> -> <b><i>(! liquid_level_1 -> valve_0)</i></b>))",
            "ptExpanded": "(H ((<b><i>(start_button)</i></b> & ((Y (! <b><i>(start_button)</i></b>)) | (! (Y TRUE)))) -> <b><i>(! liquid_level_1 -> valve_0)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((start_button) and ((pre ( not (start_button))) or FTP)) => (not liquid_level_1 => valve_0)))",
            "diagramVariables": "TC = <b><i>(start_button)</i></b>, Response = <b><i>(! liquid_level_1 => valve_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(start_button)</i></b> is true and any point in the interval where <b><i>(start_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "e724a450-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "LM-006",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When liquid level 2 is reached happens, liquid mixer controller shall start stirring motor until 60 second timer expires or emergency button is pressed.",
        "fulltext": "when liquid_level_2, the liquid_mixer shall until (timer_60sec_expire | emergency_button) satisfy stirring_motor",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_2",
                    "timer_60sec_expire",
                    "emergency_button",
                    "stirring_motor"
                ],
                "modes": []
            },
            "regular_condition": "(liquid_level_2)",
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_2)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                21,
                36
            ],
            "stop_condition": "(( timer_60sec_expire | emergency_button ))",
            "timingTextRange": [
                44,
                88
            ],
            "post_condition": "(stirring_motor)",
            "responseTextRange": [
                90,
                111
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))) & (<b><i>(liquid_level_2)</i></b> -> ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))",
            "pt": "(H ((H (! <b><i>(liquid_level_2)</i></b>)) | (((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) & (<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | FTP)))) -> <b><i>(stirring_motor)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))) & (<b><i>(liquid_level_2)</i></b> -> ((<b><i>(( timer_60sec_expire | emergency_button ))</i></b> V (<b><i>(stirring_motor)</i></b> | <b><i>(( timer_60sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(stirring_motor)</i></b>))))",
            "ptExpanded": "(H ((H (! <b><i>(liquid_level_2)</i></b>)) | (((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_60sec_expire | emergency_button ))</i></b>) & (<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | (! (Y TRUE)))))) -> <b><i>(stirring_motor)</i></b>)))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((H( not (liquid_level_2))) or ((SI( ((liquid_level_2) and ((pre ( not (liquid_level_2))) or FTP)), ( not (( timer_60sec_expire or emergency_button ))) )) => (stirring_motor))))",
            "diagramVariables": "TC = <b><i>(liquid_level_2)</i></b>, SC = <b><i>(( timer_60sec_expire | emergency_button ))</i></b>, Response = <b><i>(stirring_motor)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_2)</i></b> is true and any point in the interval where <b><i>(liquid_level_2)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg"
        },
        "_id": "e724cb60-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "LM-003",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "While not liquid level 2 is reached, when liquid level 1 is reached the liquid mixer controller shall open valve 1 until emergency button is pressed.",
        "fulltext": "when liquid_level_1 the liquid_mixer shall until emergency_button satisfy if ! liquid_level_2 then valve_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_1",
                    "emergency_button",
                    "liquid_level_2",
                    "valve_1"
                ],
                "modes": []
            },
            "regular_condition": "(liquid_level_1)",
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_1)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                35
            ],
            "stop_condition": "(emergency_button)",
            "timingTextRange": [
                43,
                64
            ],
            "post_condition": "(! liquid_level_2 => valve_1)",
            "responseTextRange": [
                66,
                105
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_1)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_1)</i></b>))) -> (X ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))) & (<b><i>(liquid_level_1)</i></b> -> ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))",
            "pt": "(H ((H (! <b><i>(liquid_level_1)</i></b>)) | (((! <b><i>(emergency_button)</i></b>) S ((! <b><i>(emergency_button)</i></b>) & (<b><i>(liquid_level_1)</i></b> & ((Y (! <b><i>(liquid_level_1)</i></b>)) | FTP)))) -> <b><i>(! liquid_level_2 -> valve_1)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_1)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_1)</i></b>))) -> (X ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))) & (<b><i>(liquid_level_1)</i></b> -> ((<b><i>(emergency_button)</i></b> V (<b><i>(! liquid_level_2 -> valve_1)</i></b> | <b><i>(emergency_button)</i></b>)) | (LAST V <b><i>(! liquid_level_2 -> valve_1)</i></b>))))",
            "ptExpanded": "(H ((H (! <b><i>(liquid_level_1)</i></b>)) | (((! <b><i>(emergency_button)</i></b>) S ((! <b><i>(emergency_button)</i></b>) & (<b><i>(liquid_level_1)</i></b> & ((Y (! <b><i>(liquid_level_1)</i></b>)) | (! (Y TRUE)))))) -> <b><i>(! liquid_level_2 -> valve_1)</i></b>)))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((H( not (liquid_level_1))) or ((SI( ((liquid_level_1) and ((pre ( not (liquid_level_1))) or FTP)), ( not (emergency_button)) )) => (not liquid_level_2 => valve_1))))",
            "diagramVariables": "TC = <b><i>(liquid_level_1)</i></b>, SC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! liquid_level_2 => valve_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_1)</i></b> is true and any point in the interval where <b><i>(liquid_level_1)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg"
        },
        "_id": "e724f270-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "LM-004",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When liquid level 2 is reached occurs, the liquid mixer controller shall close valve 1.",
        "fulltext": "when liquid_level_2 the liquid_mixer shall immediately satisfy !valve_1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "liquid_level_2",
                    "valve_1"
                ],
                "modes": []
            },
            "regular_condition": "(liquid_level_2)",
            "qualifier_word": "when",
            "pre_condition": "(liquid_level_2)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                20,
                35
            ],
            "timingTextRange": [
                43,
                53
            ],
            "post_condition": "(! valve_1)",
            "responseTextRange": [
                55,
                70
            ],
            "ft": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X <b><i>(! valve_1)</i></b>))) & (<b><i>(liquid_level_2)</i></b> -> <b><i>(! valve_1)</i></b>))",
            "pt": "(H ((<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | FTP)) -> <b><i>(! valve_1)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(liquid_level_2)</i></b>) & ((! LAST) & (X <b><i>(liquid_level_2)</i></b>))) -> (X <b><i>(! valve_1)</i></b>))) & (<b><i>(liquid_level_2)</i></b> -> <b><i>(! valve_1)</i></b>))",
            "ptExpanded": "(H ((<b><i>(liquid_level_2)</i></b> & ((Y (! <b><i>(liquid_level_2)</i></b>)) | (! (Y TRUE)))) -> <b><i>(! valve_1)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((liquid_level_2) and ((pre ( not (liquid_level_2))) or FTP)) => (not valve_1)))",
            "diagramVariables": "TC = <b><i>(liquid_level_2)</i></b>, Response = <b><i>(! valve_1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(liquid_level_2)</i></b> is true and any point in the interval where <b><i>(liquid_level_2)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "e7254090-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "LM-008",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When 60 second timer expires happens, the liquid mixer controller shall open valve 2 until 120 sec timer expires or emergency button is pressed.",
        "fulltext": "when timer_60sec_expire, the liquid_mixer shall until (timer_120sec_expire | emergency_button) satisfy valve_2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "timer_60sec_expire",
                    "timer_120sec_expire",
                    "emergency_button",
                    "valve_2"
                ],
                "modes": []
            },
            "regular_condition": "(timer_60sec_expire)",
            "qualifier_word": "when",
            "pre_condition": "(timer_60sec_expire)",
            "conditionTextRange": [
                0,
                23
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                25,
                40
            ],
            "stop_condition": "(( timer_120sec_expire | emergency_button ))",
            "timingTextRange": [
                48,
                93
            ],
            "post_condition": "(valve_2)",
            "responseTextRange": [
                95,
                109
            ],
            "ft": "((LAST V (((! <b><i>(timer_60sec_expire)</i></b>) & ((! LAST) & (X <b><i>(timer_60sec_expire)</i></b>))) -> (X ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))) & (<b><i>(timer_60sec_expire)</i></b> -> ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))",
            "pt": "(H ((H (! <b><i>(timer_60sec_expire)</i></b>)) | (((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) & (<b><i>(timer_60sec_expire)</i></b> & ((Y (! <b><i>(timer_60sec_expire)</i></b>)) | FTP)))) -> <b><i>(valve_2)</i></b>)))",
            "ftExpanded": "((LAST V (((! <b><i>(timer_60sec_expire)</i></b>) & ((! LAST) & (X <b><i>(timer_60sec_expire)</i></b>))) -> (X ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))) & (<b><i>(timer_60sec_expire)</i></b> -> ((<b><i>(( timer_120sec_expire | emergency_button ))</i></b> V (<b><i>(valve_2)</i></b> | <b><i>(( timer_120sec_expire | emergency_button ))</i></b>)) | (LAST V <b><i>(valve_2)</i></b>))))",
            "ptExpanded": "(H ((H (! <b><i>(timer_60sec_expire)</i></b>)) | (((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) S ((! <b><i>(( timer_120sec_expire | emergency_button ))</i></b>) & (<b><i>(timer_60sec_expire)</i></b> & ((Y (! <b><i>(timer_60sec_expire)</i></b>)) | (! (Y TRUE)))))) -> <b><i>(valve_2)</i></b>)))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H((H( not (timer_60sec_expire))) or ((SI( ((timer_60sec_expire) and ((pre ( not (timer_60sec_expire))) or FTP)), ( not (( timer_120sec_expire or emergency_button ))) )) => (valve_2))))",
            "diagramVariables": "TC = <b><i>(timer_60sec_expire)</i></b>, SC = <b><i>(( timer_120sec_expire | emergency_button ))</i></b>, Response = <b><i>(valve_2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(timer_60sec_expire)</i></b> is true and any point in the interval where <b><i>(timer_60sec_expire)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg"
        },
        "_id": "e72567a0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "LM-009",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When emergency button is pressed occurs, the liquid mixer controller shall close valve 0.",
        "fulltext": "when emergency_button, the liquid_mixer shall immediately satisfy ! valve_0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "emergency_button",
                    "valve_0"
                ],
                "modes": []
            },
            "regular_condition": "(emergency_button)",
            "qualifier_word": "when",
            "pre_condition": "(emergency_button)",
            "conditionTextRange": [
                0,
                21
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                23,
                38
            ],
            "timingTextRange": [
                46,
                56
            ],
            "post_condition": "(! valve_0)",
            "responseTextRange": [
                58,
                74
            ],
            "ft": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X <b><i>(! valve_0)</i></b>))) & (<b><i>(emergency_button)</i></b> -> <b><i>(! valve_0)</i></b>))",
            "pt": "(H ((<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | FTP)) -> <b><i>(! valve_0)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X <b><i>(! valve_0)</i></b>))) & (<b><i>(emergency_button)</i></b> -> <b><i>(! valve_0)</i></b>))",
            "ptExpanded": "(H ((<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | (! (Y TRUE)))) -> <b><i>(! valve_0)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((emergency_button) and ((pre ( not (emergency_button))) or FTP)) => (not valve_0)))",
            "diagramVariables": "TC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! valve_0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(emergency_button)</i></b> is true and any point in the interval where <b><i>(emergency_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "e7258eb0-756f-11eb-b2d4-87bed53e8aeb"
    },
    {
        "reqid": "LM-011",
        "parent_reqid": "",
        "project": "Liquid_mixer",
        "rationale": "When emergency button is pressed occurs, the liquid mixer controller shall close valve 2.",
        "fulltext": "when emergency_button the liquid_mixer shall immediately satisfy ! valve_2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": {
                "regular": [
                    "emergency_button",
                    "valve_2"
                ],
                "modes": []
            },
            "regular_condition": "(emergency_button)",
            "qualifier_word": "when",
            "pre_condition": "(emergency_button)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "liquid_mixer",
            "componentTextRange": [
                22,
                37
            ],
            "timingTextRange": [
                45,
                55
            ],
            "post_condition": "(! valve_2)",
            "responseTextRange": [
                57,
                73
            ],
            "ft": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X <b><i>(! valve_2)</i></b>))) & (<b><i>(emergency_button)</i></b> -> <b><i>(! valve_2)</i></b>))",
            "pt": "(H ((<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | FTP)) -> <b><i>(! valve_2)</i></b>))",
            "ftExpanded": "((LAST V (((! <b><i>(emergency_button)</i></b>) & ((! LAST) & (X <b><i>(emergency_button)</i></b>))) -> (X <b><i>(! valve_2)</i></b>))) & (<b><i>(emergency_button)</i></b> -> <b><i>(! valve_2)</i></b>))",
            "ptExpanded": "(H ((<b><i>(emergency_button)</i></b> & ((Y (! <b><i>(emergency_button)</i></b>)) | (! (Y TRUE)))) -> <b><i>(! valve_2)</i></b>))",
            "component": "<b><i>liquid_mixer</i></b>",
            "CoCoSpecCode": "(H(((emergency_button) and ((pre ( not (emergency_button))) or FTP)) => (not valve_2)))",
            "diagramVariables": "TC = <b><i>(emergency_button)</i></b>, Response = <b><i>(! valve_2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(emergency_button)</i></b> is true and any point in the interval where <b><i>(emergency_button)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg"
        },
        "_id": "e725b5c0-756f-11eb-b2d4-87bed53e8aeb"
    }
]