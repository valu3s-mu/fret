{
    "requirements": [
        {
            "reqid": "LPC_TB_STAY_ON_NEXT",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Whenever lift_mode = thrust_borne & kgs <= 20.0 & hover_control_mode the vehicle shall at the next timepoint satisfy lift_mode = thrust_borne",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "noTrigger",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "thrust_borne",
                    "kgs",
                    "hover_control_mode"
                ],
                "qualifier_word": "whenever",
                "pre_condition": "(lift_mode = thrust_borne & kgs <= 20.0 & hover_control_mode)",
                "regular_condition": "(lift_mode = thrust_borne & kgs <= 20.0 & hover_control_mode)",
                "conditionTextRange": [
                    0,
                    67
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    69,
                    79
                ],
                "timingTextRange": [
                    87,
                    107
                ],
                "post_condition": "(lift_mode = thrust_borne)",
                "responseTextRange": [
                    109,
                    140
                ],
                "diagramVariables": "CC = <b><i>(lift_mode = thrust_borne & kgs <= 20.0 & hover_control_mode)</i></b>, Response = <b><i>(lift_mode = thrust_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(lift_mode = thrust_borne & kgs <= 20.0 & hover_control_mode)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_noTrigger_next_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "(((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode)",
                "regular_condition_unexp_ft": "(((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode)",
                "regular_condition_SMV_pt": "(((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode)",
                "regular_condition_SMV_ft": "(((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode)",
                "post_condition_unexp_pt": "(lift_mode = thrust_borne)",
                "post_condition_unexp_ft": "(lift_mode = thrust_borne)",
                "post_condition_SMV_pt": "(lift_mode = thrust_borne)",
                "post_condition_SMV_ft": "(lift_mode = thrust_borne)",
                "ft_fetched": "(LAST V ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
                "ft": "(LAST V ((((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode) -> (LAST | (X (lift_mode = thrust_borne)))))",
                "pt_fetched": "(H ((Y $regular_condition_unexp_pt$) -> ($post_condition_unexp_pt$ | FTP)))",
                "pt": "(H ((Y (((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode)) -> ((lift_mode = thrust_borne) | FTP)))",
                "ptExpanded_fetched": "(H ((Y $regular_condition_SMV_pt$) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
                "ptExpanded": "(H ((Y (((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode)) -> ((lift_mode = thrust_borne) | (! (Y TRUE)))))",
                "CoCoSpecCode": "H((YtoPre((((lift_mode = thrust_borne) and (kgs <= 20.0)) and hover_control_mode)) => ((lift_mode = thrust_borne) or not (YtoPre(true)))))",
                "ftExpanded_fetched": "(LAST V ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "(LAST V ((((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode) -> (LAST | (X (lift_mode = thrust_borne)))))",
                "ftExpanded": "(LAST V ((((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode) -> (LAST | (X (lift_mode = thrust_borne)))))",
                "ftInfAUExpanded_fetched": "(G ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
                "ftInfAUExpanded": "(G ((((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode) -> (X (lift_mode = thrust_borne))))",
                "component": "vehicle"
            },
            "_id": "1958ecc0-9a0b-11ee-80d9-a77c0c691f6d"
        },
        {
            "reqid": "LPC_STB_STAY_ON_NEXT",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Whenever lift_mode = semi_thrust_borne & kias <= 40.0 & (kgs > 20.0 | !hover_control_mode) the vehicle shall at the next timepoint satisfy lift_mode = semi_thrust_borne",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "noTrigger",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "semi_thrust_borne",
                    "kias",
                    "kgs",
                    "hover_control_mode"
                ],
                "qualifier_word": "whenever",
                "pre_condition": "(lift_mode = semi_thrust_borne & kias <= 40.0 & ( kgs > 20.0 | ! hover_control_mode ))",
                "regular_condition": "(lift_mode = semi_thrust_borne & kias <= 40.0 & ( kgs > 20.0 | ! hover_control_mode ))",
                "conditionTextRange": [
                    0,
                    89
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    91,
                    101
                ],
                "timingTextRange": [
                    109,
                    129
                ],
                "post_condition": "(lift_mode = semi_thrust_borne)",
                "responseTextRange": [
                    131,
                    167
                ],
                "diagramVariables": "CC = <b><i>(lift_mode = semi_thrust_borne & kias <= 40.0 & ( kgs > 20.0 | ! hover_control_mode ))</i></b>, Response = <b><i>(lift_mode = semi_thrust_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(lift_mode = semi_thrust_borne & kias <= 40.0 & ( kgs > 20.0 | ! hover_control_mode ))</i></b> is true.\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_noTrigger_next_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "(((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode)))",
                "regular_condition_unexp_ft": "(((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode)))",
                "regular_condition_SMV_pt": "(((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode)))",
                "regular_condition_SMV_ft": "(((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode)))",
                "post_condition_unexp_pt": "(lift_mode = semi_thrust_borne)",
                "post_condition_unexp_ft": "(lift_mode = semi_thrust_borne)",
                "post_condition_SMV_pt": "(lift_mode = semi_thrust_borne)",
                "post_condition_SMV_ft": "(lift_mode = semi_thrust_borne)",
                "ft_fetched": "(LAST V ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
                "ft": "(LAST V ((((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode))) -> (LAST | (X (lift_mode = semi_thrust_borne)))))",
                "pt_fetched": "(H ((Y $regular_condition_unexp_pt$) -> ($post_condition_unexp_pt$ | FTP)))",
                "pt": "(H ((Y (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode)))) -> ((lift_mode = semi_thrust_borne) | FTP)))",
                "ptExpanded_fetched": "(H ((Y $regular_condition_SMV_pt$) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
                "ptExpanded": "(H ((Y (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode)))) -> ((lift_mode = semi_thrust_borne) | (! (Y TRUE)))))",
                "CoCoSpecCode": "H((YtoPre((((lift_mode = semi_thrust_borne) and (kias <= 40.0)) and ((kgs > 20.0) or not (hover_control_mode)))) => ((lift_mode = semi_thrust_borne) or not (YtoPre(true)))))",
                "ftExpanded_fetched": "(LAST V ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "(LAST V ((((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode))) -> (LAST | (X (lift_mode = semi_thrust_borne)))))",
                "ftExpanded": "(LAST V ((((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode))) -> (LAST | (X (lift_mode = semi_thrust_borne)))))",
                "ftInfAUExpanded_fetched": "(G ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
                "ftInfAUExpanded": "(G ((((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode))) -> (X (lift_mode = semi_thrust_borne))))",
                "component": "vehicle"
            },
            "_id": "50bf5be0-9a0b-11ee-80d9-a77c0c691f6d"
        },
        {
            "reqid": "LPC_REACH_HOVER_13",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall within 13 ticks satisfy lift_mode = thrust_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "within",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "thrust_borne"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "duration": "13",
                "timingTextRange": [
                    18,
                    32
                ],
                "post_condition": "(lift_mode = thrust_borne)",
                "responseTextRange": [
                    34,
                    65
                ],
                "diagramVariables": " n = <b><i>13</i></b>, Response = <b><i>(lift_mode = thrust_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>13</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>13</i></b>). If the interval ends sooner than trigger+<b><i>13</i></b>, then RES need not hold.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(lift_mode = thrust_borne)",
                "post_condition_unexp_ft": "(lift_mode = thrust_borne)",
                "post_condition_SMV_pt": "(lift_mode = thrust_borne)",
                "post_condition_SMV_ft": "(lift_mode = thrust_borne)",
                "ft_fetched": "((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))",
                "ft": "((F[<=13] (lift_mode = thrust_borne)) | (F[<13] LAST))",
                "pt_fetched": "(H ((H (! $post_condition_unexp_pt$)) -> (O[<$duration$] FTP)))",
                "pt": "(H ((H (! (lift_mode = thrust_borne))) -> (O[<13] FTP)))",
                "ptExpanded_fetched": "(H ((H (! $post_condition_SMV_pt$)) -> (O[<$duration$] (! (Y TRUE)))))",
                "ptExpanded": "(H ((H (! (lift_mode = thrust_borne))) -> (O[0,12] (! (Y TRUE)))))",
                "CoCoSpecCode": "H((H(not ((lift_mode = thrust_borne))) => OT(12, 0, not (YtoPre(true)))))",
                "ftExpanded_fetched": "((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))",
                "ftExpandedUnoptimized": "((F[0,13] (lift_mode = thrust_borne)) | (F[0,12] LAST))",
                "ftExpanded": "((F[0,13] (lift_mode = thrust_borne)) | (F[0,12] LAST))",
                "ftInfAUExpanded_fetched": "(F[<=$duration$] $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(F[0,13] (lift_mode = thrust_borne))",
                "component": "vehicle"
            },
            "_id": "79b76f00-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_WB_STAY_ON_pre",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy if preBool(false, lift_mode = wing_borne & kias > 90.0) then lift_mode = wing_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "wing_borne",
                    "kias"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(preBool ( false , lift_mode = wing_borne & kias > 90.0 ) => lift_mode = wing_borne)",
                "responseTextRange": [
                    25,
                    115
                ],
                "diagramVariables": "Response = <b><i>(preBool ( false , lift_mode = wing_borne & kias > 90.0 ) => lift_mode = wing_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y ((lift_mode = wing_borne) & (kias > 90.0))))) -> (lift_mode = wing_borne))",
                "post_condition_unexp_ft": "(preBool(FALSE,((lift_mode = wing_borne) & (kias > 90.0))) -> (lift_mode = wing_borne))",
                "post_condition_SMV_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y ((lift_mode = wing_borne) & (kias > 90.0))))) -> (lift_mode = wing_borne))",
                "post_condition_SMV_ft": "(preBool(FALSE,((lift_mode = wing_borne) & (kias > 90.0))) -> (lift_mode = wing_borne))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (preBool(FALSE,((lift_mode = wing_borne) & (kias > 90.0))) -> (lift_mode = wing_borne)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y ((lift_mode = wing_borne) & (kias > 90.0))))) -> (lift_mode = wing_borne)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((Y ((lift_mode = wing_borne) & (kias > 90.0))) -> (lift_mode = wing_borne)))",
                "CoCoSpecCode": "H((YtoPre(((lift_mode = wing_borne) and (kias > 90.0))) => (lift_mode = wing_borne)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (preBool(FALSE,((lift_mode = wing_borne) & (kias > 90.0))) -> (lift_mode = wing_borne)))",
                "ftExpanded": "(LAST V (preBool(FALSE,((lift_mode = wing_borne) & (kias > 90.0))) -> (lift_mode = wing_borne)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (preBool(FALSE,((lift_mode = wing_borne) & (kias > 90.0))) -> (lift_mode = wing_borne)))",
                "component": "vehicle"
            },
            "_id": "79b76f01-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_REACH_NOT_FCS_10",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall within 10 ticks satisfy !fcs",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "within",
                "response": "satisfaction",
                "variables": [
                    "fcs"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "duration": "10",
                "timingTextRange": [
                    18,
                    32
                ],
                "post_condition": "(! fcs)",
                "responseTextRange": [
                    34,
                    45
                ],
                "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(! fcs)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(! fcs)",
                "post_condition_unexp_ft": "(! fcs)",
                "post_condition_SMV_pt": "(! fcs)",
                "post_condition_SMV_ft": "(! fcs)",
                "ft_fetched": "((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))",
                "ft": "((F[<=10] (! fcs)) | (F[<10] LAST))",
                "pt_fetched": "(H ((H (! $post_condition_unexp_pt$)) -> (O[<$duration$] FTP)))",
                "pt": "(H ((H (! (! fcs))) -> (O[<10] FTP)))",
                "ptExpanded_fetched": "(H ((H (! $post_condition_SMV_pt$)) -> (O[<$duration$] (! (Y TRUE)))))",
                "ptExpanded": "(H ((H fcs) -> (O[0,9] (! (Y TRUE)))))",
                "CoCoSpecCode": "H((H(fcs) => OT(9, 0, not (YtoPre(true)))))",
                "ftExpanded_fetched": "((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))",
                "ftExpandedUnoptimized": "((F[0,10] (! fcs)) | (F[0,9] LAST))",
                "ftExpanded": "((F[0,10] (! fcs)) | (F[0,9] LAST))",
                "ftInfAUExpanded_fetched": "(F[<=$duration$] $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(F[0,10] (! fcs))",
                "component": "vehicle"
            },
            "_id": "79b79610-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_REACH_HOVER_14",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall within 14 ticks satisfy lift_mode = thrust_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "within",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "thrust_borne"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "duration": "14",
                "timingTextRange": [
                    18,
                    32
                ],
                "post_condition": "(lift_mode = thrust_borne)",
                "responseTextRange": [
                    34,
                    65
                ],
                "diagramVariables": " n = <b><i>14</i></b>, Response = <b><i>(lift_mode = thrust_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>14</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>14</i></b>). If the interval ends sooner than trigger+<b><i>14</i></b>, then RES need not hold.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(lift_mode = thrust_borne)",
                "post_condition_unexp_ft": "(lift_mode = thrust_borne)",
                "post_condition_SMV_pt": "(lift_mode = thrust_borne)",
                "post_condition_SMV_ft": "(lift_mode = thrust_borne)",
                "ft_fetched": "((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))",
                "ft": "((F[<=14] (lift_mode = thrust_borne)) | (F[<14] LAST))",
                "pt_fetched": "(H ((H (! $post_condition_unexp_pt$)) -> (O[<$duration$] FTP)))",
                "pt": "(H ((H (! (lift_mode = thrust_borne))) -> (O[<14] FTP)))",
                "ptExpanded_fetched": "(H ((H (! $post_condition_SMV_pt$)) -> (O[<$duration$] (! (Y TRUE)))))",
                "ptExpanded": "(H ((H (! (lift_mode = thrust_borne))) -> (O[0,13] (! (Y TRUE)))))",
                "CoCoSpecCode": "H((H(not ((lift_mode = thrust_borne))) => OT(13, 0, not (YtoPre(true)))))",
                "ftExpanded_fetched": "((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))",
                "ftExpandedUnoptimized": "((F[0,14] (lift_mode = thrust_borne)) | (F[0,13] LAST))",
                "ftExpanded": "((F[0,14] (lift_mode = thrust_borne)) | (F[0,13] LAST))",
                "ftInfAUExpanded_fetched": "(F[<=$duration$] $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(F[0,14] (lift_mode = thrust_borne))",
                "component": "vehicle"
            },
            "_id": "79b79611-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_CR_STAY_OFF",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy if preBool(false, !cr & kias >= 90.0) then !cr",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "cr",
                    "kias"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(preBool ( false , ! cr & kias >= 90.0 ) => ! cr)",
                "responseTextRange": [
                    25,
                    78
                ],
                "diagramVariables": "Response = <b><i>(preBool ( false , ! cr & kias >= 90.0 ) => ! cr)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y ((! cr) & (kias >= 90.0))))) -> (! cr))",
                "post_condition_unexp_ft": "(preBool(FALSE,((! cr) & (kias >= 90.0))) -> (! cr))",
                "post_condition_SMV_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y ((! cr) & (kias >= 90.0))))) -> (! cr))",
                "post_condition_SMV_ft": "(preBool(FALSE,((! cr) & (kias >= 90.0))) -> (! cr))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (preBool(FALSE,((! cr) & (kias >= 90.0))) -> (! cr)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y ((! cr) & (kias >= 90.0))))) -> (! cr)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((Y ((! cr) & (kias >= 90.0))) -> (! cr)))",
                "CoCoSpecCode": "H((YtoPre((not (cr) and (kias >= 90.0))) => not (cr)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (preBool(FALSE,((! cr) & (kias >= 90.0))) -> (! cr)))",
                "ftExpanded": "(LAST V (preBool(FALSE,((! cr) & (kias >= 90.0))) -> (! cr)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (preBool(FALSE,((! cr) & (kias >= 90.0))) -> (! cr)))",
                "component": "vehicle"
            },
            "_id": "79b7bd20-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_SWB_STAY_ON_pre",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy if preBool(false, lift_mode = semi_wing_borne & kias <= 100.0 & kias > 30.0) then lift_mode = semi_wing_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "semi_wing_borne",
                    "kias"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(preBool ( false , lift_mode = semi_wing_borne & kias <= 100.0 & kias > 30.0 ) => lift_mode = semi_wing_borne)",
                "responseTextRange": [
                    25,
                    141
                ],
                "diagramVariables": "Response = <b><i>(preBool ( false , lift_mode = semi_wing_borne & kias <= 100.0 & kias > 30.0 ) => lift_mode = semi_wing_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0))))) -> (lift_mode = semi_wing_borne))",
                "post_condition_unexp_ft": "(preBool(FALSE,(((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0))) -> (lift_mode = semi_wing_borne))",
                "post_condition_SMV_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0))))) -> (lift_mode = semi_wing_borne))",
                "post_condition_SMV_ft": "(preBool(FALSE,(((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0))) -> (lift_mode = semi_wing_borne))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (preBool(FALSE,(((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0))) -> (lift_mode = semi_wing_borne)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0))))) -> (lift_mode = semi_wing_borne)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((Y (((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0))) -> (lift_mode = semi_wing_borne)))",
                "CoCoSpecCode": "H((YtoPre((((lift_mode = semi_wing_borne) and (kias <= 100.0)) and (kias > 30.0))) => (lift_mode = semi_wing_borne)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (preBool(FALSE,(((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0))) -> (lift_mode = semi_wing_borne)))",
                "ftExpanded": "(LAST V (preBool(FALSE,(((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0))) -> (lift_mode = semi_wing_borne)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (preBool(FALSE,(((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0))) -> (lift_mode = semi_wing_borne)))",
                "component": "vehicle"
            },
            "_id": "79b7bd21-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_REACH_HOVER_15",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall within 15 ticks satisfy lift_mode = thrust_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "within",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "thrust_borne"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "duration": "15",
                "timingTextRange": [
                    18,
                    32
                ],
                "post_condition": "(lift_mode = thrust_borne)",
                "responseTextRange": [
                    34,
                    65
                ],
                "diagramVariables": " n = <b><i>15</i></b>, Response = <b><i>(lift_mode = thrust_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>15</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>15</i></b>). If the interval ends sooner than trigger+<b><i>15</i></b>, then RES need not hold.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(lift_mode = thrust_borne)",
                "post_condition_unexp_ft": "(lift_mode = thrust_borne)",
                "post_condition_SMV_pt": "(lift_mode = thrust_borne)",
                "post_condition_SMV_ft": "(lift_mode = thrust_borne)",
                "ft_fetched": "((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))",
                "ft": "((F[<=15] (lift_mode = thrust_borne)) | (F[<15] LAST))",
                "pt_fetched": "(H ((H (! $post_condition_unexp_pt$)) -> (O[<$duration$] FTP)))",
                "pt": "(H ((H (! (lift_mode = thrust_borne))) -> (O[<15] FTP)))",
                "ptExpanded_fetched": "(H ((H (! $post_condition_SMV_pt$)) -> (O[<$duration$] (! (Y TRUE)))))",
                "ptExpanded": "(H ((H (! (lift_mode = thrust_borne))) -> (O[0,14] (! (Y TRUE)))))",
                "CoCoSpecCode": "H((H(not ((lift_mode = thrust_borne))) => OT(14, 0, not (YtoPre(true)))))",
                "ftExpanded_fetched": "((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))",
                "ftExpandedUnoptimized": "((F[0,15] (lift_mode = thrust_borne)) | (F[0,14] LAST))",
                "ftExpanded": "((F[0,15] (lift_mode = thrust_borne)) | (F[0,14] LAST))",
                "ftInfAUExpanded_fetched": "(F[<=$duration$] $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(F[0,15] (lift_mode = thrust_borne))",
                "component": "vehicle"
            },
            "_id": "79b7e430-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_FCS_TURN_OFF",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Upon fcs & kias < 30.0 the vehicle shall at the next timepoint satisfy !fcs",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "fcs",
                    "kias"
                ],
                "qualifier_word": "upon",
                "pre_condition": "(fcs & kias < 30.0)",
                "regular_condition": "(fcs & kias < 30.0)",
                "conditionTextRange": [
                    0,
                    21
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    23,
                    33
                ],
                "timingTextRange": [
                    41,
                    61
                ],
                "post_condition": "(! fcs)",
                "responseTextRange": [
                    63,
                    74
                ],
                "diagramVariables": "TC = <b><i>(fcs & kias < 30.0)</i></b>, Response = <b><i>(! fcs)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(fcs & kias < 30.0)</i></b> is true and any point in the interval where <b><i>(fcs & kias < 30.0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "(fcs & (kias < 30.0))",
                "regular_condition_unexp_ft": "(fcs & (kias < 30.0))",
                "regular_condition_SMV_pt": "(fcs & (kias < 30.0))",
                "regular_condition_SMV_ft": "(fcs & (kias < 30.0))",
                "post_condition_unexp_pt": "(! fcs)",
                "post_condition_unexp_ft": "(! fcs)",
                "post_condition_SMV_pt": "(! fcs)",
                "post_condition_SMV_ft": "(! fcs)",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
                "ft": "((LAST V (((! (fcs & (kias < 30.0))) & ((! LAST) & (X (fcs & (kias < 30.0))))) -> (X (LAST | (X (! fcs)))))) & ((fcs & (kias < 30.0)) -> (LAST | (X (! fcs)))))",
                "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
                "pt": "(H ((Y ((fcs & (kias < 30.0)) & ((Y (! (fcs & (kias < 30.0)))) | FTP))) -> ((! fcs) | FTP)))",
                "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
                "ptExpanded": "(H ((Y ((fcs & (kias < 30.0)) & (Z (! (fcs & (kias < 30.0)))))) -> ((! fcs) | (! (Y TRUE)))))",
                "CoCoSpecCode": "H((YtoPre(((fcs and (kias < 30.0)) and ZtoPre(not ((fcs and (kias < 30.0)))))) => (not (fcs) or not (YtoPre(true)))))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "((LAST V (((! (fcs & (kias < 30.0))) & ((! LAST) & (X (fcs & (kias < 30.0))))) -> (X (LAST | (X (! fcs)))))) & ((fcs & (kias < 30.0)) -> (LAST | (X (! fcs)))))",
                "ftExpanded": "((LAST V (((! (fcs & (kias < 30.0))) & ((! LAST) & (X (fcs & (kias < 30.0))))) -> (X (LAST | (X (! fcs)))))) & ((fcs & (kias < 30.0)) -> (LAST | (X (! fcs)))))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
                "ftInfAUExpanded": "((G (((! (fcs & (kias < 30.0))) & (X (fcs & (kias < 30.0)))) -> (X (X (! fcs))))) & ((fcs & (kias < 30.0)) -> (X (! fcs))))",
                "component": "vehicle"
            },
            "_id": "79b7e431-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_DR_STAY_OFF",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy if preBool(false, !dr & kias >= 60.0) then !dr",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "dr",
                    "kias"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(preBool ( false , ! dr & kias >= 60.0 ) => ! dr)",
                "responseTextRange": [
                    25,
                    78
                ],
                "diagramVariables": "Response = <b><i>(preBool ( false , ! dr & kias >= 60.0 ) => ! dr)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y ((! dr) & (kias >= 60.0))))) -> (! dr))",
                "post_condition_unexp_ft": "(preBool(FALSE,((! dr) & (kias >= 60.0))) -> (! dr))",
                "post_condition_SMV_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y ((! dr) & (kias >= 60.0))))) -> (! dr))",
                "post_condition_SMV_ft": "(preBool(FALSE,((! dr) & (kias >= 60.0))) -> (! dr))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (preBool(FALSE,((! dr) & (kias >= 60.0))) -> (! dr)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y ((! dr) & (kias >= 60.0))))) -> (! dr)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((Y ((! dr) & (kias >= 60.0))) -> (! dr)))",
                "CoCoSpecCode": "H((YtoPre((not (dr) and (kias >= 60.0))) => not (dr)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (preBool(FALSE,((! dr) & (kias >= 60.0))) -> (! dr)))",
                "ftExpanded": "(LAST V (preBool(FALSE,((! dr) & (kias >= 60.0))) -> (! dr)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (preBool(FALSE,((! dr) & (kias >= 60.0))) -> (! dr)))",
                "component": "vehicle"
            },
            "_id": "79b80b40-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_REACH_HOVER_10",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall within 10 ticks satisfy lift_mode = thrust_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "within",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "thrust_borne"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "duration": "10",
                "timingTextRange": [
                    18,
                    32
                ],
                "post_condition": "(lift_mode = thrust_borne)",
                "responseTextRange": [
                    34,
                    65
                ],
                "diagramVariables": " n = <b><i>10</i></b>, Response = <b><i>(lift_mode = thrust_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>10</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>10</i></b>). If the interval ends sooner than trigger+<b><i>10</i></b>, then RES need not hold.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(lift_mode = thrust_borne)",
                "post_condition_unexp_ft": "(lift_mode = thrust_borne)",
                "post_condition_SMV_pt": "(lift_mode = thrust_borne)",
                "post_condition_SMV_ft": "(lift_mode = thrust_borne)",
                "ft_fetched": "((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))",
                "ft": "((F[<=10] (lift_mode = thrust_borne)) | (F[<10] LAST))",
                "pt_fetched": "(H ((H (! $post_condition_unexp_pt$)) -> (O[<$duration$] FTP)))",
                "pt": "(H ((H (! (lift_mode = thrust_borne))) -> (O[<10] FTP)))",
                "ptExpanded_fetched": "(H ((H (! $post_condition_SMV_pt$)) -> (O[<$duration$] (! (Y TRUE)))))",
                "ptExpanded": "(H ((H (! (lift_mode = thrust_borne))) -> (O[0,9] (! (Y TRUE)))))",
                "CoCoSpecCode": "H((H(not ((lift_mode = thrust_borne))) => OT(9, 0, not (YtoPre(true)))))",
                "ftExpanded_fetched": "((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))",
                "ftExpandedUnoptimized": "((F[0,10] (lift_mode = thrust_borne)) | (F[0,9] LAST))",
                "ftExpanded": "((F[0,10] (lift_mode = thrust_borne)) | (F[0,9] LAST))",
                "ftInfAUExpanded_fetched": "(F[<=$duration$] $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(F[0,10] (lift_mode = thrust_borne))",
                "component": "vehicle"
            },
            "_id": "79b80b41-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_REACH_HOVER_12",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall within 12 ticks satisfy lift_mode = thrust_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "within",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "thrust_borne"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "duration": "12",
                "timingTextRange": [
                    18,
                    32
                ],
                "post_condition": "(lift_mode = thrust_borne)",
                "responseTextRange": [
                    34,
                    65
                ],
                "diagramVariables": " n = <b><i>12</i></b>, Response = <b><i>(lift_mode = thrust_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>12</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>12</i></b>). If the interval ends sooner than trigger+<b><i>12</i></b>, then RES need not hold.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(lift_mode = thrust_borne)",
                "post_condition_unexp_ft": "(lift_mode = thrust_borne)",
                "post_condition_SMV_pt": "(lift_mode = thrust_borne)",
                "post_condition_SMV_ft": "(lift_mode = thrust_borne)",
                "ft_fetched": "((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))",
                "ft": "((F[<=12] (lift_mode = thrust_borne)) | (F[<12] LAST))",
                "pt_fetched": "(H ((H (! $post_condition_unexp_pt$)) -> (O[<$duration$] FTP)))",
                "pt": "(H ((H (! (lift_mode = thrust_borne))) -> (O[<12] FTP)))",
                "ptExpanded_fetched": "(H ((H (! $post_condition_SMV_pt$)) -> (O[<$duration$] (! (Y TRUE)))))",
                "ptExpanded": "(H ((H (! (lift_mode = thrust_borne))) -> (O[0,11] (! (Y TRUE)))))",
                "CoCoSpecCode": "H((H(not ((lift_mode = thrust_borne))) => OT(11, 0, not (YtoPre(true)))))",
                "ftExpanded_fetched": "((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))",
                "ftExpandedUnoptimized": "((F[0,12] (lift_mode = thrust_borne)) | (F[0,11] LAST))",
                "ftExpanded": "((F[0,12] (lift_mode = thrust_borne)) | (F[0,11] LAST))",
                "ftInfAUExpanded_fetched": "(F[<=$duration$] $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(F[0,12] (lift_mode = thrust_borne))",
                "component": "vehicle"
            },
            "_id": "79b83250-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_REACH_HOVER_11",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall within 11 ticks satisfy lift_mode = thrust_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "within",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "thrust_borne"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "duration": "11",
                "timingTextRange": [
                    18,
                    32
                ],
                "post_condition": "(lift_mode = thrust_borne)",
                "responseTextRange": [
                    34,
                    65
                ],
                "diagramVariables": " n = <b><i>11</i></b>, Response = <b><i>(lift_mode = thrust_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>11</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>11</i></b>). If the interval ends sooner than trigger+<b><i>11</i></b>, then RES need not hold.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(lift_mode = thrust_borne)",
                "post_condition_unexp_ft": "(lift_mode = thrust_borne)",
                "post_condition_SMV_pt": "(lift_mode = thrust_borne)",
                "post_condition_SMV_ft": "(lift_mode = thrust_borne)",
                "ft_fetched": "((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))",
                "ft": "((F[<=11] (lift_mode = thrust_borne)) | (F[<11] LAST))",
                "pt_fetched": "(H ((H (! $post_condition_unexp_pt$)) -> (O[<$duration$] FTP)))",
                "pt": "(H ((H (! (lift_mode = thrust_borne))) -> (O[<11] FTP)))",
                "ptExpanded_fetched": "(H ((H (! $post_condition_SMV_pt$)) -> (O[<$duration$] (! (Y TRUE)))))",
                "ptExpanded": "(H ((H (! (lift_mode = thrust_borne))) -> (O[0,10] (! (Y TRUE)))))",
                "CoCoSpecCode": "H((H(not ((lift_mode = thrust_borne))) => OT(10, 0, not (YtoPre(true)))))",
                "ftExpanded_fetched": "((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))",
                "ftExpandedUnoptimized": "((F[0,11] (lift_mode = thrust_borne)) | (F[0,10] LAST))",
                "ftExpanded": "((F[0,11] (lift_mode = thrust_borne)) | (F[0,10] LAST))",
                "ftInfAUExpanded_fetched": "(F[<=$duration$] $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(F[0,11] (lift_mode = thrust_borne))",
                "component": "vehicle"
            },
            "_id": "79b83251-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_REARPROP",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy rearprop xor hover_control_mode",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "rearprop",
                    "hover_control_mode"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(rearprop xor hover_control_mode)",
                "responseTextRange": [
                    25,
                    63
                ],
                "diagramVariables": "Response = <b><i>(rearprop xor hover_control_mode)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(rearprop xor hover_control_mode)",
                "post_condition_unexp_ft": "(rearprop xor hover_control_mode)",
                "post_condition_SMV_pt": "(rearprop xor hover_control_mode)",
                "post_condition_SMV_ft": "(rearprop xor hover_control_mode)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (rearprop xor hover_control_mode))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (rearprop xor hover_control_mode))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (rearprop xor hover_control_mode))",
                "CoCoSpecCode": "H((rearprop xor hover_control_mode))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (rearprop xor hover_control_mode))",
                "ftExpanded": "(LAST V (rearprop xor hover_control_mode))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (rearprop xor hover_control_mode))",
                "component": "vehicle"
            },
            "_id": "79b85960-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_SWB_TO_STB",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Upon lift_mode = semi_wing_borne & kias <= 30.0 the vehicle shall at  the next timepoint satisfy lift_mode = semi_thrust_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "semi_wing_borne",
                    "kias",
                    "semi_thrust_borne"
                ],
                "qualifier_word": "upon",
                "pre_condition": "(lift_mode = semi_wing_borne & kias <= 30.0)",
                "regular_condition": "(lift_mode = semi_wing_borne & kias <= 30.0)",
                "conditionTextRange": [
                    0,
                    46
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    48,
                    58
                ],
                "timingTextRange": [
                    66,
                    87
                ],
                "post_condition": "(lift_mode = semi_thrust_borne)",
                "responseTextRange": [
                    89,
                    125
                ],
                "diagramVariables": "TC = <b><i>(lift_mode = semi_wing_borne & kias <= 30.0)</i></b>, Response = <b><i>(lift_mode = semi_thrust_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(lift_mode = semi_wing_borne & kias <= 30.0)</i></b> is true and any point in the interval where <b><i>(lift_mode = semi_wing_borne & kias <= 30.0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "((lift_mode = semi_wing_borne) & (kias <= 30.0))",
                "regular_condition_unexp_ft": "((lift_mode = semi_wing_borne) & (kias <= 30.0))",
                "regular_condition_SMV_pt": "((lift_mode = semi_wing_borne) & (kias <= 30.0))",
                "regular_condition_SMV_ft": "((lift_mode = semi_wing_borne) & (kias <= 30.0))",
                "post_condition_unexp_pt": "(lift_mode = semi_thrust_borne)",
                "post_condition_unexp_ft": "(lift_mode = semi_thrust_borne)",
                "post_condition_SMV_pt": "(lift_mode = semi_thrust_borne)",
                "post_condition_SMV_ft": "(lift_mode = semi_thrust_borne)",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
                "ft": "((LAST V (((! ((lift_mode = semi_wing_borne) & (kias <= 30.0))) & ((! LAST) & (X ((lift_mode = semi_wing_borne) & (kias <= 30.0))))) -> (X (LAST | (X (lift_mode = semi_thrust_borne)))))) & (((lift_mode = semi_wing_borne) & (kias <= 30.0)) -> (LAST | (X (lift_mode = semi_thrust_borne)))))",
                "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
                "pt": "(H ((Y (((lift_mode = semi_wing_borne) & (kias <= 30.0)) & ((Y (! ((lift_mode = semi_wing_borne) & (kias <= 30.0)))) | FTP))) -> ((lift_mode = semi_thrust_borne) | FTP)))",
                "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
                "ptExpanded": "(H ((Y (((lift_mode = semi_wing_borne) & (kias <= 30.0)) & (Z (! ((lift_mode = semi_wing_borne) & (kias <= 30.0)))))) -> ((lift_mode = semi_thrust_borne) | (! (Y TRUE)))))",
                "CoCoSpecCode": "H((YtoPre((((lift_mode = semi_wing_borne) and (kias <= 30.0)) and ZtoPre(not (((lift_mode = semi_wing_borne) and (kias <= 30.0)))))) => ((lift_mode = semi_thrust_borne) or not (YtoPre(true)))))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "((LAST V (((! ((lift_mode = semi_wing_borne) & (kias <= 30.0))) & ((! LAST) & (X ((lift_mode = semi_wing_borne) & (kias <= 30.0))))) -> (X (LAST | (X (lift_mode = semi_thrust_borne)))))) & (((lift_mode = semi_wing_borne) & (kias <= 30.0)) -> (LAST | (X (lift_mode = semi_thrust_borne)))))",
                "ftExpanded": "((LAST V (((! ((lift_mode = semi_wing_borne) & (kias <= 30.0))) & ((! LAST) & (X ((lift_mode = semi_wing_borne) & (kias <= 30.0))))) -> (X (LAST | (X (lift_mode = semi_thrust_borne)))))) & (((lift_mode = semi_wing_borne) & (kias <= 30.0)) -> (LAST | (X (lift_mode = semi_thrust_borne)))))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
                "ftInfAUExpanded": "((G (((! ((lift_mode = semi_wing_borne) & (kias <= 30.0))) & (X ((lift_mode = semi_wing_borne) & (kias <= 30.0)))) -> (X (X (lift_mode = semi_thrust_borne))))) & (((lift_mode = semi_wing_borne) & (kias <= 30.0)) -> (X (lift_mode = semi_thrust_borne))))",
                "component": "vehicle"
            },
            "_id": "79b85961-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_INIT_FCS",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall immediately satisfy fcs <=> (kias > 40.0)",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "immediately",
                "response": "satisfaction",
                "variables": [
                    "fcs",
                    "kias"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    28
                ],
                "post_condition": "(fcs <=> ( kias > 40.0 ))",
                "responseTextRange": [
                    30,
                    58
                ],
                "diagramVariables": "Response = <b><i>(fcs <=> ( kias > 40.0 ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(fcs <-> (kias > 40.0))",
                "post_condition_unexp_ft": "(fcs <-> (kias > 40.0))",
                "post_condition_SMV_pt": "(fcs <-> (kias > 40.0))",
                "post_condition_SMV_ft": "(fcs <-> (kias > 40.0))",
                "ft_fetched": "$post_condition_unexp_ft$",
                "ft": "(fcs <-> (kias > 40.0))",
                "pt_fetched": "(H (FTP -> $post_condition_unexp_pt$))",
                "pt": "(H (FTP -> (fcs <-> (kias > 40.0))))",
                "ptExpanded_fetched": "(H ((! (Y TRUE)) -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((! (Y TRUE)) -> (fcs <-> (kias > 40.0))))",
                "CoCoSpecCode": "H((not (YtoPre(true)) => (fcs = (kias > 40.0))))",
                "ftExpanded_fetched": "$post_condition_SMV_ft$",
                "ftExpandedUnoptimized": "(fcs <-> (kias > 40.0))",
                "ftExpanded": "(fcs <-> (kias > 40.0))",
                "ftInfAUExpanded_fetched": "$post_condition_SMV_ft$",
                "ftInfAUExpanded": "(fcs <-> (kias > 40.0))",
                "component": "vehicle"
            },
            "_id": "79b88070-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_SWB_STAY_ON_until",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Upon lift_mode = semi_wing_borne & 30.0 < kias & kias <= 100.0 the vehicle shall until lift_mode = semi_wing_borne & (kias <= 30.0 | kias > 100.0) satisfy lift_mode = semi_wing_borne",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "until",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "semi_wing_borne",
                    "kias"
                ],
                "qualifier_word": "upon",
                "pre_condition": "(lift_mode = semi_wing_borne & 30.0 < kias & kias <= 100.0)",
                "regular_condition": "(lift_mode = semi_wing_borne & 30.0 < kias & kias <= 100.0)",
                "conditionTextRange": [
                    0,
                    61
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    63,
                    73
                ],
                "stop_condition": "(lift_mode = semi_wing_borne & ( kias <= 30.0 | kias > 100.0 ))",
                "timingTextRange": [
                    81,
                    145
                ],
                "post_condition": "(lift_mode = semi_wing_borne)",
                "responseTextRange": [
                    147,
                    181
                ],
                "diagramVariables": "TC = <b><i>(lift_mode = semi_wing_borne & 30.0 < kias & kias <= 100.0)</i></b>, SC = <b><i>(lift_mode = semi_wing_borne & ( kias <= 30.0 | kias > 100.0 ))</i></b>, Response = <b><i>(lift_mode = semi_wing_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(lift_mode = semi_wing_borne & 30.0 < kias & kias <= 100.0)</i></b> is true and any point in the interval where <b><i>(lift_mode = semi_wing_borne & 30.0 < kias & kias <= 100.0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "(((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0))",
                "regular_condition_unexp_ft": "(((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0))",
                "regular_condition_SMV_pt": "(((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0))",
                "regular_condition_SMV_ft": "(((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0))",
                "post_condition_unexp_pt": "(lift_mode = semi_wing_borne)",
                "post_condition_unexp_ft": "(lift_mode = semi_wing_borne)",
                "post_condition_SMV_pt": "(lift_mode = semi_wing_borne)",
                "post_condition_SMV_ft": "(lift_mode = semi_wing_borne)",
                "stop_condition_unexp_pt": "((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0)))",
                "stop_condition_unexp_ft": "((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0)))",
                "stop_condition_SMV_pt": "((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0)))",
                "stop_condition_SMV_ft": "((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0)))",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($stop_condition_unexp_ft$ V ($post_condition_unexp_ft$ | $stop_condition_unexp_ft$)) | (LAST V $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($stop_condition_unexp_ft$ V ($post_condition_unexp_ft$ | $stop_condition_unexp_ft$)) | (LAST V $post_condition_unexp_ft$))))",
                "ft": "((LAST V (((! (((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0))) & ((! LAST) & (X (((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0))))) -> (X ((((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0))) V ((lift_mode = semi_wing_borne) | ((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0))))) | (LAST V (lift_mode = semi_wing_borne)))))) & ((((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0)) -> ((((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0))) V ((lift_mode = semi_wing_borne) | ((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0))))) | (LAST V (lift_mode = semi_wing_borne)))))",
                "pt_fetched": "(H ((H (! $regular_condition_unexp_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) -> $post_condition_unexp_pt$)))",
                "pt": "(H ((H (! (((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0)))) | (((! ((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0)))) S ((! ((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0)))) & ((((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0)) & ((Y (! (((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0)))) | FTP)))) -> (lift_mode = semi_wing_borne))))",
                "ptExpanded_fetched": "(H ((H (! $regular_condition_SMV_pt$)) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) -> $post_condition_SMV_pt$)))",
                "ptExpanded": "(H ((H (! (((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0)))) | (((! ((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0)))) S ((! ((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0)))) & ((((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0)) & (Z (! (((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0))))))) -> (lift_mode = semi_wing_borne))))",
                "CoCoSpecCode": "H((H(not ((((lift_mode = semi_wing_borne) and (30.0 < kias)) and (kias <= 100.0)))) or (SI(((((lift_mode = semi_wing_borne) and (30.0 < kias)) and (kias <= 100.0)) and ZtoPre(not ((((lift_mode = semi_wing_borne) and (30.0 < kias)) and (kias <= 100.0))))),not (((lift_mode = semi_wing_borne) and ((kias <= 30.0) or (kias > 100.0))))) => (lift_mode = semi_wing_borne))))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (LAST V $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (LAST V $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "((LAST V (((! (((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0))) & ((! LAST) & (X (((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0))))) -> (X ((((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0))) V ((lift_mode = semi_wing_borne) | ((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0))))) | (LAST V (lift_mode = semi_wing_borne)))))) & ((((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0)) -> ((((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0))) V ((lift_mode = semi_wing_borne) | ((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0))))) | (LAST V (lift_mode = semi_wing_borne)))))",
                "ftExpanded": "((LAST V (((! (((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0))) & ((! LAST) & (X (((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0))))) -> (X ((((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0))) V ((lift_mode = semi_wing_borne) | ((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0))))) | (LAST V (lift_mode = semi_wing_borne)))))) & ((((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0)) -> ((((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0))) V ((lift_mode = semi_wing_borne) | ((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0))))) | (LAST V (lift_mode = semi_wing_borne)))))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$))))",
                "ftInfAUExpanded": "((G (((! (((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0))) & (X (((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0)))) -> (X (((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0))) V ((lift_mode = semi_wing_borne) | ((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0)))))))) & ((((lift_mode = semi_wing_borne) & (30.0 < kias)) & (kias <= 100.0)) -> (((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0))) V ((lift_mode = semi_wing_borne) | ((lift_mode = semi_wing_borne) & ((kias <= 30.0) | (kias > 100.0)))))))",
                "component": "vehicle"
            },
            "_id": "79b88071-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_STB_TO_SWB",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Upon lift_mode = semi_thrust_borne & kias > 40.0 the vehicle shall at the next timepoint satisfy lift_mode = semi_wing_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "semi_thrust_borne",
                    "kias",
                    "semi_wing_borne"
                ],
                "qualifier_word": "upon",
                "pre_condition": "(lift_mode = semi_thrust_borne & kias > 40.0)",
                "regular_condition": "(lift_mode = semi_thrust_borne & kias > 40.0)",
                "conditionTextRange": [
                    0,
                    47
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    49,
                    59
                ],
                "timingTextRange": [
                    67,
                    87
                ],
                "post_condition": "(lift_mode = semi_wing_borne)",
                "responseTextRange": [
                    89,
                    123
                ],
                "diagramVariables": "TC = <b><i>(lift_mode = semi_thrust_borne & kias > 40.0)</i></b>, Response = <b><i>(lift_mode = semi_wing_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(lift_mode = semi_thrust_borne & kias > 40.0)</i></b> is true and any point in the interval where <b><i>(lift_mode = semi_thrust_borne & kias > 40.0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "((lift_mode = semi_thrust_borne) & (kias > 40.0))",
                "regular_condition_unexp_ft": "((lift_mode = semi_thrust_borne) & (kias > 40.0))",
                "regular_condition_SMV_pt": "((lift_mode = semi_thrust_borne) & (kias > 40.0))",
                "regular_condition_SMV_ft": "((lift_mode = semi_thrust_borne) & (kias > 40.0))",
                "post_condition_unexp_pt": "(lift_mode = semi_wing_borne)",
                "post_condition_unexp_ft": "(lift_mode = semi_wing_borne)",
                "post_condition_SMV_pt": "(lift_mode = semi_wing_borne)",
                "post_condition_SMV_ft": "(lift_mode = semi_wing_borne)",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
                "ft": "((LAST V (((! ((lift_mode = semi_thrust_borne) & (kias > 40.0))) & ((! LAST) & (X ((lift_mode = semi_thrust_borne) & (kias > 40.0))))) -> (X (LAST | (X (lift_mode = semi_wing_borne)))))) & (((lift_mode = semi_thrust_borne) & (kias > 40.0)) -> (LAST | (X (lift_mode = semi_wing_borne)))))",
                "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
                "pt": "(H ((Y (((lift_mode = semi_thrust_borne) & (kias > 40.0)) & ((Y (! ((lift_mode = semi_thrust_borne) & (kias > 40.0)))) | FTP))) -> ((lift_mode = semi_wing_borne) | FTP)))",
                "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
                "ptExpanded": "(H ((Y (((lift_mode = semi_thrust_borne) & (kias > 40.0)) & (Z (! ((lift_mode = semi_thrust_borne) & (kias > 40.0)))))) -> ((lift_mode = semi_wing_borne) | (! (Y TRUE)))))",
                "CoCoSpecCode": "H((YtoPre((((lift_mode = semi_thrust_borne) and (kias > 40.0)) and ZtoPre(not (((lift_mode = semi_thrust_borne) and (kias > 40.0)))))) => ((lift_mode = semi_wing_borne) or not (YtoPre(true)))))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "((LAST V (((! ((lift_mode = semi_thrust_borne) & (kias > 40.0))) & ((! LAST) & (X ((lift_mode = semi_thrust_borne) & (kias > 40.0))))) -> (X (LAST | (X (lift_mode = semi_wing_borne)))))) & (((lift_mode = semi_thrust_borne) & (kias > 40.0)) -> (LAST | (X (lift_mode = semi_wing_borne)))))",
                "ftExpanded": "((LAST V (((! ((lift_mode = semi_thrust_borne) & (kias > 40.0))) & ((! LAST) & (X ((lift_mode = semi_thrust_borne) & (kias > 40.0))))) -> (X (LAST | (X (lift_mode = semi_wing_borne)))))) & (((lift_mode = semi_thrust_borne) & (kias > 40.0)) -> (LAST | (X (lift_mode = semi_wing_borne)))))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
                "ftInfAUExpanded": "((G (((! ((lift_mode = semi_thrust_borne) & (kias > 40.0))) & (X ((lift_mode = semi_thrust_borne) & (kias > 40.0)))) -> (X (X (lift_mode = semi_wing_borne))))) & (((lift_mode = semi_thrust_borne) & (kias > 40.0)) -> (X (lift_mode = semi_wing_borne))))",
                "component": "vehicle"
            },
            "_id": "79b8a780-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_STB_STAY_ON_until",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Upon lift_mode = semi_thrust_borne & kias <= 40.0 & (!hover_control_mode | kgs > 20.0) the vehicle shall until lift_mode = semi_thrust_borne & (kias > 40.0 | (kgs <= 20.0 & hover_control_mode)) satisfy lift_mode = semi_thrust_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "until",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "semi_thrust_borne",
                    "kias",
                    "hover_control_mode",
                    "kgs"
                ],
                "qualifier_word": "upon",
                "pre_condition": "(lift_mode = semi_thrust_borne & kias <= 40.0 & ( ! hover_control_mode | kgs > 20.0 ))",
                "regular_condition": "(lift_mode = semi_thrust_borne & kias <= 40.0 & ( ! hover_control_mode | kgs > 20.0 ))",
                "conditionTextRange": [
                    0,
                    85
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    87,
                    97
                ],
                "stop_condition": "(lift_mode = semi_thrust_borne & ( kias > 40.0 | ( kgs <= 20.0 & hover_control_mode ) ))",
                "timingTextRange": [
                    105,
                    192
                ],
                "post_condition": "(lift_mode = semi_thrust_borne)",
                "responseTextRange": [
                    194,
                    230
                ],
                "diagramVariables": "TC = <b><i>(lift_mode = semi_thrust_borne & kias <= 40.0 & ( ! hover_control_mode | kgs > 20.0 ))</i></b>, SC = <b><i>(lift_mode = semi_thrust_borne & ( kias > 40.0 | ( kgs <= 20.0 & hover_control_mode ) ))</i></b>, Response = <b><i>(lift_mode = semi_thrust_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(lift_mode = semi_thrust_borne & kias <= 40.0 & ( ! hover_control_mode | kgs > 20.0 ))</i></b> is true and any point in the interval where <b><i>(lift_mode = semi_thrust_borne & kias <= 40.0 & ( ! hover_control_mode | kgs > 20.0 ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "(((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0)))",
                "regular_condition_unexp_ft": "(((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0)))",
                "regular_condition_SMV_pt": "(((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0)))",
                "regular_condition_SMV_ft": "(((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0)))",
                "post_condition_unexp_pt": "(lift_mode = semi_thrust_borne)",
                "post_condition_unexp_ft": "(lift_mode = semi_thrust_borne)",
                "post_condition_SMV_pt": "(lift_mode = semi_thrust_borne)",
                "post_condition_SMV_ft": "(lift_mode = semi_thrust_borne)",
                "stop_condition_unexp_pt": "((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode)))",
                "stop_condition_unexp_ft": "((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode)))",
                "stop_condition_SMV_pt": "((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode)))",
                "stop_condition_SMV_ft": "((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode)))",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($stop_condition_unexp_ft$ V ($post_condition_unexp_ft$ | $stop_condition_unexp_ft$)) | (LAST V $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($stop_condition_unexp_ft$ V ($post_condition_unexp_ft$ | $stop_condition_unexp_ft$)) | (LAST V $post_condition_unexp_ft$))))",
                "ft": "((LAST V (((! (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0)))) & ((! LAST) & (X (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0)))))) -> (X ((((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode))) V ((lift_mode = semi_thrust_borne) | ((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode))))) | (LAST V (lift_mode = semi_thrust_borne)))))) & ((((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0))) -> ((((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode))) V ((lift_mode = semi_thrust_borne) | ((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode))))) | (LAST V (lift_mode = semi_thrust_borne)))))",
                "pt_fetched": "(H ((H (! $regular_condition_unexp_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) -> $post_condition_unexp_pt$)))",
                "pt": "(H ((H (! (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0))))) | (((! ((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode)))) S ((! ((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode)))) & ((((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0))) & ((Y (! (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0))))) | FTP)))) -> (lift_mode = semi_thrust_borne))))",
                "ptExpanded_fetched": "(H ((H (! $regular_condition_SMV_pt$)) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) -> $post_condition_SMV_pt$)))",
                "ptExpanded": "(H ((H (! (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0))))) | (((! ((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode)))) S ((! ((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode)))) & ((((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0))) & (Z (! (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0)))))))) -> (lift_mode = semi_thrust_borne))))",
                "CoCoSpecCode": "H((H(not ((((lift_mode = semi_thrust_borne) and (kias <= 40.0)) and (not (hover_control_mode) or (kgs > 20.0))))) or (SI(((((lift_mode = semi_thrust_borne) and (kias <= 40.0)) and (not (hover_control_mode) or (kgs > 20.0))) and ZtoPre(not ((((lift_mode = semi_thrust_borne) and (kias <= 40.0)) and (not (hover_control_mode) or (kgs > 20.0)))))),not (((lift_mode = semi_thrust_borne) and ((kias > 40.0) or ((kgs <= 20.0) and hover_control_mode))))) => (lift_mode = semi_thrust_borne))))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (LAST V $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (LAST V $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "((LAST V (((! (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0)))) & ((! LAST) & (X (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0)))))) -> (X ((((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode))) V ((lift_mode = semi_thrust_borne) | ((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode))))) | (LAST V (lift_mode = semi_thrust_borne)))))) & ((((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0))) -> ((((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode))) V ((lift_mode = semi_thrust_borne) | ((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode))))) | (LAST V (lift_mode = semi_thrust_borne)))))",
                "ftExpanded": "((LAST V (((! (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0)))) & ((! LAST) & (X (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0)))))) -> (X ((((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode))) V ((lift_mode = semi_thrust_borne) | ((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode))))) | (LAST V (lift_mode = semi_thrust_borne)))))) & ((((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0))) -> ((((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode))) V ((lift_mode = semi_thrust_borne) | ((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode))))) | (LAST V (lift_mode = semi_thrust_borne)))))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$))))",
                "ftInfAUExpanded": "((G (((! (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0)))) & (X (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0))))) -> (X (((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode))) V ((lift_mode = semi_thrust_borne) | ((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode)))))))) & ((((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((! hover_control_mode) | (kgs > 20.0))) -> (((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode))) V ((lift_mode = semi_thrust_borne) | ((lift_mode = semi_thrust_borne) & ((kias > 40.0) | ((kgs <= 20.0) & hover_control_mode)))))))",
                "component": "vehicle"
            },
            "_id": "79b8a781-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_STB_TO_TB",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Upon lift_mode = semi_thrust_borne & hover_control_mode & kgs <= 20.0 the vehicle shall at the next timepoint satisfy lift_mode = thrust_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "semi_thrust_borne",
                    "hover_control_mode",
                    "kgs",
                    "thrust_borne"
                ],
                "qualifier_word": "upon",
                "pre_condition": "(lift_mode = semi_thrust_borne & hover_control_mode & kgs <= 20.0)",
                "regular_condition": "(lift_mode = semi_thrust_borne & hover_control_mode & kgs <= 20.0)",
                "conditionTextRange": [
                    0,
                    68
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    70,
                    80
                ],
                "timingTextRange": [
                    88,
                    108
                ],
                "post_condition": "(lift_mode = thrust_borne)",
                "responseTextRange": [
                    110,
                    141
                ],
                "diagramVariables": "TC = <b><i>(lift_mode = semi_thrust_borne & hover_control_mode & kgs <= 20.0)</i></b>, Response = <b><i>(lift_mode = thrust_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(lift_mode = semi_thrust_borne & hover_control_mode & kgs <= 20.0)</i></b> is true and any point in the interval where <b><i>(lift_mode = semi_thrust_borne & hover_control_mode & kgs <= 20.0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "(((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0))",
                "regular_condition_unexp_ft": "(((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0))",
                "regular_condition_SMV_pt": "(((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0))",
                "regular_condition_SMV_ft": "(((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0))",
                "post_condition_unexp_pt": "(lift_mode = thrust_borne)",
                "post_condition_unexp_ft": "(lift_mode = thrust_borne)",
                "post_condition_SMV_pt": "(lift_mode = thrust_borne)",
                "post_condition_SMV_ft": "(lift_mode = thrust_borne)",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
                "ft": "((LAST V (((! (((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0))) & ((! LAST) & (X (((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0))))) -> (X (LAST | (X (lift_mode = thrust_borne)))))) & ((((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0)) -> (LAST | (X (lift_mode = thrust_borne)))))",
                "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
                "pt": "(H ((Y ((((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0)) & ((Y (! (((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0)))) | FTP))) -> ((lift_mode = thrust_borne) | FTP)))",
                "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
                "ptExpanded": "(H ((Y ((((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0)) & (Z (! (((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0)))))) -> ((lift_mode = thrust_borne) | (! (Y TRUE)))))",
                "CoCoSpecCode": "H((YtoPre(((((lift_mode = semi_thrust_borne) and hover_control_mode) and (kgs <= 20.0)) and ZtoPre(not ((((lift_mode = semi_thrust_borne) and hover_control_mode) and (kgs <= 20.0)))))) => ((lift_mode = thrust_borne) or not (YtoPre(true)))))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "((LAST V (((! (((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0))) & ((! LAST) & (X (((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0))))) -> (X (LAST | (X (lift_mode = thrust_borne)))))) & ((((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0)) -> (LAST | (X (lift_mode = thrust_borne)))))",
                "ftExpanded": "((LAST V (((! (((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0))) & ((! LAST) & (X (((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0))))) -> (X (LAST | (X (lift_mode = thrust_borne)))))) & ((((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0)) -> (LAST | (X (lift_mode = thrust_borne)))))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
                "ftInfAUExpanded": "((G (((! (((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0))) & (X (((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0)))) -> (X (X (lift_mode = thrust_borne))))) & ((((lift_mode = semi_thrust_borne) & hover_control_mode) & (kgs <= 20.0)) -> (X (lift_mode = thrust_borne))))",
                "component": "vehicle"
            },
            "_id": "79b8ce90-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_SWB_TO_WB",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Upon lift_mode = semi_wing_borne & kias > 100.0 the vehicle shall at the next timepoint satisfy lift_mode = wing_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "semi_wing_borne",
                    "kias",
                    "wing_borne"
                ],
                "qualifier_word": "upon",
                "pre_condition": "(lift_mode = semi_wing_borne & kias > 100.0)",
                "regular_condition": "(lift_mode = semi_wing_borne & kias > 100.0)",
                "conditionTextRange": [
                    0,
                    46
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    48,
                    58
                ],
                "timingTextRange": [
                    66,
                    86
                ],
                "post_condition": "(lift_mode = wing_borne)",
                "responseTextRange": [
                    88,
                    117
                ],
                "diagramVariables": "TC = <b><i>(lift_mode = semi_wing_borne & kias > 100.0)</i></b>, Response = <b><i>(lift_mode = wing_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(lift_mode = semi_wing_borne & kias > 100.0)</i></b> is true and any point in the interval where <b><i>(lift_mode = semi_wing_borne & kias > 100.0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "((lift_mode = semi_wing_borne) & (kias > 100.0))",
                "regular_condition_unexp_ft": "((lift_mode = semi_wing_borne) & (kias > 100.0))",
                "regular_condition_SMV_pt": "((lift_mode = semi_wing_borne) & (kias > 100.0))",
                "regular_condition_SMV_ft": "((lift_mode = semi_wing_borne) & (kias > 100.0))",
                "post_condition_unexp_pt": "(lift_mode = wing_borne)",
                "post_condition_unexp_ft": "(lift_mode = wing_borne)",
                "post_condition_SMV_pt": "(lift_mode = wing_borne)",
                "post_condition_SMV_ft": "(lift_mode = wing_borne)",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
                "ft": "((LAST V (((! ((lift_mode = semi_wing_borne) & (kias > 100.0))) & ((! LAST) & (X ((lift_mode = semi_wing_borne) & (kias > 100.0))))) -> (X (LAST | (X (lift_mode = wing_borne)))))) & (((lift_mode = semi_wing_borne) & (kias > 100.0)) -> (LAST | (X (lift_mode = wing_borne)))))",
                "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
                "pt": "(H ((Y (((lift_mode = semi_wing_borne) & (kias > 100.0)) & ((Y (! ((lift_mode = semi_wing_borne) & (kias > 100.0)))) | FTP))) -> ((lift_mode = wing_borne) | FTP)))",
                "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
                "ptExpanded": "(H ((Y (((lift_mode = semi_wing_borne) & (kias > 100.0)) & (Z (! ((lift_mode = semi_wing_borne) & (kias > 100.0)))))) -> ((lift_mode = wing_borne) | (! (Y TRUE)))))",
                "CoCoSpecCode": "H((YtoPre((((lift_mode = semi_wing_borne) and (kias > 100.0)) and ZtoPre(not (((lift_mode = semi_wing_borne) and (kias > 100.0)))))) => ((lift_mode = wing_borne) or not (YtoPre(true)))))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "((LAST V (((! ((lift_mode = semi_wing_borne) & (kias > 100.0))) & ((! LAST) & (X ((lift_mode = semi_wing_borne) & (kias > 100.0))))) -> (X (LAST | (X (lift_mode = wing_borne)))))) & (((lift_mode = semi_wing_borne) & (kias > 100.0)) -> (LAST | (X (lift_mode = wing_borne)))))",
                "ftExpanded": "((LAST V (((! ((lift_mode = semi_wing_borne) & (kias > 100.0))) & ((! LAST) & (X ((lift_mode = semi_wing_borne) & (kias > 100.0))))) -> (X (LAST | (X (lift_mode = wing_borne)))))) & (((lift_mode = semi_wing_borne) & (kias > 100.0)) -> (LAST | (X (lift_mode = wing_borne)))))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
                "ftInfAUExpanded": "((G (((! ((lift_mode = semi_wing_borne) & (kias > 100.0))) & (X ((lift_mode = semi_wing_borne) & (kias > 100.0)))) -> (X (X (lift_mode = wing_borne))))) & (((lift_mode = semi_wing_borne) & (kias > 100.0)) -> (X (lift_mode = wing_borne))))",
                "component": "vehicle"
            },
            "_id": "79b8ce91-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_INIT_DR",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall immediately satisfy dr <=> (kias < 60.0)",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "immediately",
                "response": "satisfaction",
                "variables": [
                    "dr",
                    "kias"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    28
                ],
                "post_condition": "(dr <=> ( kias < 60.0 ))",
                "responseTextRange": [
                    30,
                    57
                ],
                "diagramVariables": "Response = <b><i>(dr <=> ( kias < 60.0 ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(dr <-> (kias < 60.0))",
                "post_condition_unexp_ft": "(dr <-> (kias < 60.0))",
                "post_condition_SMV_pt": "(dr <-> (kias < 60.0))",
                "post_condition_SMV_ft": "(dr <-> (kias < 60.0))",
                "ft_fetched": "$post_condition_unexp_ft$",
                "ft": "(dr <-> (kias < 60.0))",
                "pt_fetched": "(H (FTP -> $post_condition_unexp_pt$))",
                "pt": "(H (FTP -> (dr <-> (kias < 60.0))))",
                "ptExpanded_fetched": "(H ((! (Y TRUE)) -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((! (Y TRUE)) -> (dr <-> (kias < 60.0))))",
                "CoCoSpecCode": "H((not (YtoPre(true)) => (dr = (kias < 60.0))))",
                "ftExpanded_fetched": "$post_condition_SMV_ft$",
                "ftExpandedUnoptimized": "(dr <-> (kias < 60.0))",
                "ftExpanded": "(dr <-> (kias < 60.0))",
                "ftInfAUExpanded_fetched": "$post_condition_SMV_ft$",
                "ftInfAUExpanded": "(dr <-> (kias < 60.0))",
                "component": "vehicle"
            },
            "_id": "79b8f5a0-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_TB_TO_STB",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Upon lift_mode = thrust_borne & (!hover_control_mode |  kgs > 20.0) the vehicle shall at the next timepoint satisfy lift_mode = semi_thrust_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "thrust_borne",
                    "hover_control_mode",
                    "kgs",
                    "semi_thrust_borne"
                ],
                "qualifier_word": "upon",
                "pre_condition": "(lift_mode = thrust_borne & ( ! hover_control_mode | kgs > 20.0 ))",
                "regular_condition": "(lift_mode = thrust_borne & ( ! hover_control_mode | kgs > 20.0 ))",
                "conditionTextRange": [
                    0,
                    66
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    68,
                    78
                ],
                "timingTextRange": [
                    86,
                    106
                ],
                "post_condition": "(lift_mode = semi_thrust_borne)",
                "responseTextRange": [
                    108,
                    144
                ],
                "diagramVariables": "TC = <b><i>(lift_mode = thrust_borne & ( ! hover_control_mode | kgs > 20.0 ))</i></b>, Response = <b><i>(lift_mode = semi_thrust_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(lift_mode = thrust_borne & ( ! hover_control_mode | kgs > 20.0 ))</i></b> is true and any point in the interval where <b><i>(lift_mode = thrust_borne & ( ! hover_control_mode | kgs > 20.0 ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0)))",
                "regular_condition_unexp_ft": "((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0)))",
                "regular_condition_SMV_pt": "((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0)))",
                "regular_condition_SMV_ft": "((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0)))",
                "post_condition_unexp_pt": "(lift_mode = semi_thrust_borne)",
                "post_condition_unexp_ft": "(lift_mode = semi_thrust_borne)",
                "post_condition_SMV_pt": "(lift_mode = semi_thrust_borne)",
                "post_condition_SMV_ft": "(lift_mode = semi_thrust_borne)",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
                "ft": "((LAST V (((! ((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0)))) & ((! LAST) & (X ((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0)))))) -> (X (LAST | (X (lift_mode = semi_thrust_borne)))))) & (((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0))) -> (LAST | (X (lift_mode = semi_thrust_borne)))))",
                "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
                "pt": "(H ((Y (((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0))) & ((Y (! ((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0))))) | FTP))) -> ((lift_mode = semi_thrust_borne) | FTP)))",
                "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
                "ptExpanded": "(H ((Y (((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0))) & (Z (! ((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0))))))) -> ((lift_mode = semi_thrust_borne) | (! (Y TRUE)))))",
                "CoCoSpecCode": "H((YtoPre((((lift_mode = thrust_borne) and (not (hover_control_mode) or (kgs > 20.0))) and ZtoPre(not (((lift_mode = thrust_borne) and (not (hover_control_mode) or (kgs > 20.0))))))) => ((lift_mode = semi_thrust_borne) or not (YtoPre(true)))))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "((LAST V (((! ((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0)))) & ((! LAST) & (X ((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0)))))) -> (X (LAST | (X (lift_mode = semi_thrust_borne)))))) & (((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0))) -> (LAST | (X (lift_mode = semi_thrust_borne)))))",
                "ftExpanded": "((LAST V (((! ((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0)))) & ((! LAST) & (X ((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0)))))) -> (X (LAST | (X (lift_mode = semi_thrust_borne)))))) & (((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0))) -> (LAST | (X (lift_mode = semi_thrust_borne)))))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
                "ftInfAUExpanded": "((G (((! ((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0)))) & (X ((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0))))) -> (X (X (lift_mode = semi_thrust_borne))))) & (((lift_mode = thrust_borne) & ((! hover_control_mode) | (kgs > 20.0))) -> (X (lift_mode = semi_thrust_borne))))",
                "component": "vehicle"
            },
            "_id": "79b8f5a1-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_INIT_LIFT_MODE",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall immediately satisfy lift_mode = wing_borne <=> kias >= 90.0",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "immediately",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "wing_borne",
                    "kias"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    28
                ],
                "post_condition": "(lift_mode = wing_borne <=> kias >= 90.0)",
                "responseTextRange": [
                    30,
                    76
                ],
                "diagramVariables": "Response = <b><i>(lift_mode = wing_borne <=> kias >= 90.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((lift_mode = wing_borne) <-> (kias >= 90.0))",
                "post_condition_unexp_ft": "((lift_mode = wing_borne) <-> (kias >= 90.0))",
                "post_condition_SMV_pt": "((lift_mode = wing_borne) <-> (kias >= 90.0))",
                "post_condition_SMV_ft": "((lift_mode = wing_borne) <-> (kias >= 90.0))",
                "ft_fetched": "$post_condition_unexp_ft$",
                "ft": "((lift_mode = wing_borne) <-> (kias >= 90.0))",
                "pt_fetched": "(H (FTP -> $post_condition_unexp_pt$))",
                "pt": "(H (FTP -> ((lift_mode = wing_borne) <-> (kias >= 90.0))))",
                "ptExpanded_fetched": "(H ((! (Y TRUE)) -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((! (Y TRUE)) -> ((lift_mode = wing_borne) <-> (kias >= 90.0))))",
                "CoCoSpecCode": "H((not (YtoPre(true)) => ((lift_mode = wing_borne) = (kias >= 90.0))))",
                "ftExpanded_fetched": "$post_condition_SMV_ft$",
                "ftExpandedUnoptimized": "((lift_mode = wing_borne) <-> (kias >= 90.0))",
                "ftExpanded": "((lift_mode = wing_borne) <-> (kias >= 90.0))",
                "ftInfAUExpanded_fetched": "$post_condition_SMV_ft$",
                "ftInfAUExpanded": "((lift_mode = wing_borne) <-> (kias >= 90.0))",
                "component": "vehicle"
            },
            "_id": "79b91cb0-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_LIFT_MODE",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy lift_mode = thrust_borne | lift_mode = semi_thrust_borne | lift_mode = semi_wing_borne | lift_mode = wing_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "thrust_borne",
                    "semi_thrust_borne",
                    "semi_wing_borne",
                    "wing_borne"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(lift_mode = thrust_borne | lift_mode = semi_thrust_borne | lift_mode = semi_wing_borne | lift_mode = wing_borne)",
                "responseTextRange": [
                    25,
                    143
                ],
                "diagramVariables": "Response = <b><i>(lift_mode = thrust_borne | lift_mode = semi_thrust_borne | lift_mode = semi_wing_borne | lift_mode = wing_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((lift_mode = thrust_borne) | (lift_mode = semi_thrust_borne)) | (lift_mode = semi_wing_borne)) | (lift_mode = wing_borne))",
                "post_condition_unexp_ft": "((((lift_mode = thrust_borne) | (lift_mode = semi_thrust_borne)) | (lift_mode = semi_wing_borne)) | (lift_mode = wing_borne))",
                "post_condition_SMV_pt": "((((lift_mode = thrust_borne) | (lift_mode = semi_thrust_borne)) | (lift_mode = semi_wing_borne)) | (lift_mode = wing_borne))",
                "post_condition_SMV_ft": "((((lift_mode = thrust_borne) | (lift_mode = semi_thrust_borne)) | (lift_mode = semi_wing_borne)) | (lift_mode = wing_borne))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((((lift_mode = thrust_borne) | (lift_mode = semi_thrust_borne)) | (lift_mode = semi_wing_borne)) | (lift_mode = wing_borne)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((lift_mode = thrust_borne) | (lift_mode = semi_thrust_borne)) | (lift_mode = semi_wing_borne)) | (lift_mode = wing_borne)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((((lift_mode = thrust_borne) | (lift_mode = semi_thrust_borne)) | (lift_mode = semi_wing_borne)) | (lift_mode = wing_borne)))",
                "CoCoSpecCode": "H(((((lift_mode = thrust_borne) or (lift_mode = semi_thrust_borne)) or (lift_mode = semi_wing_borne)) or (lift_mode = wing_borne)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((((lift_mode = thrust_borne) | (lift_mode = semi_thrust_borne)) | (lift_mode = semi_wing_borne)) | (lift_mode = wing_borne)))",
                "ftExpanded": "(LAST V ((((lift_mode = thrust_borne) | (lift_mode = semi_thrust_borne)) | (lift_mode = semi_wing_borne)) | (lift_mode = wing_borne)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((((lift_mode = thrust_borne) | (lift_mode = semi_thrust_borne)) | (lift_mode = semi_wing_borne)) | (lift_mode = wing_borne)))",
                "component": "vehicle"
            },
            "_id": "79b91cb1-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_INIT_KIAS",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall immediately satisfy kias = 120.0",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "immediately",
                "response": "satisfaction",
                "variables": [
                    "kias"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    28
                ],
                "post_condition": "(kias = 120.0)",
                "responseTextRange": [
                    30,
                    49
                ],
                "diagramVariables": "Response = <b><i>(kias = 120.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(kias = 120.0)",
                "post_condition_unexp_ft": "(kias = 120.0)",
                "post_condition_SMV_pt": "(kias = 120.0)",
                "post_condition_SMV_ft": "(kias = 120.0)",
                "ft_fetched": "$post_condition_unexp_ft$",
                "ft": "(kias = 120.0)",
                "pt_fetched": "(H (FTP -> $post_condition_unexp_pt$))",
                "pt": "(H (FTP -> (kias = 120.0)))",
                "ptExpanded_fetched": "(H ((! (Y TRUE)) -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((! (Y TRUE)) -> (kias = 120.0)))",
                "CoCoSpecCode": "H((not (YtoPre(true)) => (kias = 120.0)))",
                "ftExpanded_fetched": "$post_condition_SMV_ft$",
                "ftExpandedUnoptimized": "(kias = 120.0)",
                "ftExpanded": "(kias = 120.0)",
                "ftInfAUExpanded_fetched": "$post_condition_SMV_ft$",
                "ftInfAUExpanded": "(kias = 120.0)",
                "component": "vehicle"
            },
            "_id": "79b943c0-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_TB_STAY_ON_until",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Upon lift_mode = thrust_borne & hover_control_mode & kgs <= 20.0 the vehicle shall until lift_mode = thrust_borne & (kgs > 20.0 | ! hover_control_mode) satisfy lift_mode = thrust_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "until",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "thrust_borne",
                    "hover_control_mode",
                    "kgs"
                ],
                "qualifier_word": "upon",
                "pre_condition": "(lift_mode = thrust_borne & hover_control_mode & kgs <= 20.0)",
                "regular_condition": "(lift_mode = thrust_borne & hover_control_mode & kgs <= 20.0)",
                "conditionTextRange": [
                    0,
                    63
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    65,
                    75
                ],
                "stop_condition": "(lift_mode = thrust_borne & ( kgs > 20.0 | ! hover_control_mode ))",
                "timingTextRange": [
                    83,
                    150
                ],
                "post_condition": "(lift_mode = thrust_borne)",
                "responseTextRange": [
                    152,
                    183
                ],
                "diagramVariables": "TC = <b><i>(lift_mode = thrust_borne & hover_control_mode & kgs <= 20.0)</i></b>, SC = <b><i>(lift_mode = thrust_borne & ( kgs > 20.0 | ! hover_control_mode ))</i></b>, Response = <b><i>(lift_mode = thrust_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(lift_mode = thrust_borne & hover_control_mode & kgs <= 20.0)</i></b> is true and any point in the interval where <b><i>(lift_mode = thrust_borne & hover_control_mode & kgs <= 20.0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "(((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0))",
                "regular_condition_unexp_ft": "(((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0))",
                "regular_condition_SMV_pt": "(((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0))",
                "regular_condition_SMV_ft": "(((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0))",
                "post_condition_unexp_pt": "(lift_mode = thrust_borne)",
                "post_condition_unexp_ft": "(lift_mode = thrust_borne)",
                "post_condition_SMV_pt": "(lift_mode = thrust_borne)",
                "post_condition_SMV_ft": "(lift_mode = thrust_borne)",
                "stop_condition_unexp_pt": "((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode)))",
                "stop_condition_unexp_ft": "((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode)))",
                "stop_condition_SMV_pt": "((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode)))",
                "stop_condition_SMV_ft": "((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode)))",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($stop_condition_unexp_ft$ V ($post_condition_unexp_ft$ | $stop_condition_unexp_ft$)) | (LAST V $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($stop_condition_unexp_ft$ V ($post_condition_unexp_ft$ | $stop_condition_unexp_ft$)) | (LAST V $post_condition_unexp_ft$))))",
                "ft": "((LAST V (((! (((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0))) & ((! LAST) & (X (((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0))))) -> (X ((((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode))) V ((lift_mode = thrust_borne) | ((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode))))) | (LAST V (lift_mode = thrust_borne)))))) & ((((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0)) -> ((((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode))) V ((lift_mode = thrust_borne) | ((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode))))) | (LAST V (lift_mode = thrust_borne)))))",
                "pt_fetched": "(H ((H (! $regular_condition_unexp_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) -> $post_condition_unexp_pt$)))",
                "pt": "(H ((H (! (((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0)))) | (((! ((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode)))) S ((! ((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode)))) & ((((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0)) & ((Y (! (((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0)))) | FTP)))) -> (lift_mode = thrust_borne))))",
                "ptExpanded_fetched": "(H ((H (! $regular_condition_SMV_pt$)) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) -> $post_condition_SMV_pt$)))",
                "ptExpanded": "(H ((H (! (((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0)))) | (((! ((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode)))) S ((! ((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode)))) & ((((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0)) & (Z (! (((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0))))))) -> (lift_mode = thrust_borne))))",
                "CoCoSpecCode": "H((H(not ((((lift_mode = thrust_borne) and hover_control_mode) and (kgs <= 20.0)))) or (SI(((((lift_mode = thrust_borne) and hover_control_mode) and (kgs <= 20.0)) and ZtoPre(not ((((lift_mode = thrust_borne) and hover_control_mode) and (kgs <= 20.0))))),not (((lift_mode = thrust_borne) and ((kgs > 20.0) or not (hover_control_mode))))) => (lift_mode = thrust_borne))))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (LAST V $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (LAST V $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "((LAST V (((! (((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0))) & ((! LAST) & (X (((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0))))) -> (X ((((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode))) V ((lift_mode = thrust_borne) | ((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode))))) | (LAST V (lift_mode = thrust_borne)))))) & ((((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0)) -> ((((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode))) V ((lift_mode = thrust_borne) | ((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode))))) | (LAST V (lift_mode = thrust_borne)))))",
                "ftExpanded": "((LAST V (((! (((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0))) & ((! LAST) & (X (((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0))))) -> (X ((((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode))) V ((lift_mode = thrust_borne) | ((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode))))) | (LAST V (lift_mode = thrust_borne)))))) & ((((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0)) -> ((((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode))) V ((lift_mode = thrust_borne) | ((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode))))) | (LAST V (lift_mode = thrust_borne)))))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$))))",
                "ftInfAUExpanded": "((G (((! (((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0))) & (X (((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0)))) -> (X (((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode))) V ((lift_mode = thrust_borne) | ((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode)))))))) & ((((lift_mode = thrust_borne) & hover_control_mode) & (kgs <= 20.0)) -> (((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode))) V ((lift_mode = thrust_borne) | ((lift_mode = thrust_borne) & ((kgs > 20.0) | (! hover_control_mode)))))))",
                "component": "vehicle"
            },
            "_id": "79b943c1-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_WB_STAY_ON_until",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Upon lift_mode = wing_borne & kias > 90.0 the vehicle shall until lift_mode = wing_borne & kias <= 90.0 satisfy lift_mode = wing_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "until",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "wing_borne",
                    "kias"
                ],
                "qualifier_word": "upon",
                "pre_condition": "(lift_mode = wing_borne & kias > 90.0)",
                "regular_condition": "(lift_mode = wing_borne & kias > 90.0)",
                "conditionTextRange": [
                    0,
                    40
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    42,
                    52
                ],
                "stop_condition": "(lift_mode = wing_borne & kias <= 90.0)",
                "timingTextRange": [
                    60,
                    102
                ],
                "post_condition": "(lift_mode = wing_borne)",
                "responseTextRange": [
                    104,
                    133
                ],
                "diagramVariables": "TC = <b><i>(lift_mode = wing_borne & kias > 90.0)</i></b>, SC = <b><i>(lift_mode = wing_borne & kias <= 90.0)</i></b>, Response = <b><i>(lift_mode = wing_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(lift_mode = wing_borne & kias > 90.0)</i></b> is true and any point in the interval where <b><i>(lift_mode = wing_borne & kias > 90.0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "((lift_mode = wing_borne) & (kias > 90.0))",
                "regular_condition_unexp_ft": "((lift_mode = wing_borne) & (kias > 90.0))",
                "regular_condition_SMV_pt": "((lift_mode = wing_borne) & (kias > 90.0))",
                "regular_condition_SMV_ft": "((lift_mode = wing_borne) & (kias > 90.0))",
                "post_condition_unexp_pt": "(lift_mode = wing_borne)",
                "post_condition_unexp_ft": "(lift_mode = wing_borne)",
                "post_condition_SMV_pt": "(lift_mode = wing_borne)",
                "post_condition_SMV_ft": "(lift_mode = wing_borne)",
                "stop_condition_unexp_pt": "((lift_mode = wing_borne) & (kias <= 90.0))",
                "stop_condition_unexp_ft": "((lift_mode = wing_borne) & (kias <= 90.0))",
                "stop_condition_SMV_pt": "((lift_mode = wing_borne) & (kias <= 90.0))",
                "stop_condition_SMV_ft": "((lift_mode = wing_borne) & (kias <= 90.0))",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($stop_condition_unexp_ft$ V ($post_condition_unexp_ft$ | $stop_condition_unexp_ft$)) | (LAST V $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($stop_condition_unexp_ft$ V ($post_condition_unexp_ft$ | $stop_condition_unexp_ft$)) | (LAST V $post_condition_unexp_ft$))))",
                "ft": "((LAST V (((! ((lift_mode = wing_borne) & (kias > 90.0))) & ((! LAST) & (X ((lift_mode = wing_borne) & (kias > 90.0))))) -> (X ((((lift_mode = wing_borne) & (kias <= 90.0)) V ((lift_mode = wing_borne) | ((lift_mode = wing_borne) & (kias <= 90.0)))) | (LAST V (lift_mode = wing_borne)))))) & (((lift_mode = wing_borne) & (kias > 90.0)) -> ((((lift_mode = wing_borne) & (kias <= 90.0)) V ((lift_mode = wing_borne) | ((lift_mode = wing_borne) & (kias <= 90.0)))) | (LAST V (lift_mode = wing_borne)))))",
                "pt_fetched": "(H ((H (! $regular_condition_unexp_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) -> $post_condition_unexp_pt$)))",
                "pt": "(H ((H (! ((lift_mode = wing_borne) & (kias > 90.0)))) | (((! ((lift_mode = wing_borne) & (kias <= 90.0))) S ((! ((lift_mode = wing_borne) & (kias <= 90.0))) & (((lift_mode = wing_borne) & (kias > 90.0)) & ((Y (! ((lift_mode = wing_borne) & (kias > 90.0)))) | FTP)))) -> (lift_mode = wing_borne))))",
                "ptExpanded_fetched": "(H ((H (! $regular_condition_SMV_pt$)) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$))))) -> $post_condition_SMV_pt$)))",
                "ptExpanded": "(H ((H (! ((lift_mode = wing_borne) & (kias > 90.0)))) | (((! ((lift_mode = wing_borne) & (kias <= 90.0))) S ((! ((lift_mode = wing_borne) & (kias <= 90.0))) & (((lift_mode = wing_borne) & (kias > 90.0)) & (Z (! ((lift_mode = wing_borne) & (kias > 90.0))))))) -> (lift_mode = wing_borne))))",
                "CoCoSpecCode": "H((H(not (((lift_mode = wing_borne) and (kias > 90.0)))) or (SI((((lift_mode = wing_borne) and (kias > 90.0)) and ZtoPre(not (((lift_mode = wing_borne) and (kias > 90.0))))),not (((lift_mode = wing_borne) and (kias <= 90.0)))) => (lift_mode = wing_borne))))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (LAST V $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (LAST V $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "((LAST V (((! ((lift_mode = wing_borne) & (kias > 90.0))) & ((! LAST) & (X ((lift_mode = wing_borne) & (kias > 90.0))))) -> (X ((((lift_mode = wing_borne) & (kias <= 90.0)) V ((lift_mode = wing_borne) | ((lift_mode = wing_borne) & (kias <= 90.0)))) | (LAST V (lift_mode = wing_borne)))))) & (((lift_mode = wing_borne) & (kias > 90.0)) -> ((((lift_mode = wing_borne) & (kias <= 90.0)) V ((lift_mode = wing_borne) | ((lift_mode = wing_borne) & (kias <= 90.0)))) | (LAST V (lift_mode = wing_borne)))))",
                "ftExpanded": "((LAST V (((! ((lift_mode = wing_borne) & (kias > 90.0))) & ((! LAST) & (X ((lift_mode = wing_borne) & (kias > 90.0))))) -> (X ((((lift_mode = wing_borne) & (kias <= 90.0)) V ((lift_mode = wing_borne) | ((lift_mode = wing_borne) & (kias <= 90.0)))) | (LAST V (lift_mode = wing_borne)))))) & (((lift_mode = wing_borne) & (kias > 90.0)) -> ((((lift_mode = wing_borne) & (kias <= 90.0)) V ((lift_mode = wing_borne) | ((lift_mode = wing_borne) & (kias <= 90.0)))) | (LAST V (lift_mode = wing_borne)))))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$))))",
                "ftInfAUExpanded": "((G (((! ((lift_mode = wing_borne) & (kias > 90.0))) & (X ((lift_mode = wing_borne) & (kias > 90.0)))) -> (X (((lift_mode = wing_borne) & (kias <= 90.0)) V ((lift_mode = wing_borne) | ((lift_mode = wing_borne) & (kias <= 90.0))))))) & (((lift_mode = wing_borne) & (kias > 90.0)) -> (((lift_mode = wing_borne) & (kias <= 90.0)) V ((lift_mode = wing_borne) | ((lift_mode = wing_borne) & (kias <= 90.0))))))",
                "component": "vehicle"
            },
            "_id": "79b96ad0-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_KIAS_KGS",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy kias = kgs",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "kias",
                    "kgs"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(kias = kgs)",
                "responseTextRange": [
                    25,
                    42
                ],
                "diagramVariables": "Response = <b><i>(kias = kgs)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(kias = kgs)",
                "post_condition_unexp_ft": "(kias = kgs)",
                "post_condition_SMV_pt": "(kias = kgs)",
                "post_condition_SMV_ft": "(kias = kgs)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (kias = kgs))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (kias = kgs))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (kias = kgs))",
                "CoCoSpecCode": "H((kias = kgs))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (kias = kgs))",
                "ftExpanded": "(LAST V (kias = kgs))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (kias = kgs))",
                "component": "vehicle"
            },
            "_id": "79b96ad1-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_INIT_CR",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall immediately satisfy cr <=> (kias < 90.0)",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "immediately",
                "response": "satisfaction",
                "variables": [
                    "cr",
                    "kias"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    28
                ],
                "post_condition": "(cr <=> ( kias < 90.0 ))",
                "responseTextRange": [
                    30,
                    57
                ],
                "diagramVariables": "Response = <b><i>(cr <=> ( kias < 90.0 ))</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(cr <-> (kias < 90.0))",
                "post_condition_unexp_ft": "(cr <-> (kias < 90.0))",
                "post_condition_SMV_pt": "(cr <-> (kias < 90.0))",
                "post_condition_SMV_ft": "(cr <-> (kias < 90.0))",
                "ft_fetched": "$post_condition_unexp_ft$",
                "ft": "(cr <-> (kias < 90.0))",
                "pt_fetched": "(H (FTP -> $post_condition_unexp_pt$))",
                "pt": "(H (FTP -> (cr <-> (kias < 90.0))))",
                "ptExpanded_fetched": "(H ((! (Y TRUE)) -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((! (Y TRUE)) -> (cr <-> (kias < 90.0))))",
                "CoCoSpecCode": "H((not (YtoPre(true)) => (cr = (kias < 90.0))))",
                "ftExpanded_fetched": "$post_condition_SMV_ft$",
                "ftExpandedUnoptimized": "(cr <-> (kias < 90.0))",
                "ftExpanded": "(cr <-> (kias < 90.0))",
                "ftInfAUExpanded_fetched": "$post_condition_SMV_ft$",
                "ftInfAUExpanded": "(cr <-> (kias < 90.0))",
                "component": "vehicle"
            },
            "_id": "79b96ad2-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_KIAS_DERIVATIVE",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy FTP | absReal(preReal(0.0, kias) - kias) <= 10.0",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "kias"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(FTP | absReal ( preReal ( 0.0 , kias ) - kias ) <= 10.0)",
                "responseTextRange": [
                    25,
                    80
                ],
                "diagramVariables": "Response = <b><i>(FTP | absReal ( preReal ( 0.0 , kias ) - kias ) <= 10.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((! (Y TRUE)) | (absReal((preReal(0.0,kias) - kias)) <= 10.0))",
                "post_condition_unexp_ft": "(FTP | (absReal((preReal(0.0,kias) - kias)) <= 10.0))",
                "post_condition_SMV_pt": "((! (Y TRUE)) | (absReal((preReal(0.0,kias) - kias)) <= 10.0))",
                "post_condition_SMV_ft": "(FTP | (absReal((preReal(0.0,kias) - kias)) <= 10.0))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (FTP | (absReal((preReal(0.0,kias) - kias)) <= 10.0)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((! (Y TRUE)) | (absReal((preReal(0.0,kias) - kias)) <= 10.0)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((! (Y TRUE)) | (absReal((preReal(0.0,kias) - kias)) <= 10.0)))",
                "CoCoSpecCode": "H((not (YtoPre(true)) or (absReal((preReal(0.0,kias) - kias)) <= 10.0)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (FTP | (absReal((preReal(0.0,kias) - kias)) <= 10.0)))",
                "ftExpanded": "(LAST V (FTP | (absReal((preReal(0.0,kias) - kias)) <= 10.0)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (FTP | (absReal((preReal(0.0,kias) - kias)) <= 10.0)))",
                "component": "vehicle"
            },
            "_id": "79b991e0-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_WB_TO_SWB",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Upon  lift_mode = wing_borne & kias <= 90.0 the vehicle shall at the next timepoint satisfy lift_mode = semi_wing_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "wing_borne",
                    "kias",
                    "semi_wing_borne"
                ],
                "qualifier_word": "upon",
                "pre_condition": "(lift_mode = wing_borne & kias <= 90.0)",
                "regular_condition": "(lift_mode = wing_borne & kias <= 90.0)",
                "conditionTextRange": [
                    0,
                    42
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    44,
                    54
                ],
                "timingTextRange": [
                    62,
                    82
                ],
                "post_condition": "(lift_mode = semi_wing_borne)",
                "responseTextRange": [
                    84,
                    118
                ],
                "diagramVariables": "TC = <b><i>(lift_mode = wing_borne & kias <= 90.0)</i></b>, Response = <b><i>(lift_mode = semi_wing_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(lift_mode = wing_borne & kias <= 90.0)</i></b> is true and any point in the interval where <b><i>(lift_mode = wing_borne & kias <= 90.0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "((lift_mode = wing_borne) & (kias <= 90.0))",
                "regular_condition_unexp_ft": "((lift_mode = wing_borne) & (kias <= 90.0))",
                "regular_condition_SMV_pt": "((lift_mode = wing_borne) & (kias <= 90.0))",
                "regular_condition_SMV_ft": "((lift_mode = wing_borne) & (kias <= 90.0))",
                "post_condition_unexp_pt": "(lift_mode = semi_wing_borne)",
                "post_condition_unexp_ft": "(lift_mode = semi_wing_borne)",
                "post_condition_SMV_pt": "(lift_mode = semi_wing_borne)",
                "post_condition_SMV_ft": "(lift_mode = semi_wing_borne)",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
                "ft": "((LAST V (((! ((lift_mode = wing_borne) & (kias <= 90.0))) & ((! LAST) & (X ((lift_mode = wing_borne) & (kias <= 90.0))))) -> (X (LAST | (X (lift_mode = semi_wing_borne)))))) & (((lift_mode = wing_borne) & (kias <= 90.0)) -> (LAST | (X (lift_mode = semi_wing_borne)))))",
                "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
                "pt": "(H ((Y (((lift_mode = wing_borne) & (kias <= 90.0)) & ((Y (! ((lift_mode = wing_borne) & (kias <= 90.0)))) | FTP))) -> ((lift_mode = semi_wing_borne) | FTP)))",
                "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
                "ptExpanded": "(H ((Y (((lift_mode = wing_borne) & (kias <= 90.0)) & (Z (! ((lift_mode = wing_borne) & (kias <= 90.0)))))) -> ((lift_mode = semi_wing_borne) | (! (Y TRUE)))))",
                "CoCoSpecCode": "H((YtoPre((((lift_mode = wing_borne) and (kias <= 90.0)) and ZtoPre(not (((lift_mode = wing_borne) and (kias <= 90.0)))))) => ((lift_mode = semi_wing_borne) or not (YtoPre(true)))))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "((LAST V (((! ((lift_mode = wing_borne) & (kias <= 90.0))) & ((! LAST) & (X ((lift_mode = wing_borne) & (kias <= 90.0))))) -> (X (LAST | (X (lift_mode = semi_wing_borne)))))) & (((lift_mode = wing_borne) & (kias <= 90.0)) -> (LAST | (X (lift_mode = semi_wing_borne)))))",
                "ftExpanded": "((LAST V (((! ((lift_mode = wing_borne) & (kias <= 90.0))) & ((! LAST) & (X ((lift_mode = wing_borne) & (kias <= 90.0))))) -> (X (LAST | (X (lift_mode = semi_wing_borne)))))) & (((lift_mode = wing_borne) & (kias <= 90.0)) -> (LAST | (X (lift_mode = semi_wing_borne)))))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
                "ftInfAUExpanded": "((G (((! ((lift_mode = wing_borne) & (kias <= 90.0))) & (X ((lift_mode = wing_borne) & (kias <= 90.0)))) -> (X (X (lift_mode = semi_wing_borne))))) & (((lift_mode = wing_borne) & (kias <= 90.0)) -> (X (lift_mode = semi_wing_borne))))",
                "component": "vehicle"
            },
            "_id": "79b991e1-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_REACH_HOVER_06",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall within 6 ticks satisfy lift_mode = thrust_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "within",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "thrust_borne"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "duration": "6",
                "timingTextRange": [
                    18,
                    31
                ],
                "post_condition": "(lift_mode = thrust_borne)",
                "responseTextRange": [
                    33,
                    64
                ],
                "diagramVariables": " n = <b><i>6</i></b>, Response = <b><i>(lift_mode = thrust_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>6</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>6</i></b>). If the interval ends sooner than trigger+<b><i>6</i></b>, then RES need not hold.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(lift_mode = thrust_borne)",
                "post_condition_unexp_ft": "(lift_mode = thrust_borne)",
                "post_condition_SMV_pt": "(lift_mode = thrust_borne)",
                "post_condition_SMV_ft": "(lift_mode = thrust_borne)",
                "ft_fetched": "((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))",
                "ft": "((F[<=6] (lift_mode = thrust_borne)) | (F[<6] LAST))",
                "pt_fetched": "(H ((H (! $post_condition_unexp_pt$)) -> (O[<$duration$] FTP)))",
                "pt": "(H ((H (! (lift_mode = thrust_borne))) -> (O[<6] FTP)))",
                "ptExpanded_fetched": "(H ((H (! $post_condition_SMV_pt$)) -> (O[<$duration$] (! (Y TRUE)))))",
                "ptExpanded": "(H ((H (! (lift_mode = thrust_borne))) -> (O[0,5] (! (Y TRUE)))))",
                "CoCoSpecCode": "H((H(not ((lift_mode = thrust_borne))) => OT(5, 0, not (YtoPre(true)))))",
                "ftExpanded_fetched": "((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))",
                "ftExpandedUnoptimized": "((F[0,6] (lift_mode = thrust_borne)) | (F[0,5] LAST))",
                "ftExpanded": "((F[0,6] (lift_mode = thrust_borne)) | (F[0,5] LAST))",
                "ftInfAUExpanded_fetched": "(F[<=$duration$] $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(F[0,6] (lift_mode = thrust_borne))",
                "component": "vehicle"
            },
            "_id": "79b9b8f0-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_INIT_HOVER_MODE",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall immediately satisfy hover_control_mode <=> kgs < 20.0",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "immediately",
                "response": "satisfaction",
                "variables": [
                    "hover_control_mode",
                    "kgs"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    28
                ],
                "post_condition": "(hover_control_mode <=> kgs < 20.0)",
                "responseTextRange": [
                    30,
                    70
                ],
                "diagramVariables": "Response = <b><i>(hover_control_mode <=> kgs < 20.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(hover_control_mode <-> (kgs < 20.0))",
                "post_condition_unexp_ft": "(hover_control_mode <-> (kgs < 20.0))",
                "post_condition_SMV_pt": "(hover_control_mode <-> (kgs < 20.0))",
                "post_condition_SMV_ft": "(hover_control_mode <-> (kgs < 20.0))",
                "ft_fetched": "$post_condition_unexp_ft$",
                "ft": "(hover_control_mode <-> (kgs < 20.0))",
                "pt_fetched": "(H (FTP -> $post_condition_unexp_pt$))",
                "pt": "(H (FTP -> (hover_control_mode <-> (kgs < 20.0))))",
                "ptExpanded_fetched": "(H ((! (Y TRUE)) -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((! (Y TRUE)) -> (hover_control_mode <-> (kgs < 20.0))))",
                "CoCoSpecCode": "H((not (YtoPre(true)) => (hover_control_mode = (kgs < 20.0))))",
                "ftExpanded_fetched": "$post_condition_SMV_ft$",
                "ftExpandedUnoptimized": "(hover_control_mode <-> (kgs < 20.0))",
                "ftExpanded": "(hover_control_mode <-> (kgs < 20.0))",
                "ftInfAUExpanded_fetched": "$post_condition_SMV_ft$",
                "ftInfAUExpanded": "(hover_control_mode <-> (kgs < 20.0))",
                "component": "vehicle"
            },
            "_id": "79b9b8f1-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_FCS_STAY_OFF",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy if preBool(false, !fcs & kias <= 40.0) then !fcs",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "fcs",
                    "kias"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(preBool ( false , ! fcs & kias <= 40.0 ) => ! fcs)",
                "responseTextRange": [
                    25,
                    80
                ],
                "diagramVariables": "Response = <b><i>(preBool ( false , ! fcs & kias <= 40.0 ) => ! fcs)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y ((! fcs) & (kias <= 40.0))))) -> (! fcs))",
                "post_condition_unexp_ft": "(preBool(FALSE,((! fcs) & (kias <= 40.0))) -> (! fcs))",
                "post_condition_SMV_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y ((! fcs) & (kias <= 40.0))))) -> (! fcs))",
                "post_condition_SMV_ft": "(preBool(FALSE,((! fcs) & (kias <= 40.0))) -> (! fcs))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (preBool(FALSE,((! fcs) & (kias <= 40.0))) -> (! fcs)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y ((! fcs) & (kias <= 40.0))))) -> (! fcs)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((Y ((! fcs) & (kias <= 40.0))) -> (! fcs)))",
                "CoCoSpecCode": "H((YtoPre((not (fcs) and (kias <= 40.0))) => not (fcs)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (preBool(FALSE,((! fcs) & (kias <= 40.0))) -> (! fcs)))",
                "ftExpanded": "(LAST V (preBool(FALSE,((! fcs) & (kias <= 40.0))) -> (! fcs)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (preBool(FALSE,((! fcs) & (kias <= 40.0))) -> (! fcs)))",
                "component": "vehicle"
            },
            "_id": "79b9b8f2-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_CR_STAY_ON",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy if preBool(false, cr & kias <= 100.0) then cr",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "cr",
                    "kias"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(preBool ( false , cr & kias <= 100.0 ) => cr)",
                "responseTextRange": [
                    25,
                    77
                ],
                "diagramVariables": "Response = <b><i>(preBool ( false , cr & kias <= 100.0 ) => cr)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (cr & (kias <= 100.0))))) -> cr)",
                "post_condition_unexp_ft": "(preBool(FALSE,(cr & (kias <= 100.0))) -> cr)",
                "post_condition_SMV_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (cr & (kias <= 100.0))))) -> cr)",
                "post_condition_SMV_ft": "(preBool(FALSE,(cr & (kias <= 100.0))) -> cr)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (preBool(FALSE,(cr & (kias <= 100.0))) -> cr))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (cr & (kias <= 100.0))))) -> cr))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((Y (cr & (kias <= 100.0))) -> cr))",
                "CoCoSpecCode": "H((YtoPre((cr and (kias <= 100.0))) => cr))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (preBool(FALSE,(cr & (kias <= 100.0))) -> cr))",
                "ftExpanded": "(LAST V (preBool(FALSE,(cr & (kias <= 100.0))) -> cr))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (preBool(FALSE,(cr & (kias <= 100.0))) -> cr))",
                "component": "vehicle"
            },
            "_id": "79b9e000-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_INIT_WIND_SPEED_assumption",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall immediately satisfy wind_speed = 10.0",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "immediately",
                "response": "satisfaction",
                "variables": [
                    "wind_speed"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    28
                ],
                "post_condition": "(wind_speed = 10.0)",
                "responseTextRange": [
                    30,
                    54
                ],
                "diagramVariables": "Response = <b><i>(wind_speed = 10.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_immediately_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(wind_speed = 10.0)",
                "post_condition_unexp_ft": "(wind_speed = 10.0)",
                "post_condition_SMV_pt": "(wind_speed = 10.0)",
                "post_condition_SMV_ft": "(wind_speed = 10.0)",
                "ft_fetched": "$post_condition_unexp_ft$",
                "ft": "(wind_speed = 10.0)",
                "pt_fetched": "(H (FTP -> $post_condition_unexp_pt$))",
                "pt": "(H (FTP -> (wind_speed = 10.0)))",
                "ptExpanded_fetched": "(H ((! (Y TRUE)) -> $post_condition_SMV_pt$))",
                "ptExpanded": "(H ((! (Y TRUE)) -> (wind_speed = 10.0)))",
                "CoCoSpecCode": "H((not (YtoPre(true)) => (wind_speed = 10.0)))",
                "ftExpanded_fetched": "$post_condition_SMV_ft$",
                "ftExpandedUnoptimized": "(wind_speed = 10.0)",
                "ftExpanded": "(wind_speed = 10.0)",
                "ftInfAUExpanded_fetched": "$post_condition_SMV_ft$",
                "ftInfAUExpanded": "(wind_speed = 10.0)",
                "component": "vehicle"
            },
            "_id": "79b9e001-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_DR_STAY_ON",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy if preBool(false, dr & kias <= 70.0) then dr",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "dr",
                    "kias"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(preBool ( false , dr & kias <= 70.0 ) => dr)",
                "responseTextRange": [
                    25,
                    76
                ],
                "diagramVariables": "Response = <b><i>(preBool ( false , dr & kias <= 70.0 ) => dr)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (dr & (kias <= 70.0))))) -> dr)",
                "post_condition_unexp_ft": "(preBool(FALSE,(dr & (kias <= 70.0))) -> dr)",
                "post_condition_SMV_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (dr & (kias <= 70.0))))) -> dr)",
                "post_condition_SMV_ft": "(preBool(FALSE,(dr & (kias <= 70.0))) -> dr)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (preBool(FALSE,(dr & (kias <= 70.0))) -> dr))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (dr & (kias <= 70.0))))) -> dr))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((Y (dr & (kias <= 70.0))) -> dr))",
                "CoCoSpecCode": "H((YtoPre((dr and (kias <= 70.0))) => dr))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (preBool(FALSE,(dr & (kias <= 70.0))) -> dr))",
                "ftExpanded": "(LAST V (preBool(FALSE,(dr & (kias <= 70.0))) -> dr))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (preBool(FALSE,(dr & (kias <= 70.0))) -> dr))",
                "component": "vehicle"
            },
            "_id": "79ba0710-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_REACH_HOVER_16",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall within 16 ticks satisfy lift_mode = thrust_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "within",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "thrust_borne"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "duration": "16",
                "timingTextRange": [
                    18,
                    32
                ],
                "post_condition": "(lift_mode = thrust_borne)",
                "responseTextRange": [
                    34,
                    65
                ],
                "diagramVariables": " n = <b><i>16</i></b>, Response = <b><i>(lift_mode = thrust_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>16</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>16</i></b>). If the interval ends sooner than trigger+<b><i>16</i></b>, then RES need not hold.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(lift_mode = thrust_borne)",
                "post_condition_unexp_ft": "(lift_mode = thrust_borne)",
                "post_condition_SMV_pt": "(lift_mode = thrust_borne)",
                "post_condition_SMV_ft": "(lift_mode = thrust_borne)",
                "ft_fetched": "((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))",
                "ft": "((F[<=16] (lift_mode = thrust_borne)) | (F[<16] LAST))",
                "pt_fetched": "(H ((H (! $post_condition_unexp_pt$)) -> (O[<$duration$] FTP)))",
                "pt": "(H ((H (! (lift_mode = thrust_borne))) -> (O[<16] FTP)))",
                "ptExpanded_fetched": "(H ((H (! $post_condition_SMV_pt$)) -> (O[<$duration$] (! (Y TRUE)))))",
                "ptExpanded": "(H ((H (! (lift_mode = thrust_borne))) -> (O[0,15] (! (Y TRUE)))))",
                "CoCoSpecCode": "H((H(not ((lift_mode = thrust_borne))) => OT(15, 0, not (YtoPre(true)))))",
                "ftExpanded_fetched": "((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))",
                "ftExpandedUnoptimized": "((F[0,16] (lift_mode = thrust_borne)) | (F[0,15] LAST))",
                "ftExpanded": "((F[0,16] (lift_mode = thrust_borne)) | (F[0,15] LAST))",
                "ftInfAUExpanded_fetched": "(F[<=$duration$] $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(F[0,16] (lift_mode = thrust_borne))",
                "component": "vehicle"
            },
            "_id": "79ba0711-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_WIND_SPEED_30_assumption",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": " The vehicle shall always satisfy -30.0 <= wind_speed & wind_speed <= 30.0",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "wind_speed"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(-30.0 <= wind_speed & wind_speed <= 30.0)",
                "responseTextRange": [
                    25,
                    72
                ],
                "diagramVariables": "Response = <b><i>(-30.0 <= wind_speed & wind_speed <= 30.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((-30.0 <= wind_speed) & (wind_speed <= 30.0))",
                "post_condition_unexp_ft": "((-30.0 <= wind_speed) & (wind_speed <= 30.0))",
                "post_condition_SMV_pt": "((-30.0 <= wind_speed) & (wind_speed <= 30.0))",
                "post_condition_SMV_ft": "((-30.0 <= wind_speed) & (wind_speed <= 30.0))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V ((-30.0 <= wind_speed) & (wind_speed <= 30.0)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((-30.0 <= wind_speed) & (wind_speed <= 30.0)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((-30.0 <= wind_speed) & (wind_speed <= 30.0)))",
                "CoCoSpecCode": "H(((-30.0 <= wind_speed) and (wind_speed <= 30.0)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V ((-30.0 <= wind_speed) & (wind_speed <= 30.0)))",
                "ftExpanded": "(LAST V ((-30.0 <= wind_speed) & (wind_speed <= 30.0)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G ((-30.0 <= wind_speed) & (wind_speed <= 30.0)))",
                "component": "vehicle"
            },
            "_id": "79ba2e20-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_FCS_TURN_ON",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Upon !fcs & kias > 40.0 the vehicle shall at the next timepoint satisfy fcs",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "fcs",
                    "kias"
                ],
                "qualifier_word": "upon",
                "pre_condition": "(! fcs & kias > 40.0)",
                "regular_condition": "(! fcs & kias > 40.0)",
                "conditionTextRange": [
                    0,
                    22
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    24,
                    34
                ],
                "timingTextRange": [
                    42,
                    62
                ],
                "post_condition": "(fcs)",
                "responseTextRange": [
                    64,
                    74
                ],
                "diagramVariables": "TC = <b><i>(! fcs & kias > 40.0)</i></b>, Response = <b><i>(fcs)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! fcs & kias > 40.0)</i></b> is true and any point in the interval where <b><i>(! fcs & kias > 40.0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "((! fcs) & (kias > 40.0))",
                "regular_condition_unexp_ft": "((! fcs) & (kias > 40.0))",
                "regular_condition_SMV_pt": "((! fcs) & (kias > 40.0))",
                "regular_condition_SMV_ft": "((! fcs) & (kias > 40.0))",
                "post_condition_unexp_pt": "fcs",
                "post_condition_unexp_ft": "fcs",
                "post_condition_SMV_pt": "fcs",
                "post_condition_SMV_ft": "fcs",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
                "ft": "((LAST V (((! ((! fcs) & (kias > 40.0))) & ((! LAST) & (X ((! fcs) & (kias > 40.0))))) -> (X (LAST | (X fcs))))) & (((! fcs) & (kias > 40.0)) -> (LAST | (X fcs))))",
                "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
                "pt": "(H ((Y (((! fcs) & (kias > 40.0)) & ((Y (! ((! fcs) & (kias > 40.0)))) | FTP))) -> (fcs | FTP)))",
                "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
                "ptExpanded": "(H ((Y (((! fcs) & (kias > 40.0)) & (Z (! ((! fcs) & (kias > 40.0)))))) -> (fcs | (! (Y TRUE)))))",
                "CoCoSpecCode": "H((YtoPre(((not (fcs) and (kias > 40.0)) and ZtoPre(not ((not (fcs) and (kias > 40.0)))))) => (fcs or not (YtoPre(true)))))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "((LAST V (((! ((! fcs) & (kias > 40.0))) & ((! LAST) & (X ((! fcs) & (kias > 40.0))))) -> (X (LAST | (X fcs))))) & (((! fcs) & (kias > 40.0)) -> (LAST | (X fcs))))",
                "ftExpanded": "((LAST V (((! ((! fcs) & (kias > 40.0))) & ((! LAST) & (X ((! fcs) & (kias > 40.0))))) -> (X (LAST | (X fcs))))) & (((! fcs) & (kias > 40.0)) -> (LAST | (X fcs))))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
                "ftInfAUExpanded": "((G (((! ((! fcs) & (kias > 40.0))) & (X ((! fcs) & (kias > 40.0)))) -> (X (X fcs)))) & (((! fcs) & (kias > 40.0)) -> (X fcs)))",
                "component": "vehicle"
            },
            "_id": "79ba2e21-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_CR_TURN_ON",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Upon !cr & kias < 90.0 the vehicle shall at the next timepoint satisfy cr",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "cr",
                    "kias"
                ],
                "qualifier_word": "upon",
                "pre_condition": "(! cr & kias < 90.0)",
                "regular_condition": "(! cr & kias < 90.0)",
                "conditionTextRange": [
                    0,
                    21
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    23,
                    33
                ],
                "timingTextRange": [
                    41,
                    61
                ],
                "post_condition": "(cr)",
                "responseTextRange": [
                    63,
                    72
                ],
                "diagramVariables": "TC = <b><i>(! cr & kias < 90.0)</i></b>, Response = <b><i>(cr)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! cr & kias < 90.0)</i></b> is true and any point in the interval where <b><i>(! cr & kias < 90.0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "((! cr) & (kias < 90.0))",
                "regular_condition_unexp_ft": "((! cr) & (kias < 90.0))",
                "regular_condition_SMV_pt": "((! cr) & (kias < 90.0))",
                "regular_condition_SMV_ft": "((! cr) & (kias < 90.0))",
                "post_condition_unexp_pt": "cr",
                "post_condition_unexp_ft": "cr",
                "post_condition_SMV_pt": "cr",
                "post_condition_SMV_ft": "cr",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
                "ft": "((LAST V (((! ((! cr) & (kias < 90.0))) & ((! LAST) & (X ((! cr) & (kias < 90.0))))) -> (X (LAST | (X cr))))) & (((! cr) & (kias < 90.0)) -> (LAST | (X cr))))",
                "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
                "pt": "(H ((Y (((! cr) & (kias < 90.0)) & ((Y (! ((! cr) & (kias < 90.0)))) | FTP))) -> (cr | FTP)))",
                "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
                "ptExpanded": "(H ((Y (((! cr) & (kias < 90.0)) & (Z (! ((! cr) & (kias < 90.0)))))) -> (cr | (! (Y TRUE)))))",
                "CoCoSpecCode": "H((YtoPre(((not (cr) and (kias < 90.0)) and ZtoPre(not ((not (cr) and (kias < 90.0)))))) => (cr or not (YtoPre(true)))))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "((LAST V (((! ((! cr) & (kias < 90.0))) & ((! LAST) & (X ((! cr) & (kias < 90.0))))) -> (X (LAST | (X cr))))) & (((! cr) & (kias < 90.0)) -> (LAST | (X cr))))",
                "ftExpanded": "((LAST V (((! ((! cr) & (kias < 90.0))) & ((! LAST) & (X ((! cr) & (kias < 90.0))))) -> (X (LAST | (X cr))))) & (((! cr) & (kias < 90.0)) -> (LAST | (X cr))))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
                "ftInfAUExpanded": "((G (((! ((! cr) & (kias < 90.0))) & (X ((! cr) & (kias < 90.0)))) -> (X (X cr)))) & (((! cr) & (kias < 90.0)) -> (X cr)))",
                "component": "vehicle"
            },
            "_id": "79ba2e22-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_KIAS_KGS_WIND_SPEED",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy kgs = kias + wind_speed",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "kgs",
                    "kias",
                    "wind_speed"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(kgs = kias + wind_speed)",
                "responseTextRange": [
                    25,
                    55
                ],
                "diagramVariables": "Response = <b><i>(kgs = kias + wind_speed)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(kgs = (kias + wind_speed))",
                "post_condition_unexp_ft": "(kgs = (kias + wind_speed))",
                "post_condition_SMV_pt": "(kgs = (kias + wind_speed))",
                "post_condition_SMV_ft": "(kgs = (kias + wind_speed))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (kgs = (kias + wind_speed)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (kgs = (kias + wind_speed)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (kgs = (kias + wind_speed)))",
                "CoCoSpecCode": "H((kgs = (kias + wind_speed)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (kgs = (kias + wind_speed)))",
                "ftExpanded": "(LAST V (kgs = (kias + wind_speed)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (kgs = (kias + wind_speed)))",
                "component": "vehicle"
            },
            "_id": "79ba5530-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_FCS_STAY_ON",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy if preBool(false, fcs & kias >= 30.0) then fcs",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "fcs",
                    "kias"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(preBool ( false , fcs & kias >= 30.0 ) => fcs)",
                "responseTextRange": [
                    25,
                    78
                ],
                "diagramVariables": "Response = <b><i>(preBool ( false , fcs & kias >= 30.0 ) => fcs)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (fcs & (kias >= 30.0))))) -> fcs)",
                "post_condition_unexp_ft": "(preBool(FALSE,(fcs & (kias >= 30.0))) -> fcs)",
                "post_condition_SMV_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (fcs & (kias >= 30.0))))) -> fcs)",
                "post_condition_SMV_ft": "(preBool(FALSE,(fcs & (kias >= 30.0))) -> fcs)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (preBool(FALSE,(fcs & (kias >= 30.0))) -> fcs))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (fcs & (kias >= 30.0))))) -> fcs))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((Y (fcs & (kias >= 30.0))) -> fcs))",
                "CoCoSpecCode": "H((YtoPre((fcs and (kias >= 30.0))) => fcs))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (preBool(FALSE,(fcs & (kias >= 30.0))) -> fcs))",
                "ftExpanded": "(LAST V (preBool(FALSE,(fcs & (kias >= 30.0))) -> fcs))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (preBool(FALSE,(fcs & (kias >= 30.0))) -> fcs))",
                "component": "vehicle"
            },
            "_id": "79ba5531-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_CR_TURN_OFF",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Upon cr & kias > 100.0 the vehicle shall at the next timepoint satisfy !cr",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "cr",
                    "kias"
                ],
                "qualifier_word": "upon",
                "pre_condition": "(cr & kias > 100.0)",
                "regular_condition": "(cr & kias > 100.0)",
                "conditionTextRange": [
                    0,
                    21
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    23,
                    33
                ],
                "timingTextRange": [
                    41,
                    61
                ],
                "post_condition": "(! cr)",
                "responseTextRange": [
                    63,
                    73
                ],
                "diagramVariables": "TC = <b><i>(cr & kias > 100.0)</i></b>, Response = <b><i>(! cr)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(cr & kias > 100.0)</i></b> is true and any point in the interval where <b><i>(cr & kias > 100.0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "(cr & (kias > 100.0))",
                "regular_condition_unexp_ft": "(cr & (kias > 100.0))",
                "regular_condition_SMV_pt": "(cr & (kias > 100.0))",
                "regular_condition_SMV_ft": "(cr & (kias > 100.0))",
                "post_condition_unexp_pt": "(! cr)",
                "post_condition_unexp_ft": "(! cr)",
                "post_condition_SMV_pt": "(! cr)",
                "post_condition_SMV_ft": "(! cr)",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
                "ft": "((LAST V (((! (cr & (kias > 100.0))) & ((! LAST) & (X (cr & (kias > 100.0))))) -> (X (LAST | (X (! cr)))))) & ((cr & (kias > 100.0)) -> (LAST | (X (! cr)))))",
                "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
                "pt": "(H ((Y ((cr & (kias > 100.0)) & ((Y (! (cr & (kias > 100.0)))) | FTP))) -> ((! cr) | FTP)))",
                "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
                "ptExpanded": "(H ((Y ((cr & (kias > 100.0)) & (Z (! (cr & (kias > 100.0)))))) -> ((! cr) | (! (Y TRUE)))))",
                "CoCoSpecCode": "H((YtoPre(((cr and (kias > 100.0)) and ZtoPre(not ((cr and (kias > 100.0)))))) => (not (cr) or not (YtoPre(true)))))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "((LAST V (((! (cr & (kias > 100.0))) & ((! LAST) & (X (cr & (kias > 100.0))))) -> (X (LAST | (X (! cr)))))) & ((cr & (kias > 100.0)) -> (LAST | (X (! cr)))))",
                "ftExpanded": "((LAST V (((! (cr & (kias > 100.0))) & ((! LAST) & (X (cr & (kias > 100.0))))) -> (X (LAST | (X (! cr)))))) & ((cr & (kias > 100.0)) -> (LAST | (X (! cr)))))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
                "ftInfAUExpanded": "((G (((! (cr & (kias > 100.0))) & (X (cr & (kias > 100.0)))) -> (X (X (! cr))))) & ((cr & (kias > 100.0)) -> (X (! cr))))",
                "component": "vehicle"
            },
            "_id": "79ba7c40-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_WIND_SPEED_DERIV_assumption",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy FTP | absReal(preReal(0.0,wind_speed) - wind_speed) <= 10.0",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "wind_speed"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(FTP | absReal ( preReal ( 0.0 , wind_speed ) - wind_speed ) <= 10.0)",
                "responseTextRange": [
                    25,
                    91
                ],
                "diagramVariables": "Response = <b><i>(FTP | absReal ( preReal ( 0.0 , wind_speed ) - wind_speed ) <= 10.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((! (Y TRUE)) | (absReal((preReal(0.0,wind_speed) - wind_speed)) <= 10.0))",
                "post_condition_unexp_ft": "(FTP | (absReal((preReal(0.0,wind_speed) - wind_speed)) <= 10.0))",
                "post_condition_SMV_pt": "((! (Y TRUE)) | (absReal((preReal(0.0,wind_speed) - wind_speed)) <= 10.0))",
                "post_condition_SMV_ft": "(FTP | (absReal((preReal(0.0,wind_speed) - wind_speed)) <= 10.0))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (FTP | (absReal((preReal(0.0,wind_speed) - wind_speed)) <= 10.0)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((! (Y TRUE)) | (absReal((preReal(0.0,wind_speed) - wind_speed)) <= 10.0)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((! (Y TRUE)) | (absReal((preReal(0.0,wind_speed) - wind_speed)) <= 10.0)))",
                "CoCoSpecCode": "H((not (YtoPre(true)) or (absReal((preReal(0.0,wind_speed) - wind_speed)) <= 10.0)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (FTP | (absReal((preReal(0.0,wind_speed) - wind_speed)) <= 10.0)))",
                "ftExpanded": "(LAST V (FTP | (absReal((preReal(0.0,wind_speed) - wind_speed)) <= 10.0)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (FTP | (absReal((preReal(0.0,wind_speed) - wind_speed)) <= 10.0)))",
                "component": "vehicle"
            },
            "_id": "79ba7c41-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_KIAS_0",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy kias >= 0.0",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "kias"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(kias >= 0.0)",
                "responseTextRange": [
                    25,
                    43
                ],
                "diagramVariables": "Response = <b><i>(kias >= 0.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(kias >= 0.0)",
                "post_condition_unexp_ft": "(kias >= 0.0)",
                "post_condition_SMV_pt": "(kias >= 0.0)",
                "post_condition_SMV_ft": "(kias >= 0.0)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (kias >= 0.0))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (kias >= 0.0))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (kias >= 0.0))",
                "CoCoSpecCode": "H((kias >= 0.0))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (kias >= 0.0))",
                "ftExpanded": "(LAST V (kias >= 0.0))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (kias >= 0.0))",
                "component": "vehicle"
            },
            "_id": "79ba7c42-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_REACH_NOT_FCS_11",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall within 11 ticks satisfy !fcs",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "within",
                "response": "satisfaction",
                "variables": [
                    "fcs"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "duration": "11",
                "timingTextRange": [
                    18,
                    32
                ],
                "post_condition": "(! fcs)",
                "responseTextRange": [
                    34,
                    45
                ],
                "diagramVariables": " n = <b><i>11</i></b>, Response = <b><i>(! fcs)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>11</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>11</i></b>). If the interval ends sooner than trigger+<b><i>11</i></b>, then RES need not hold.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(! fcs)",
                "post_condition_unexp_ft": "(! fcs)",
                "post_condition_SMV_pt": "(! fcs)",
                "post_condition_SMV_ft": "(! fcs)",
                "ft_fetched": "((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))",
                "ft": "((F[<=11] (! fcs)) | (F[<11] LAST))",
                "pt_fetched": "(H ((H (! $post_condition_unexp_pt$)) -> (O[<$duration$] FTP)))",
                "pt": "(H ((H (! (! fcs))) -> (O[<11] FTP)))",
                "ptExpanded_fetched": "(H ((H (! $post_condition_SMV_pt$)) -> (O[<$duration$] (! (Y TRUE)))))",
                "ptExpanded": "(H ((H fcs) -> (O[0,10] (! (Y TRUE)))))",
                "CoCoSpecCode": "H((H(fcs) => OT(10, 0, not (YtoPre(true)))))",
                "ftExpanded_fetched": "((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))",
                "ftExpandedUnoptimized": "((F[0,11] (! fcs)) | (F[0,10] LAST))",
                "ftExpanded": "((F[0,11] (! fcs)) | (F[0,10] LAST))",
                "ftInfAUExpanded_fetched": "(F[<=$duration$] $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(F[0,11] (! fcs))",
                "component": "vehicle"
            },
            "_id": "79baa350-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_STB_STAY_ON_pre",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy if preBool(false, lift_mode = semi_thrust_borne & kias <= 40.0 & (kgs > 20.0 | !hover_control_mode)) then lift_mode = semi_thrust_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "semi_thrust_borne",
                    "kias",
                    "kgs",
                    "hover_control_mode"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(preBool ( false , lift_mode = semi_thrust_borne & kias <= 40.0 & ( kgs > 20.0 | ! hover_control_mode ) ) => lift_mode = semi_thrust_borne)",
                "responseTextRange": [
                    25,
                    167
                ],
                "diagramVariables": "Response = <b><i>(preBool ( false , lift_mode = semi_thrust_borne & kias <= 40.0 & ( kgs > 20.0 | ! hover_control_mode ) ) => lift_mode = semi_thrust_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode)))))) -> (lift_mode = semi_thrust_borne))",
                "post_condition_unexp_ft": "(preBool(FALSE,(((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode)))) -> (lift_mode = semi_thrust_borne))",
                "post_condition_SMV_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode)))))) -> (lift_mode = semi_thrust_borne))",
                "post_condition_SMV_ft": "(preBool(FALSE,(((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode)))) -> (lift_mode = semi_thrust_borne))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (preBool(FALSE,(((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode)))) -> (lift_mode = semi_thrust_borne)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode)))))) -> (lift_mode = semi_thrust_borne)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((Y (((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode)))) -> (lift_mode = semi_thrust_borne)))",
                "CoCoSpecCode": "H((YtoPre((((lift_mode = semi_thrust_borne) and (kias <= 40.0)) and ((kgs > 20.0) or not (hover_control_mode)))) => (lift_mode = semi_thrust_borne)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (preBool(FALSE,(((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode)))) -> (lift_mode = semi_thrust_borne)))",
                "ftExpanded": "(LAST V (preBool(FALSE,(((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode)))) -> (lift_mode = semi_thrust_borne)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (preBool(FALSE,(((lift_mode = semi_thrust_borne) & (kias <= 40.0)) & ((kgs > 20.0) | (! hover_control_mode)))) -> (lift_mode = semi_thrust_borne)))",
                "component": "vehicle"
            },
            "_id": "79baca60-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_TB_STAY_ON_pre",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy if preBool(false, lift_mode = thrust_borne & kgs <= 20.0 & hover_control_mode) then lift_mode = thrust_borne",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "thrust_borne",
                    "kgs",
                    "hover_control_mode"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(preBool ( false , lift_mode = thrust_borne & kgs <= 20.0 & hover_control_mode ) => lift_mode = thrust_borne)",
                "responseTextRange": [
                    25,
                    140
                ],
                "diagramVariables": "Response = <b><i>(preBool ( false , lift_mode = thrust_borne & kgs <= 20.0 & hover_control_mode ) => lift_mode = thrust_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode)))) -> (lift_mode = thrust_borne))",
                "post_condition_unexp_ft": "(preBool(FALSE,(((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode)) -> (lift_mode = thrust_borne))",
                "post_condition_SMV_pt": "((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode)))) -> (lift_mode = thrust_borne))",
                "post_condition_SMV_ft": "(preBool(FALSE,(((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode)) -> (lift_mode = thrust_borne))",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (preBool(FALSE,(((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode)) -> (lift_mode = thrust_borne)))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H ((((! (Y TRUE)) & FALSE) | ((! (! (Y TRUE))) & (Y (((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode)))) -> (lift_mode = thrust_borne)))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H ((Y (((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode)) -> (lift_mode = thrust_borne)))",
                "CoCoSpecCode": "H((YtoPre((((lift_mode = thrust_borne) and (kgs <= 20.0)) and hover_control_mode)) => (lift_mode = thrust_borne)))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (preBool(FALSE,(((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode)) -> (lift_mode = thrust_borne)))",
                "ftExpanded": "(LAST V (preBool(FALSE,(((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode)) -> (lift_mode = thrust_borne)))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (preBool(FALSE,(((lift_mode = thrust_borne) & (kgs <= 20.0)) & hover_control_mode)) -> (lift_mode = thrust_borne)))",
                "component": "vehicle"
            },
            "_id": "79baca61-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_WIND_SPEED_20_assumption",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall always satisfy absReal(wind_speed) <= 20.0",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "always",
                "response": "satisfaction",
                "variables": [
                    "wind_speed"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "timingTextRange": [
                    18,
                    23
                ],
                "post_condition": "(absReal ( wind_speed ) <= 20.0)",
                "responseTextRange": [
                    25,
                    59
                ],
                "diagramVariables": "Response = <b><i>(absReal ( wind_speed ) <= 20.0)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(absReal(wind_speed) <= 20.0)",
                "post_condition_unexp_ft": "(absReal(wind_speed) <= 20.0)",
                "post_condition_SMV_pt": "(absReal(wind_speed) <= 20.0)",
                "post_condition_SMV_ft": "(absReal(wind_speed) <= 20.0)",
                "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
                "ft": "(LAST V (absReal(wind_speed) <= 20.0))",
                "pt_fetched": "(H $post_condition_unexp_pt$)",
                "pt": "(H (absReal(wind_speed) <= 20.0))",
                "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
                "ptExpanded": "(H (absReal(wind_speed) <= 20.0))",
                "CoCoSpecCode": "H((absReal(wind_speed) <= 20.0))",
                "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
                "ftExpandedUnoptimized": "(LAST V (absReal(wind_speed) <= 20.0))",
                "ftExpanded": "(LAST V (absReal(wind_speed) <= 20.0))",
                "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(G (absReal(wind_speed) <= 20.0))",
                "component": "vehicle"
            },
            "_id": "79baf170-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_DR_TURN_ON",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Upon !dr & kias < 60.0 the vehicle shall at the next timepoint satisfy dr",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "dr",
                    "kias"
                ],
                "qualifier_word": "upon",
                "pre_condition": "(! dr & kias < 60.0)",
                "regular_condition": "(! dr & kias < 60.0)",
                "conditionTextRange": [
                    0,
                    21
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    23,
                    33
                ],
                "timingTextRange": [
                    41,
                    61
                ],
                "post_condition": "(dr)",
                "responseTextRange": [
                    63,
                    72
                ],
                "diagramVariables": "TC = <b><i>(! dr & kias < 60.0)</i></b>, Response = <b><i>(dr)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! dr & kias < 60.0)</i></b> is true and any point in the interval where <b><i>(! dr & kias < 60.0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "((! dr) & (kias < 60.0))",
                "regular_condition_unexp_ft": "((! dr) & (kias < 60.0))",
                "regular_condition_SMV_pt": "((! dr) & (kias < 60.0))",
                "regular_condition_SMV_ft": "((! dr) & (kias < 60.0))",
                "post_condition_unexp_pt": "dr",
                "post_condition_unexp_ft": "dr",
                "post_condition_SMV_pt": "dr",
                "post_condition_SMV_ft": "dr",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
                "ft": "((LAST V (((! ((! dr) & (kias < 60.0))) & ((! LAST) & (X ((! dr) & (kias < 60.0))))) -> (X (LAST | (X dr))))) & (((! dr) & (kias < 60.0)) -> (LAST | (X dr))))",
                "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
                "pt": "(H ((Y (((! dr) & (kias < 60.0)) & ((Y (! ((! dr) & (kias < 60.0)))) | FTP))) -> (dr | FTP)))",
                "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
                "ptExpanded": "(H ((Y (((! dr) & (kias < 60.0)) & (Z (! ((! dr) & (kias < 60.0)))))) -> (dr | (! (Y TRUE)))))",
                "CoCoSpecCode": "H((YtoPre(((not (dr) and (kias < 60.0)) and ZtoPre(not ((not (dr) and (kias < 60.0)))))) => (dr or not (YtoPre(true)))))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "((LAST V (((! ((! dr) & (kias < 60.0))) & ((! LAST) & (X ((! dr) & (kias < 60.0))))) -> (X (LAST | (X dr))))) & (((! dr) & (kias < 60.0)) -> (LAST | (X dr))))",
                "ftExpanded": "((LAST V (((! ((! dr) & (kias < 60.0))) & ((! LAST) & (X ((! dr) & (kias < 60.0))))) -> (X (LAST | (X dr))))) & (((! dr) & (kias < 60.0)) -> (LAST | (X dr))))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
                "ftInfAUExpanded": "((G (((! ((! dr) & (kias < 60.0))) & (X ((! dr) & (kias < 60.0)))) -> (X (X dr)))) & (((! dr) & (kias < 60.0)) -> (X dr)))",
                "component": "vehicle"
            },
            "_id": "79baf171-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_DR_TURN_OFF",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Upon dr & kias > 70.0 the vehicle shall at the next timepoint satisfy !dr",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "regular",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "dr",
                    "kias"
                ],
                "qualifier_word": "upon",
                "pre_condition": "(dr & kias > 70.0)",
                "regular_condition": "(dr & kias > 70.0)",
                "conditionTextRange": [
                    0,
                    20
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    22,
                    32
                ],
                "timingTextRange": [
                    40,
                    60
                ],
                "post_condition": "(! dr)",
                "responseTextRange": [
                    62,
                    72
                ],
                "diagramVariables": "TC = <b><i>(dr & kias > 70.0)</i></b>, Response = <b><i>(! dr)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(dr & kias > 70.0)</i></b> is true and any point in the interval where <b><i>(dr & kias > 70.0)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "(dr & (kias > 70.0))",
                "regular_condition_unexp_ft": "(dr & (kias > 70.0))",
                "regular_condition_SMV_pt": "(dr & (kias > 70.0))",
                "regular_condition_SMV_ft": "(dr & (kias > 70.0))",
                "post_condition_unexp_pt": "(! dr)",
                "post_condition_unexp_ft": "(! dr)",
                "post_condition_SMV_pt": "(! dr)",
                "post_condition_SMV_ft": "(! dr)",
                "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
                "ft": "((LAST V (((! (dr & (kias > 70.0))) & ((! LAST) & (X (dr & (kias > 70.0))))) -> (X (LAST | (X (! dr)))))) & ((dr & (kias > 70.0)) -> (LAST | (X (! dr)))))",
                "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
                "pt": "(H ((Y ((dr & (kias > 70.0)) & ((Y (! (dr & (kias > 70.0)))) | FTP))) -> ((! dr) | FTP)))",
                "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & (Z (! $regular_condition_SMV_pt$)))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
                "ptExpanded": "(H ((Y ((dr & (kias > 70.0)) & (Z (! (dr & (kias > 70.0)))))) -> ((! dr) | (! (Y TRUE)))))",
                "CoCoSpecCode": "H((YtoPre(((dr and (kias > 70.0)) and ZtoPre(not ((dr and (kias > 70.0)))))) => (not (dr) or not (YtoPre(true)))))",
                "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "((LAST V (((! (dr & (kias > 70.0))) & ((! LAST) & (X (dr & (kias > 70.0))))) -> (X (LAST | (X (! dr)))))) & ((dr & (kias > 70.0)) -> (LAST | (X (! dr)))))",
                "ftExpanded": "((LAST V (((! (dr & (kias > 70.0))) & ((! LAST) & (X (dr & (kias > 70.0))))) -> (X (LAST | (X (! dr)))))) & ((dr & (kias > 70.0)) -> (LAST | (X (! dr)))))",
                "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
                "ftInfAUExpanded": "((G (((! (dr & (kias > 70.0))) & (X (dr & (kias > 70.0)))) -> (X (X (! dr))))) & ((dr & (kias > 70.0)) -> (X (! dr))))",
                "component": "vehicle"
            },
            "_id": "79bb1880-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_REACH_NOT_FCS_09",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "The vehicle shall within 9 ticks satisfy !fcs",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "null",
                "timing": "within",
                "response": "satisfaction",
                "variables": [
                    "fcs"
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    0,
                    10
                ],
                "duration": "9",
                "timingTextRange": [
                    18,
                    31
                ],
                "post_condition": "(! fcs)",
                "responseTextRange": [
                    33,
                    44
                ],
                "diagramVariables": " n = <b><i>9</i></b>, Response = <b><i>(! fcs)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>9</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>9</i></b>). If the interval ends sooner than trigger+<b><i>9</i></b>, then RES need not hold.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "post_condition_unexp_pt": "(! fcs)",
                "post_condition_unexp_ft": "(! fcs)",
                "post_condition_SMV_pt": "(! fcs)",
                "post_condition_SMV_ft": "(! fcs)",
                "ft_fetched": "((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))",
                "ft": "((F[<=9] (! fcs)) | (F[<9] LAST))",
                "pt_fetched": "(H ((H (! $post_condition_unexp_pt$)) -> (O[<$duration$] FTP)))",
                "pt": "(H ((H (! (! fcs))) -> (O[<9] FTP)))",
                "ptExpanded_fetched": "(H ((H (! $post_condition_SMV_pt$)) -> (O[<$duration$] (! (Y TRUE)))))",
                "ptExpanded": "(H ((H fcs) -> (O[0,8] (! (Y TRUE)))))",
                "CoCoSpecCode": "H((H(fcs) => OT(8, 0, not (YtoPre(true)))))",
                "ftExpanded_fetched": "((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))",
                "ftExpandedUnoptimized": "((F[0,9] (! fcs)) | (F[0,8] LAST))",
                "ftExpanded": "((F[0,9] (! fcs)) | (F[0,8] LAST))",
                "ftInfAUExpanded_fetched": "(F[<=$duration$] $post_condition_SMV_ft$)",
                "ftInfAUExpanded": "(F[0,9] (! fcs))",
                "component": "vehicle"
            },
            "_id": "79bb1881-5fd9-11ed-9cbe-ffd8cbaa6d62"
        },
        {
            "reqid": "LPC_SWB_STAY_ON_NEXT",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Whenever lift_mode = semi_wing_borne & kias <= 100.0 & kias > 30.0 the vehicle shall at the next timepoint satisfy lift_mode = semi_wing_borne",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "noTrigger",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "semi_wing_borne",
                    "kias"
                ],
                "qualifier_word": "whenever",
                "pre_condition": "(lift_mode = semi_wing_borne & kias <= 100.0 & kias > 30.0)",
                "regular_condition": "(lift_mode = semi_wing_borne & kias <= 100.0 & kias > 30.0)",
                "conditionTextRange": [
                    0,
                    65
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    67,
                    77
                ],
                "timingTextRange": [
                    85,
                    105
                ],
                "post_condition": "(lift_mode = semi_wing_borne)",
                "responseTextRange": [
                    107,
                    141
                ],
                "diagramVariables": "CC = <b><i>(lift_mode = semi_wing_borne & kias <= 100.0 & kias > 30.0)</i></b>, Response = <b><i>(lift_mode = semi_wing_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(lift_mode = semi_wing_borne & kias <= 100.0 & kias > 30.0)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_noTrigger_next_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "(((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0))",
                "regular_condition_unexp_ft": "(((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0))",
                "regular_condition_SMV_pt": "(((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0))",
                "regular_condition_SMV_ft": "(((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0))",
                "post_condition_unexp_pt": "(lift_mode = semi_wing_borne)",
                "post_condition_unexp_ft": "(lift_mode = semi_wing_borne)",
                "post_condition_SMV_pt": "(lift_mode = semi_wing_borne)",
                "post_condition_SMV_ft": "(lift_mode = semi_wing_borne)",
                "ft_fetched": "(LAST V ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
                "ft": "(LAST V ((((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0)) -> (LAST | (X (lift_mode = semi_wing_borne)))))",
                "pt_fetched": "(H ((Y $regular_condition_unexp_pt$) -> ($post_condition_unexp_pt$ | FTP)))",
                "pt": "(H ((Y (((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0))) -> ((lift_mode = semi_wing_borne) | FTP)))",
                "ptExpanded_fetched": "(H ((Y $regular_condition_SMV_pt$) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
                "ptExpanded": "(H ((Y (((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0))) -> ((lift_mode = semi_wing_borne) | (! (Y TRUE)))))",
                "CoCoSpecCode": "H((YtoPre((((lift_mode = semi_wing_borne) and (kias <= 100.0)) and (kias > 30.0))) => ((lift_mode = semi_wing_borne) or not (YtoPre(true)))))",
                "ftExpanded_fetched": "(LAST V ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "(LAST V ((((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0)) -> (LAST | (X (lift_mode = semi_wing_borne)))))",
                "ftExpanded": "(LAST V ((((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0)) -> (LAST | (X (lift_mode = semi_wing_borne)))))",
                "ftInfAUExpanded_fetched": "(G ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
                "ftInfAUExpanded": "(G ((((lift_mode = semi_wing_borne) & (kias <= 100.0)) & (kias > 30.0)) -> (X (lift_mode = semi_wing_borne))))",
                "component": "vehicle"
            },
            "_id": "8d7f9310-9a0b-11ee-80d9-a77c0c691f6d"
        },
        {
            "reqid": "LPC_WB_STAY_ON_NEXT",
            "parent_reqid": "",
            "project": "LPC",
            "rationale": "",
            "comments": "",
            "fulltext": "Whenever  lift_mode = wing_borne & kias > 90.0 the vehicle shall at the next timepoint satisfy lift_mode = wing_borne",
            "status": "",
            "semantics": {
                "type": "nasa",
                "scope": {
                    "type": "null"
                },
                "condition": "noTrigger",
                "timing": "next",
                "response": "satisfaction",
                "variables": [
                    "lift_mode",
                    "wing_borne",
                    "kias"
                ],
                "qualifier_word": "whenever",
                "pre_condition": "(lift_mode = wing_borne & kias > 90.0)",
                "regular_condition": "(lift_mode = wing_borne & kias > 90.0)",
                "conditionTextRange": [
                    0,
                    45
                ],
                "component_name": "vehicle",
                "componentTextRange": [
                    47,
                    57
                ],
                "timingTextRange": [
                    65,
                    85
                ],
                "post_condition": "(lift_mode = wing_borne)",
                "responseTextRange": [
                    87,
                    116
                ],
                "diagramVariables": "CC = <b><i>(lift_mode = wing_borne & kias > 90.0)</i></b>, Response = <b><i>(lift_mode = wing_borne)</i></b>.",
                "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(lift_mode = wing_borne & kias > 90.0)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at the next time step.",
                "diagram": "_media/user-interface/examples/svgDiagrams/null_noTrigger_next_satisfaction.svg",
                "scope_mode_pt": "BAD_PT",
                "scope_mode_ft": "BAD_FT",
                "regular_condition_unexp_pt": "((lift_mode = wing_borne) & (kias > 90.0))",
                "regular_condition_unexp_ft": "((lift_mode = wing_borne) & (kias > 90.0))",
                "regular_condition_SMV_pt": "((lift_mode = wing_borne) & (kias > 90.0))",
                "regular_condition_SMV_ft": "((lift_mode = wing_borne) & (kias > 90.0))",
                "post_condition_unexp_pt": "(lift_mode = wing_borne)",
                "post_condition_unexp_ft": "(lift_mode = wing_borne)",
                "post_condition_SMV_pt": "(lift_mode = wing_borne)",
                "post_condition_SMV_ft": "(lift_mode = wing_borne)",
                "ft_fetched": "(LAST V ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
                "ft": "(LAST V (((lift_mode = wing_borne) & (kias > 90.0)) -> (LAST | (X (lift_mode = wing_borne)))))",
                "pt_fetched": "(H ((Y $regular_condition_unexp_pt$) -> ($post_condition_unexp_pt$ | FTP)))",
                "pt": "(H ((Y ((lift_mode = wing_borne) & (kias > 90.0))) -> ((lift_mode = wing_borne) | FTP)))",
                "ptExpanded_fetched": "(H ((Y $regular_condition_SMV_pt$) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
                "ptExpanded": "(H ((Y ((lift_mode = wing_borne) & (kias > 90.0))) -> ((lift_mode = wing_borne) | (! (Y TRUE)))))",
                "CoCoSpecCode": "H((YtoPre(((lift_mode = wing_borne) and (kias > 90.0))) => ((lift_mode = wing_borne) or not (YtoPre(true)))))",
                "ftExpanded_fetched": "(LAST V ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
                "ftExpandedUnoptimized": "(LAST V (((lift_mode = wing_borne) & (kias > 90.0)) -> (LAST | (X (lift_mode = wing_borne)))))",
                "ftExpanded": "(LAST V (((lift_mode = wing_borne) & (kias > 90.0)) -> (LAST | (X (lift_mode = wing_borne)))))",
                "ftInfAUExpanded_fetched": "(G ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
                "ftInfAUExpanded": "(G (((lift_mode = wing_borne) & (kias > 90.0)) -> (X (lift_mode = wing_borne))))",
                "component": "vehicle"
            },
            "_id": "b91e9110-9a0b-11ee-80d9-a77c0c691f6d"
        }
    ],
    "variables": [
        {
            "project": "LPC",
            "component_name": "vehicle",
            "variable_name": "cr",
            "reqs": [
                "79b7bd20-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b96ad2-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b9e000-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba2e22-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba7c40-5fd9-11ed-9cbe-ffd8cbaa6d62"
            ],
            "dataType": "boolean",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "LPCvehiclecr"
        },
        {
            "project": "LPC",
            "component_name": "vehicle",
            "variable_name": "dr",
            "reqs": [
                "79b80b40-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8f5a0-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba0710-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79baf171-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79bb1880-5fd9-11ed-9cbe-ffd8cbaa6d62"
            ],
            "dataType": "boolean",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "LPCvehicledr"
        },
        {
            "project": "LPC",
            "component_name": "vehicle",
            "variable_name": "fcs",
            "reqs": [
                "79b79610-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b7e431-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b88070-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b9b8f2-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba2e21-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba5531-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79baa350-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79bb1881-5fd9-11ed-9cbe-ffd8cbaa6d62"
            ],
            "dataType": "boolean",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "LPCvehiclefcs"
        },
        {
            "project": "LPC",
            "component_name": "vehicle",
            "variable_name": "hover_control_mode",
            "reqs": [
                "1958ecc0-9a0b-11ee-80d9-a77c0c691f6d",
                "50bf5be0-9a0b-11ee-80d9-a77c0c691f6d",
                "79b85960-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8a781-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8ce90-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8f5a1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b943c1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b9b8f1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79baca60-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79baca61-5fd9-11ed-9cbe-ffd8cbaa6d62"
            ],
            "dataType": "boolean",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "LPCvehiclehover_control_mode"
        },
        {
            "project": "LPC",
            "component_name": "vehicle",
            "variable_name": "kgs",
            "reqs": [
                "1958ecc0-9a0b-11ee-80d9-a77c0c691f6d",
                "50bf5be0-9a0b-11ee-80d9-a77c0c691f6d",
                "79b8a781-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8ce90-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8f5a1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b943c1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b96ad1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b9b8f1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba5530-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79baca60-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79baca61-5fd9-11ed-9cbe-ffd8cbaa6d62"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "LPCvehiclekgs"
        },
        {
            "project": "LPC",
            "component_name": "vehicle",
            "variable_name": "kias",
            "reqs": [
                "50bf5be0-9a0b-11ee-80d9-a77c0c691f6d",
                "79b76f01-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b7bd20-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b7bd21-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b7e431-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b80b40-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b85961-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b88070-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b88071-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8a780-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8a781-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8ce91-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8f5a0-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b91cb0-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b943c0-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b96ad0-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b96ad1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b96ad2-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b991e0-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b991e1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b9b8f2-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b9e000-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba0710-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba2e21-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba2e22-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba5530-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba5531-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba7c40-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba7c42-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79baca60-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79baf171-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79bb1880-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "8d7f9310-9a0b-11ee-80d9-a77c0c691f6d",
                "b91e9110-9a0b-11ee-80d9-a77c0c691f6d"
            ],
            "dataType": "double",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "LPCvehiclekias"
        },
        {
            "project": "LPC",
            "component_name": "vehicle",
            "variable_name": "lift_mode",
            "reqs": [
                "1958ecc0-9a0b-11ee-80d9-a77c0c691f6d",
                "50bf5be0-9a0b-11ee-80d9-a77c0c691f6d",
                "79b76f00-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b76f01-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b79611-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b7bd21-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b7e430-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b80b41-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b83250-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b83251-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b85961-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b88071-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8a780-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8a781-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8ce90-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8ce91-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8f5a1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b91cb0-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b91cb1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b943c1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b96ad0-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b991e1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b9b8f0-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba0711-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79baca60-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79baca61-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "8d7f9310-9a0b-11ee-80d9-a77c0c691f6d",
                "b91e9110-9a0b-11ee-80d9-a77c0c691f6d"
            ],
            "dataType": "integer",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "LPCvehiclelift_mode"
        },
        {
            "project": "LPC",
            "component_name": "vehicle",
            "variable_name": "rearprop",
            "reqs": [
                "79b85960-5fd9-11ed-9cbe-ffd8cbaa6d62"
            ],
            "dataType": "boolean",
            "idType": "Output",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "LPCvehiclerearprop"
        },
        {
            "project": "LPC",
            "component_name": "vehicle",
            "variable_name": "semi_thrust_borne",
            "reqs": [
                "50bf5be0-9a0b-11ee-80d9-a77c0c691f6d",
                "79b85961-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8a780-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8a781-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8ce90-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8f5a1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b91cb1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79baca60-5fd9-11ed-9cbe-ffd8cbaa6d62"
            ],
            "dataType": "integer",
            "idType": "Internal",
            "moduleName": "",
            "description": "1",
            "assignment": "1",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "LPCvehiclesemi_thrust_borne"
        },
        {
            "project": "LPC",
            "component_name": "vehicle",
            "variable_name": "semi_wing_borne",
            "reqs": [
                "79b7bd21-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b85961-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b88071-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8a780-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8ce91-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b91cb1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b991e1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "8d7f9310-9a0b-11ee-80d9-a77c0c691f6d"
            ],
            "dataType": "integer",
            "idType": "Internal",
            "moduleName": "",
            "description": "2",
            "assignment": "2",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "LPCvehiclesemi_wing_borne"
        },
        {
            "project": "LPC",
            "component_name": "vehicle",
            "variable_name": "thrust_borne",
            "reqs": [
                "1958ecc0-9a0b-11ee-80d9-a77c0c691f6d",
                "79b76f00-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b79611-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b7e430-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b80b41-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b83250-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b83251-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8ce90-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8f5a1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b91cb1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b943c1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b9b8f0-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba0711-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79baca61-5fd9-11ed-9cbe-ffd8cbaa6d62"
            ],
            "dataType": "integer",
            "idType": "Internal",
            "moduleName": "",
            "description": "0",
            "assignment": "0",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "LPCvehiclethrust_borne"
        },
        {
            "project": "LPC",
            "component_name": "vehicle",
            "variable_name": "wind_speed",
            "reqs": [
                "79b9e001-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba2e20-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba5530-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79ba7c41-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79baf170-5fd9-11ed-9cbe-ffd8cbaa6d62"
            ],
            "dataType": "double",
            "idType": "Input",
            "moduleName": "",
            "description": "",
            "assignment": "",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "LPCvehiclewind_speed"
        },
        {
            "project": "LPC",
            "component_name": "vehicle",
            "variable_name": "wing_borne",
            "reqs": [
                "79b76f01-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b8ce91-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b91cb0-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b91cb1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b96ad0-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "79b991e1-5fd9-11ed-9cbe-ffd8cbaa6d62",
                "b91e9110-9a0b-11ee-80d9-a77c0c691f6d"
            ],
            "dataType": "integer",
            "idType": "Internal",
            "moduleName": "",
            "description": "3",
            "assignment": "3",
            "copilotAssignment": "",
            "modeRequirement": "",
            "modeldoc": false,
            "modeldoc_id": "",
            "modelComponent": "",
            "completed": true,
            "_id": "LPCvehiclewing_borne"
        }
    ]
}