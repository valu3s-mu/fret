--Historically
node H(X:bool) returns (Y:bool);
let
    Y = X -> (X and (pre Y));
tel

--Y since inclusive X
node SI(X,Y: bool) returns (Z:bool);
let
Z = Y and (X or (false -> pre Z));
tel

--Y since X
node S(X,Y: bool) returns (Z:bool);
let
Z = X or (Y and (false -> pre Z));
tel

--Once
node O(X:bool) returns (Y:bool);
let
 Y = X or (false -> pre Y);
tel

--Timed Once: less than or equal to N
node OTlore( N: int; X: bool) returns (Y: bool);
    var C:int;
let
    C = if X then 0
        else (-1 -> pre C + (if pre C <0 then 0 else 1));

    Y = 0 <= C and C <= N;
tel

--Timed Once: general case
node OT( L: int;  R: int; X: bool) returns (Y: bool);
var  D:bool;
let
  D=delay(X, R);
  Y=OTlore(L-R, D);
tel

-- Timed Historically: general case
node HT( L: int;  R: int; X: bool) returns (Y: bool);
let
  Y = not OT(L, R, not X);
tel

-- Timed Since: general case
node ST( L: int;  R: int; X: bool; Y: bool)  returns (Z: bool);
let
  Z = S(X, Y) and OT(L, R, X);
tel

-- Timed Since: general case
node SIT( L: int;  R: int; X: bool; Y: bool) returns (Z: bool);
let
  Z = SI(X, Y) and OT(L, R, X);
tel


node delay(X:bool;  R:int) returns(Y:bool);
let

  Y = X;
 
tel

node abs_real(x:real) returns(y:real);
let
    y = if x >= 0.0 then x else - x;
tel


node RollAutopilotSpec( autopilotEngaged:bool; autopilot_engaged:bool;
hdg_hold_mode_cmd:real; hdg_mode_is_active:bool; roll_cmd:real;
roll_actuator_command:real ;  roll_hold_mode_cmd:real; roll_hold:bool) returns ( );

var abs_aileron_cmd:real; no_other_lateral_mode:bool;  hdg_hold:bool;
AP002c:bool; AP002a:bool; AP001A:bool; AP007:bool; AP008A:bool; AP008B:bool;
FTP: bool; rollHold:bool; 
let


FTP = true->false;


abs_aileron_cmd = abs_real(roll_actuator_command);
no_other_lateral_mode = not hdg_mode_is_active;

hdg_hold = hdg_mode_is_active;
rollHold = roll_hold; 
 
 
(* Req text: in roll_hold mode RollAutopilot shall always satisfy roll_cmd = roll_hold_mode_cmd  *)
AP002c = true;--((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (roll_cmd = roll_hold_mode_cmd) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (roll_cmd = roll_hold_mode_cmd) ))));  
 
(* Req text: when in rollHold mode RollAutopilot shall always satisfy autopilotEngaged & no_other_lateral_mode  *)
AP002a = true;--((H(((( not rollHold) and (pre (rollHold))) and ( not FTP)) => (pre (SI( (rollHold and (FTP or (pre ( not rollHold)))), (autopilotEngaged and no_other_lateral_mode) ))))) and ((SI( (rollHold and (FTP or (pre ( not rollHold)))), ( not (( not rollHold) and (pre (rollHold)))) )) => (SI( (rollHold and (FTP or (pre ( not rollHold)))), (autopilotEngaged and no_other_lateral_mode) ))));  
 
(* Req text: RollAutopilot shall always satisfy !  autopilot_engaged => roll_actuator_command = 0.0  *)
AP001A = (H((not autopilot_engaged => roll_actuator_command = 0.0)));  
 
(* Req text: RollAutopilot shall always satisfy abs_aileron_cmd <= 15.0  *)
AP007 = (H((abs_aileron_cmd <= 15.0)));  
 
(* Req text: in hdg_hold mode RollAutopilot shall always satisfy hdg_mode_is_active  *)
AP008A = ((H(((( not hdg_hold) and (pre (hdg_hold))) and ( not FTP)) => (pre (SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), (hdg_mode_is_active) ))))) and ((SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), ( not (( not hdg_hold) and (pre (hdg_hold)))) )) => (SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), (hdg_mode_is_active) ))));  
 
(* Req text: in hdg_hold mode RollAutopilot shall always satisfy roll_cmd = hdg_hold_mode_cmd  *)
AP008B = true;--((H(((( not hdg_hold) and (pre (hdg_hold))) and ( not FTP)) => (pre (SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), (roll_cmd = hdg_hold_mode_cmd) ))))) and ((SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), ( not (( not hdg_hold) and (pre (hdg_hold)))) )) => (SI( (hdg_hold and (FTP or (pre ( not hdg_hold)))), (roll_cmd = hdg_hold_mode_cmd) ))));  

 
 --%PROPERTY AP002c;  
 --%PROPERTY AP002a;  
 --%PROPERTY AP001A;  
 --%PROPERTY AP007;  
 --%PROPERTY AP008A;  
 --%PROPERTY AP008B; 
--%REALIZABLE autopilotEngaged, autopilot_engaged, hdg_hold_mode_cmd,
hdg_mode_is_active, roll_cmd, roll_hold; 

tel

