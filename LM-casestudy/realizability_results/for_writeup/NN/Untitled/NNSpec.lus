--Historically
node H(X:bool) returns (Y:bool);
let
    Y = X -> (X and (pre Y));
tel

--Y since inclusive X
node SI(X,Y: bool) returns (Z:bool);
let
Z = Y and (X or (false -> pre Z));
tel

--Y since X
node S(X,Y: bool) returns (Z:bool);
let
Z = X or (Y and (false -> pre Z));
tel

--Once
node O(X:bool) returns (Y:bool);
let
 Y = X or (false -> pre Y);
tel

--Timed Once: less than or equal to N
node OTlore( N: int; X: bool) returns (Y: bool);
    var C:int;
let
    C = if X then 0
        else (-1 -> pre C + (if pre C <0 then 0 else 1));

    Y = 0 <= C and C <= N;
tel

--Timed Once: general case
node OT( L: int;  R: int; X: bool) returns (Y: bool);
var  D:bool;
let
  D=delay(X, R);
  Y=OTlore(L-R, D);
tel

-- Timed Historically: general case
node HT( L: int;  R: int; X: bool) returns (Y: bool);
let
  Y = not OT(L, R, not X);
tel

-- Timed Since: general case
node ST( L: int;  R: int; X: bool; Y: bool)  returns (Z: bool);
let
  Z = S(X, Y) and OT(L, R, X);
tel

-- Timed Since: general case
node SIT( L: int;  R: int; X: bool; Y: bool) returns (Z: bool);
let
  Z = SI(X, Y) and OT(L, R, X);
tel


node delay(X:bool;  R:int) returns(Y:bool);
let

 
  Y = if (R=0) then X
   
     else delay200(X);
 
tel


  node delay200(X:bool) returns(Y:bool);
  var  X_0,  X_1,  X_2,  X_3,  X_4,  X_5,  X_6,  X_7,  X_8,  X_9,  X_10,  X_11,  X_12,  X_13,  X_14,  X_15,  X_16,  X_17,  X_18,  X_19,  X_20,  X_21,  X_22,  X_23,  X_24,  X_25,  X_26,  X_27,  X_28,  X_29,  X_30,  X_31,  X_32,  X_33,  X_34,  X_35,  X_36,  X_37,  X_38,  X_39,  X_40,  X_41,  X_42,  X_43,  X_44,  X_45,  X_46,  X_47,  X_48,  X_49,  X_50,  X_51,  X_52,  X_53,  X_54,  X_55,  X_56,  X_57,  X_58,  X_59,  X_60,  X_61,  X_62,  X_63,  X_64,  X_65,  X_66,  X_67,  X_68,  X_69,  X_70,  X_71,  X_72,  X_73,  X_74,  X_75,  X_76,  X_77,  X_78,  X_79,  X_80,  X_81,  X_82,  X_83,  X_84,  X_85,  X_86,  X_87,  X_88,  X_89,  X_90,  X_91,  X_92,  X_93,  X_94,  X_95,  X_96,  X_97,  X_98,  X_99,  X_100,  X_101,  X_102,  X_103,  X_104,  X_105,  X_106,  X_107,  X_108,  X_109,  X_110,  X_111,  X_112,  X_113,  X_114,  X_115,  X_116,  X_117,  X_118,  X_119,  X_120,  X_121,  X_122,  X_123,  X_124,  X_125,  X_126,  X_127,  X_128,  X_129,  X_130,  X_131,  X_132,  X_133,  X_134,  X_135,  X_136,  X_137,  X_138,  X_139,  X_140,  X_141,  X_142,  X_143,  X_144,  X_145,  X_146,  X_147,  X_148,  X_149,  X_150,  X_151,  X_152,  X_153,  X_154,  X_155,  X_156,  X_157,  X_158,  X_159,  X_160,  X_161,  X_162,  X_163,  X_164,  X_165,  X_166,  X_167,  X_168,  X_169,  X_170,  X_171,  X_172,  X_173,  X_174,  X_175,  X_176,  X_177,  X_178,  X_179,  X_180,  X_181,  X_182,  X_183,  X_184,  X_185,  X_186,  X_187,  X_188,  X_189,  X_190,  X_191,  X_192,  X_193,  X_194,  X_195,  X_196,  X_197,  X_198,  X_199, X_200 :bool;
  let

  X_0=X; 
  X_1=false -> pre X_0;
  X_2=false -> pre X_1;
  X_3=false -> pre X_2;
  X_4=false -> pre X_3;
  X_5=false -> pre X_4;
  X_6=false -> pre X_5;
  X_7=false -> pre X_6;
  X_8=false -> pre X_7;
  X_9=false -> pre X_8;
  X_10=false -> pre X_9;
  X_11=false -> pre X_10;
  X_12=false -> pre X_11;
  X_13=false -> pre X_12;
  X_14=false -> pre X_13;
  X_15=false -> pre X_14;
  X_16=false -> pre X_15;
  X_17=false -> pre X_16;
  X_18=false -> pre X_17;
  X_19=false -> pre X_18;
  X_20=false -> pre X_19;
  X_21=false -> pre X_20;
  X_22=false -> pre X_21;
  X_23=false -> pre X_22;
  X_24=false -> pre X_23;
  X_25=false -> pre X_24;
  X_26=false -> pre X_25;
  X_27=false -> pre X_26;
  X_28=false -> pre X_27;
  X_29=false -> pre X_28;
  X_30=false -> pre X_29;
  X_31=false -> pre X_30;
  X_32=false -> pre X_31;
  X_33=false -> pre X_32;
  X_34=false -> pre X_33;
  X_35=false -> pre X_34;
  X_36=false -> pre X_35;
  X_37=false -> pre X_36;
  X_38=false -> pre X_37;
  X_39=false -> pre X_38;
  X_40=false -> pre X_39;
  X_41=false -> pre X_40;
  X_42=false -> pre X_41;
  X_43=false -> pre X_42;
  X_44=false -> pre X_43;
  X_45=false -> pre X_44;
  X_46=false -> pre X_45;
  X_47=false -> pre X_46;
  X_48=false -> pre X_47;
  X_49=false -> pre X_48;
  X_50=false -> pre X_49;
  X_51=false -> pre X_50;
  X_52=false -> pre X_51;
  X_53=false -> pre X_52;
  X_54=false -> pre X_53;
  X_55=false -> pre X_54;
  X_56=false -> pre X_55;
  X_57=false -> pre X_56;
  X_58=false -> pre X_57;
  X_59=false -> pre X_58;
  X_60=false -> pre X_59;
  X_61=false -> pre X_60;
  X_62=false -> pre X_61;
  X_63=false -> pre X_62;
  X_64=false -> pre X_63;
  X_65=false -> pre X_64;
  X_66=false -> pre X_65;
  X_67=false -> pre X_66;
  X_68=false -> pre X_67;
  X_69=false -> pre X_68;
  X_70=false -> pre X_69;
  X_71=false -> pre X_70;
  X_72=false -> pre X_71;
  X_73=false -> pre X_72;
  X_74=false -> pre X_73;
  X_75=false -> pre X_74;
  X_76=false -> pre X_75;
  X_77=false -> pre X_76;
  X_78=false -> pre X_77;
  X_79=false -> pre X_78;
  X_80=false -> pre X_79;
  X_81=false -> pre X_80;
  X_82=false -> pre X_81;
  X_83=false -> pre X_82;
  X_84=false -> pre X_83;
  X_85=false -> pre X_84;
  X_86=false -> pre X_85;
  X_87=false -> pre X_86;
  X_88=false -> pre X_87;
  X_89=false -> pre X_88;
  X_90=false -> pre X_89;
  X_91=false -> pre X_90;
  X_92=false -> pre X_91;
  X_93=false -> pre X_92;
  X_94=false -> pre X_93;
  X_95=false -> pre X_94;
  X_96=false -> pre X_95;
  X_97=false -> pre X_96;
  X_98=false -> pre X_97;
  X_99=false -> pre X_98;
  X_100=false -> pre X_99;
  X_101=false -> pre X_100;
  X_102=false -> pre X_101;
  X_103=false -> pre X_102;
  X_104=false -> pre X_103;
  X_105=false -> pre X_104;
  X_106=false -> pre X_105;
  X_107=false -> pre X_106;
  X_108=false -> pre X_107;
  X_109=false -> pre X_108;
  X_110=false -> pre X_109;
  X_111=false -> pre X_110;
  X_112=false -> pre X_111;
  X_113=false -> pre X_112;
  X_114=false -> pre X_113;
  X_115=false -> pre X_114;
  X_116=false -> pre X_115;
  X_117=false -> pre X_116;
  X_118=false -> pre X_117;
  X_119=false -> pre X_118;
  X_120=false -> pre X_119;
  X_121=false -> pre X_120;
  X_122=false -> pre X_121;
  X_123=false -> pre X_122;
  X_124=false -> pre X_123;
  X_125=false -> pre X_124;
  X_126=false -> pre X_125;
  X_127=false -> pre X_126;
  X_128=false -> pre X_127;
  X_129=false -> pre X_128;
  X_130=false -> pre X_129;
  X_131=false -> pre X_130;
  X_132=false -> pre X_131;
  X_133=false -> pre X_132;
  X_134=false -> pre X_133;
  X_135=false -> pre X_134;
  X_136=false -> pre X_135;
  X_137=false -> pre X_136;
  X_138=false -> pre X_137;
  X_139=false -> pre X_138;
  X_140=false -> pre X_139;
  X_141=false -> pre X_140;
  X_142=false -> pre X_141;
  X_143=false -> pre X_142;
  X_144=false -> pre X_143;
  X_145=false -> pre X_144;
  X_146=false -> pre X_145;
  X_147=false -> pre X_146;
  X_148=false -> pre X_147;
  X_149=false -> pre X_148;
  X_150=false -> pre X_149;
  X_151=false -> pre X_150;
  X_152=false -> pre X_151;
  X_153=false -> pre X_152;
  X_154=false -> pre X_153;
  X_155=false -> pre X_154;
  X_156=false -> pre X_155;
  X_157=false -> pre X_156;
  X_158=false -> pre X_157;
  X_159=false -> pre X_158;
  X_160=false -> pre X_159;
  X_161=false -> pre X_160;
  X_162=false -> pre X_161;
  X_163=false -> pre X_162;
  X_164=false -> pre X_163;
  X_165=false -> pre X_164;
  X_166=false -> pre X_165;
  X_167=false -> pre X_166;
  X_168=false -> pre X_167;
  X_169=false -> pre X_168;
  X_170=false -> pre X_169;
  X_171=false -> pre X_170;
  X_172=false -> pre X_171;
  X_173=false -> pre X_172;
  X_174=false -> pre X_173;
  X_175=false -> pre X_174;
  X_176=false -> pre X_175;
  X_177=false -> pre X_176;
  X_178=false -> pre X_177;
  X_179=false -> pre X_178;
  X_180=false -> pre X_179;
  X_181=false -> pre X_180;
  X_182=false -> pre X_181;
  X_183=false -> pre X_182;
  X_184=false -> pre X_183;
  X_185=false -> pre X_184;
  X_186=false -> pre X_185;
  X_187=false -> pre X_186;
  X_188=false -> pre X_187;
  X_189=false -> pre X_188;
  X_190=false -> pre X_189;
  X_191=false -> pre X_190;
  X_192=false -> pre X_191;
  X_193=false -> pre X_192;
  X_194=false -> pre X_193;
  X_195=false -> pre X_194;
  X_196=false -> pre X_195;
  X_197=false -> pre X_196;
  X_198=false -> pre X_197;
  X_199=false -> pre X_198;
  X_200=false -> pre X_199;
  Y = X_200;

  tel


node NNSpec( x:real; y:real; z:real   ) returns ( );

var AbsoluteErrorZtMinusZ:real; DeltaZDividedByXt:real; DeltaZDividedByYt:real; xt:real; yt:real; NN004:bool; NN003B:bool; NN003A:bool; NN002:bool; NN001:bool; FTP: bool; 
let


FTP = true->false;


AbsoluteErrorZtMinusZ = zt;
DeltaZDividedByXt = 0.0 -> (z - pre z) /(xt - pre xt );
DeltaZDividedByYt = (z - pre z) / (yt - pre yt);
xt = -0.881765 -> pre( -1.318121 -> pre( 0.708402 -> pre( 1.609672 -> pre( -0.592051 -> pre( -1.599366 -> pre( 1.172009 -> pre( -0.126270 -> pre( 0.749365 -> pre( 0.732314 -> pre( -0.314256 -> pre( 0.637370 -> pre( 0.533709 -> pre( 0.1000584 -> pre( -1.234874 -> pre( 0.047624 -> pre( 0.993321 -> pre( -0.320692 -> pre( 0.949918 -> pre( 0.745871 -> pre( 1.822904 -> pre( -0.768374 -> pre( -0.630797 -> pre( -0.451866 -> pre( -1.895296 -> pre( 0.534186 -> pre( 0.2610004 -> pre( -0.537954 -> pre( -0.314165 -> pre( -0.151199 -> pre( -0.742245 -> pre( -1.097353 -> pre( -1.536253 -> pre( -1.464136 -> pre( 1.786094 -> pre( -0.030268 -> pre( 0.992855 -> pre( -0.756259 -> pre( -1.969179 -> pre( 0.462487 -> pre( -0.569707 -> pre( 0.595316 -> pre( 1.383909 -> pre( -1.594587 -> pre( 0.353207 -> pre( 0.329529 -> pre( 0.087215 -> pre( -0.181601 -> pre( 1.866808 -> pre( -1.270772 -> pre( 0.237569 -> pre( 0.505898 -> pre( -1.879480 -> pre( 0.569092 -> pre( 1.352645 -> pre( -0.419456 -> pre( -0.250631 -> pre( -1.660469 -> pre( 0.3255100 -> pre( 1.486728 -> pre( -1.172372 -> pre( -1.621560 -> pre( -1.248191 -> pre( 0.671346 -> pre( 0.929684 -> pre( 0.524042 -> pre( -0.127175 -> pre( -0.742551 -> pre( 0.565867 -> pre( 0.2481008 -> pre( 0.654907 -> pre( -1.500492 -> pre( 0.6961009 -> pre( 0.721245 -> pre( 1.720481 -> pre( 1.315279 -> pre( -1.287599 -> pre( 1.796963 -> pre( -1.201509 -> pre( -1.129277 -> pre( -1.965912 -> pre( -0.797494 -> pre( -0.902117 -> pre( 0.345794 -> pre( -0.413789 -> pre( -1.254389 -> pre( -0.428734 -> pre( -1.381625 -> pre( 1.329218 -> pre( -1.400992 -> pre( 0.718184 -> pre( 1.000360 -> pre( -1.940440 -> pre( -1.4310014 -> pre( -1.877378 -> pre( 1.234782 -> pre( -1.811416 -> pre( 0.664726 -> pre( -0.175870 -> pre( 1.211985 -> pre( -0.566244 -> pre( -1.898664 -> pre( -1.125647 -> pre( 0.843660 -> pre( 0.195683 -> pre( 1.478772 -> pre( 0.955343 -> pre( -1.587079 -> pre( 1.885733 -> pre( 0.954850 -> pre( -1.944570 -> pre( 0.716487 -> pre( -0.057989 -> pre( -1.861127 -> pre( -1.542242 -> pre( -1.693500 -> pre( 0.431299 -> pre( -1.066137 -> pre( -1.431954 -> pre( 0.120693 -> pre( 1.721205 -> pre( 0.467611 -> pre( 0.759568 -> pre( -1.062296 -> pre( -1.172625 -> pre( -1.850535 -> pre( 0.653460 -> pre( 0.029018 -> pre( -0.056798 -> pre( 1.446780 -> pre( 1.862060 -> pre( 1.038752 -> pre( -1.013282 -> pre( 0.705070 -> pre( 1.037222 -> pre( 0.344759 -> pre( 1.289757 -> pre( 1.707341 -> pre( 0.550268 -> pre( -1.924249 -> pre( -1.262638 -> pre( -1.893037 -> pre( 1.739995 -> pre( -0.062131 -> pre( 1.179142 -> pre( -0.172659 -> pre( -0.023163 -> pre( -0.297144 -> pre( 1.567089 -> pre( 1.497140 -> pre( 0.532601 -> pre( -0.830883 -> pre( -0.833287 -> pre( -1.018000 -> pre( 0.817392 -> pre( 1.098448 -> pre( 1.290614 -> pre( 1.224759 -> pre( -0.984916 -> pre( 1.201999 -> pre( 0.518835 -> pre( -1.073994 -> pre( -0.475693 -> pre( -0.187193 -> pre( 0.002238 -> pre( 0.162286 -> pre( -0.619419 -> pre( -0.834280 -> pre( 0.814114 -> pre( 1.736314 -> pre( 0.376699 -> pre( 0.372363 -> pre( 0.954924 -> pre( -0.509427 -> pre( -0.186918 -> pre( 0.037502 -> pre( 1.714843 -> pre( -0.196849 -> pre( 0.549739 -> pre( -0.162545 -> pre( 0.215098 -> pre( -1.835069 -> pre( 1.208809 -> pre( 0.686047 -> pre( -1.198690 -> pre( -1.941655 -> pre( 1.052664 -> pre( 0.270047 -> pre( 0.616855 -> pre( 0.538962 -> pre( 0.937321 -> pre( 1.549306 -> pre( 0.663636 -> pre( -1.517302 -> pre( 0.854942 -> pre( -0.2110091 -> pre( 0.563929 -> pre( 0.595585 -> pre( 0.713502 -> pre( -1.764689 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ;
yt = -1.1004187 -> pre( -1.328074 -> pre( 1.714118 -> pre( 0.060924 -> pre( 0.693454 -> pre( 0.671201 -> pre( -1.674154 -> pre( -1.099706 -> pre( -0.863243 -> pre( 1.655055 -> pre( -1.083594 -> pre( -1.005518 -> pre( 0.705163 -> pre( 0.593963 -> pre( 0.814707 -> pre( 1.348413 -> pre( 0.909183 -> pre( -1.922262 -> pre( 0.334986 -> pre( 1.683507 -> pre( -1.633288 -> pre( 0.218242 -> pre( 1.723211 -> pre( -1.202188 -> pre( 0.1001278 -> pre( -1.493044 -> pre( 0.994909 -> pre( -0.741325 -> pre( -1.251303 -> pre( 1.921580 -> pre( 0.851309 -> pre( 1.302600 -> pre( 0.732879 -> pre( 0.757607 -> pre( 0.123504 -> pre( -1.244585 -> pre( -0.027937 -> pre( 0.238159 -> pre( 1.313121 -> pre( -1.188526 -> pre( 0.1100985 -> pre( 1.231245 -> pre( -0.579582 -> pre( 0.1910020 -> pre( 0.869751 -> pre( -1.189950 -> pre( 0.575028 -> pre( -1.999644 -> pre( 0.052708 -> pre( 0.279316 -> pre( -1.971853 -> pre( 1.569890 -> pre( 1.332774 -> pre( 1.1000662 -> pre( 1.152543 -> pre( -0.505482 -> pre( -1.390752 -> pre( -0.590959 -> pre( 0.580392 -> pre( 1.727747 -> pre( -1.626716 -> pre( 0.955111 -> pre( -1.778931 -> pre( 1.028634 -> pre( -0.146043 -> pre( -1.819982 -> pre( 1.368118 -> pre( -1.341154 -> pre( -1.539704 -> pre( -0.913757 -> pre( -0.742455 -> pre( 0.424358 -> pre( 0.709867 -> pre( 1.950569 -> pre( 1.973043 -> pre( 1.030145 -> pre( -0.899762 -> pre( 1.816055 -> pre( -0.355671 -> pre( -1.133507 -> pre( 0.516520 -> pre( -1.940524 -> pre( -1.826801 -> pre( -1.278952 -> pre( -1.198140 -> pre( 0.877430 -> pre( -0.228530 -> pre( 1.381970 -> pre( -0.440840 -> pre( 1.350209 -> pre( 0.993675 -> pre( 0.335444 -> pre( -1.357706 -> pre( 0.115361 -> pre( -0.149316 -> pre( -0.481825 -> pre( -1.627080 -> pre( -0.963418 -> pre( -0.656653 -> pre( -0.499551 -> pre( -1.414961 -> pre( -0.732920 -> pre( -0.875098 -> pre( 1.280495 -> pre( -0.631641 -> pre( 1.488009 -> pre( -0.927882 -> pre( 1.1001727 -> pre( 0.436836 -> pre( -1.928125 -> pre( 0.806046 -> pre( -1.936991 -> pre( 0.735572 -> pre( 1.511607 -> pre( -0.272776 -> pre( 0.525372 -> pre( 0.344163 -> pre( -1.090355 -> pre( 1.138619 -> pre( -0.849455 -> pre( 1.697502 -> pre( -0.806099 -> pre( 0.145213 -> pre( -0.6654100 -> pre( -1.050824 -> pre( 0.180957 -> pre( -1.569257 -> pre( -1.451379 -> pre( -1.622290 -> pre( -0.756466 -> pre( 1.250546 -> pre( 0.054231 -> pre( 1.465906 -> pre( 1.921949 -> pre( -0.693389 -> pre( -1.121533 -> pre( 0.072895 -> pre( -0.587977 -> pre( 1.437909 -> pre( -0.959917 -> pre( 1.374884 -> pre( 0.331206 -> pre( 0.877622 -> pre( -0.625905 -> pre( -1.962904 -> pre( -1.230214 -> pre( 0.029551 -> pre( -1.903033 -> pre( 0.200166 -> pre( -0.895264 -> pre( 0.784965 -> pre( 1.525411 -> pre( -1.901274 -> pre( -0.635174 -> pre( -0.314377 -> pre( -1.679955 -> pre( -1.682585 -> pre( -1.7100495 -> pre( 1.601364 -> pre( 1.877233 -> pre( -0.434772 -> pre( -0.745660 -> pre( 0.213254 -> pre( 1.168192 -> pre( 1.193256 -> pre( 1.453034 -> pre( 1.191849 -> pre( -1.974494 -> pre( 1.679606 -> pre( -1.928151 -> pre( -1.882334 -> pre( 0.845808 -> pre( 0.153657 -> pre( 0.098354 -> pre( 0.008960 -> pre( -1.7373100 -> pre( -1.079838 -> pre( -1.531839 -> pre( 1.959084 -> pre( -1.717934 -> pre( -1.759905 -> pre( 0.646308 -> pre( -0.623769 -> pre( -1.485947 -> pre( 0.548543 -> pre( 0.985953 -> pre( 1.2210069 -> pre( -0.923891 -> pre( -0.264081 -> pre( -0.392774 -> pre( 0.432569 -> pre( 1.080350 -> pre( 1.764496 -> pre( -1.474141 -> pre( -0.9771009 -> pre( -0.486757 -> pre( 1.974943 -> pre( -0.636195 -> pre( 1.598208 -> pre( -1.050074 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );




 
(* Req text: NN shall for 200 secs satisfy ( x = xt & y = yt  => AbsoluteErrorZtMinusZ <= 0.01)  *)
NN004 = (H((OT(200,0,FTP)) -> (( x = xt and y = yt -> AbsoluteErrorZtMinusZ <= 0.01 ))));  
 
(* Req text: NN shall for 200 secs satisfy DeltaZDividedByYt <= 10.0 & DeltaZDividedByYt >= -35.0  *)
NN003B = (H((OT(200,0,FTP)) => (DeltaZDividedByYt <= 10.0 and DeltaZDividedByYt >= -35.0)));  
 
(* Req text: NN shall for 200 secs satisfy DeltaZDividedByXt<= 10.0 & DeltaZDividedByXt >= -35.0  *)
NN003A = (H((OT(200,0,FTP)) => (DeltaZDividedByXt <= 10.0 and DeltaZDividedByXt >= -35.0)));  
 
(* Req text: NN shall always satisfy z >= -0.2  *)
NN002 = (H((z >= -0.2)));  
 
(* Req text: NN shall always satisfy z <=1.1  *)
NN001 = (H((z <= 1.1)));  

 
 --%PROPERTY NN004;  
 --%PROPERTY NN003B;  
 --%PROPERTY NN003A;  
 --%PROPERTY NN002;  
 --%PROPERTY NN001; 
--%REALIZABLE x, y;  

tel

