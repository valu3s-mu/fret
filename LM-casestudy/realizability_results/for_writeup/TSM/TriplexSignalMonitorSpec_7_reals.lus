--Historically
node H(X:bool) returns (Y:bool);
let
    Y = X -> (X and (pre Y));
tel

--Y since inclusive X
node SI(X,Y: bool) returns (Z:bool);
let
Z = Y and (X or (false -> pre Z));
tel

--Y since X
node S(X,Y: bool) returns (Z:bool);
let
Z = X or (Y and (false -> pre Z));
tel

--Once
node O(X:bool) returns (Y:bool);
let
 Y = X or (false -> pre Y);
tel

--Timed Once: less than or equal to N
node OTlore( N: int; X: bool) returns (Y: bool);
    var C:int;
let
    C = if X then 0
        else (-1 -> pre C + (if pre C <0 then 0 else 1));

    Y = 0 <= C and C <= N;
tel

--Timed Once: general case
node OT( L: int;  R: int; X: bool) returns (Y: bool);
 
let
Y=OTlore(L-R,X);
tel


-- Timed Historically: general case
node HT( L: int;  R: int; X: bool) returns (Y: bool);
let
  Y = not OT(L, R, not X);
tel

-- Timed Since: general case
node ST( L: int;  R: int; X: bool; Y: bool)  returns (Z: bool);
let
  Z = S(X, Y) and OT(L, R, X);
tel

-- Timed Since: general case
node SIT( L: int;  R: int; X: bool; Y: bool) returns (Z: bool);
let
  Z = SI(X, Y) and OT(L, R, X);
tel


node abs(x:real) returns (y:real); let
y = if x >= 0.0 then x else - x; tel



node TriplexSignalMonitorSpec( PCLimit:real;  ia:real;  ib:real;  ic:real;
FC: real;  PC: real; set_val: real; Tlevel: real) returns ( );

var C1:bool; C2:bool; C3:bool; countFC0:real; failure_must_be_latched:bool;
failureinprogress:bool; midvalue:real; nofail:bool; prePC:real;
pre_no_fail:bool; presetval:real; prevSet_val:real; setval:real;
single_fail_reported:bool; singlefailreported:bool; TSM004:bool; 
TSM001:bool; TSM004V1:bool; TSM003b:bool; TSM003c:bool; TSM002:bool;
 TSM004v2:bool; TSM003a:bool; FTP: bool;  miscompare : bool; 


let


FTP = true->false;
miscompare  = (not C1 and C2 and C3) or (C1 and not C2 and C3) or (C1 and C2 and not C3);


C1 = abs(ia - ib) > Tlevel;
C2 = abs(ib - ic) > Tlevel;
C3 = abs(ia - ic) > Tlevel;

countFC0 = 1.0;
failure_must_be_latched = miscompare and prePC > PCLimit;
failureinprogress = miscompare and prePC <= PCLimit and PC > 0.0;

midvalue = if ((ia <= ib and ib <= ic)
or (ic <= ib and ib <= ia))
then ib
else if ((ib <= ia and ia <= ic)
or (ic <= ia and ia <= ib))
then ia else ic;

nofail = (FC =0.0);
prePC = 0.0 -> pre PC;
pre_no_fail = (true -> pre nofail);
presetval = prevSet_val;
prevSet_val = (0.0 -> pre set_val);
setval = set_val;
single_fail_reported = (FC=1.0) or (FC=2.0) or (FC=4.0);
singlefailreported = single_fail_reported;


 
(* Req text: TriplexSignalMonitor shall always satisfy(singlefailreported &failureinprogress => setval = presetval)  *)
TSM004 = true;--H((( singlefailreported and failureinprogress => setval = presetval )));  
 
(* Req text: TriplexSignalMonitor shall always satisfy ((pre_no_fail & failure_must_be_latched)=> single_fail_reported)  *)
TSM001 = (H((( ( pre_no_fail and failure_must_be_latched ) => single_fail_reported ))));  
 
(* Req text: TriplexSignalMonitor shall always satisfy (FC=1 | FC=2 | FC=4) & prePC > 0 & prePC < PCLimit & ((! C1 & C2 & C3) | (C1 & ! C2 & C3) | (C1 & C2 & ! C3))  => set_val = prevSet_val  *)
TSM004V1 = true;--(H((( FC = 1.0  or FC= 2.0 or FC = 4.0 ) and prePC > 0.0 and prePC < PCLimit and ( ( not C1 and C2 and C3 ) or ( C1 and not C2 and C3 ) or ( C1 and C2 and not C3 ) ) => set_val = prevSet_val)));  
 
(* Req text: TriplexSignalMonitor shall always satisfy FC =2 =>  set_val = 0.5 * (ia +ic)  *)
TSM003b = (H((FC = 2.0 => set_val = 0.5 * ( ia + ic ))));  
 
(* Req text: TriplexSignalMonitor shall always satisfy FC =4 => set_val = 0.5 * (ib +ic)  *)
TSM003c = (H((FC = 4.0 => set_val = 0.5 * ( ib + ic ))));  
 
(* Req text: TriplexSignalMonitor  shall  always  satisfy  (nofail => (setval = midvalue))  *)
TSM002 = H((( nofail => ( setval = midvalue ) )));  
 
(* Req text: TriplexSignalMonitor shall always satisfy  countFC0 & prePC > 0 & prePC < PCLimit & ((! C1 & C2 & C3) | (C1 & ! C2 & C3) | (C1 & C2 & ! C3))  => set_val = prevSet_val  *)
TSM004v2 = true;--(H((countFC0 and prePC > 0.0 and prePC < PCLimit and ( ( not C1 and C2 and C3 ) or ( C1 and not C2 and C3 ) or ( C1 and C2 and not C3 ) ) => set_val = prevSet_val)));  
 
(* Req text: TriplexSignalMonitor shall always satisfy FC =1 => set_val = 0.5 * (ia +ib)  *)
TSM003a = (H((FC = 1.0 => set_val = 0.5 * ( ia + ib ))));  

assert FC=0.0 or FC=1.0 or FC=2.0 or FC=4.0;

 --%PROPERTY TSM004;  
 --%PROPERTY TSM001;  
 --%PROPERTY TSM004V1;  
 --%PROPERTY TSM003b;  
 --%PROPERTY TSM003c;  
 --%PROPERTY TSM002;  
 --%PROPERTY TSM004v2; 
 --%PROPERTY TSM003a; 
--%REALIZABLE PCLimit, ia, ib, ic, Tlevel;  

tel

