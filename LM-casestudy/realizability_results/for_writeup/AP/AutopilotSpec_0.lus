--Historically
node H(X:bool) returns (Y:bool);
let
    Y = X -> (X and (pre Y));
tel

--Y since inclusive X
node SI(X,Y: bool) returns (Z:bool);
let
Z = Y and (X or (false -> pre Z));
tel

--Y since X
node S(X,Y: bool) returns (Z:bool);
let
Z = X or (Y and (false -> pre Z));
tel

--Once
node O(X:bool) returns (Y:bool);
let
 Y = X or (false -> pre Y);
tel

--Timed Once: less than or equal to N
node OTlore( N: int; X: bool) returns (Y: bool);
    var C:int;
let
    C = if X then 0
        else (-1 -> pre C + (if pre C <0 then 0 else 1));

    Y = 0 <= C and C <= N;
tel

--Timed Once: general case
node OT( L: int;  R: int; X: bool) returns (Y: bool);
var  D:bool;
let
  D=delay(X, R);
  Y=OTlore(L-R, D);
tel

-- Timed Historically: general case
node HT( L: int;  R: int; X: bool) returns (Y: bool);
let
  Y = not OT(L, R, not X);
tel

-- Timed Since: general case
node ST( L: int;  R: int; X: bool; Y: bool)  returns (Z: bool);
let
  Z = S(X, Y) and OT(L, R, X);
tel

-- Timed Since: general case
node SIT( L: int;  R: int; X: bool; Y: bool) returns (Z: bool);
let
  Z = SI(X, Y) and OT(L, R, X);
tel


node delay(X:bool;  R:int) returns(Y:bool);
let

  Y = X;
 
tel

node abs_real(x:real) returns(y:real);
let
    y = if x >= 0.0 then x else - x;
tel

node AutopilotSpec( roll_hold: bool; altitude_hold:bool; phi:real; altitude:real; phiCmd:real) returns ( );

var absOf_alt_minus_IC:real; abs_roll_angle:real; abs_roll_rate:real;
overshoot:real;  AP000:bool; AP004b:bool; AP005:bool; AP006:bool; FTP: bool;
roll_angle:real; roll_rate: real; altitude_IC : real; step: real; roll_cmd:
real; rollAtZero: real; 

let


FTP = true->false;


roll_angle = phi;
roll_rate = pre roll_rate - roll_rate;

--From report
--const trim_altref: real = 7225.0;
altitude_IC = 7225.0;

roll_cmd = phiCmd;
step = roll_cmd - rollAtZero;
overshoot = (roll_angle - step)/step;


rollAtZero = roll_angle -> if (roll_hold and
not pre roll_hold) then roll_angle else pre
rollAtZero;

absOf_alt_minus_IC = abs_real(altitude - altitude_IC);

abs_roll_angle = abs_real(roll_angle);
abs_roll_rate = abs_real(roll_rate);
 

 
(* Req text: Autopilot shall always satisfy altitude_hold => absOf_alt_minus_IC <= 35.0  *)
AP000 = (H((altitude_hold => absOf_alt_minus_IC <= 35.0)));  
 
(* Req text: when in roll_hold mode Autopilot shall always satisfy overshoot <= 0.1  *)
AP004b = ((H(((( not roll_hold) and (pre (roll_hold))) and ( not FTP)) => (pre (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (overshoot <= 0.1) ))))) and ((SI( (roll_hold and (FTP or (pre ( not roll_hold)))), ( not (( not roll_hold) and (pre (roll_hold)))) )) => (SI( (roll_hold and (FTP or (pre ( not roll_hold)))), (overshoot <= 0.1) ))));  
 
(* Req text: Autopilot shall always satisfy  abs_roll_rate <= 6.6  *)
AP005 = (H((abs_roll_rate <= 6.6)));  
 
(* Req text: Autopilot shall always satisfy abs_roll_angle < 33.0  *)
AP006 = (H((abs_roll_angle < 33.0)));  

 
 --%PROPERTY AP000;  
 --%PROPERTY AP004b;  
 --%PROPERTY AP005;  
 --%PROPERTY AP006; 
--%REALIZABLE altitude_hold, roll_hold, phiCmd;  

tel
